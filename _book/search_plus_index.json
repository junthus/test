{"./":{"url":"./","title":"Introduction","keywords":"","body":" 뀨 깃북이 머여 문서작성 + 호스팅 플랫폼. npm을 기반으로 한 플러그인 마켓이 있어서 여러 기능을 끌어다 쓰기 편하다(만 찾기는 좀 힘들다). 기본으로 제공하는 검색창, 사용자 의견받기, pdf 다운로드 지원등이 매우 편리함. SaaS 로만 제공하는 단호박. github.io 가 있어서인듯. 데스크탑 에디터가 있긴 한데 마크다운 편집기가 구타유발툴이라 npm 설치를 추천. (gitbook 코어가 버전이 여러개이기도 하고) $ npm install gitbook-cli -g cli는 이런 명령어를 지원 $ gitbook init (./newDir) 기본 파일 생성 $ gitbook build 빌드 $ gitbook serve 로컬 서버 + 변경사항 watch => 빌드 & 리프레시 지원, _book 디렉터리에 빌드 결과물 업데이트. $ gitbook install plugin 설치 어케 만듬 파일 컨벤션 README.md (필수) SUMMARY.md (toc용) GLOSSARY.md (용어집 - 자동 색인되어 문서에서 링크되어서 보여짐) book.json (gitbook 설정) cover.jpg, cover_small.jpg (커버이미지라는데 아직 확인 못함) 원격저장소 그냥 올리면 된다. origin master 최고. 예시 깃북 셋팅에서 다른 브랜치로도 지정 가능. 멀티 링구얼 문서 폴더 구조로 대응 가능. 어또케 호스팅 ? 깃헙 계정 + repo 필요 (org에 문서를 호스팅하려는 경우 그 계정으로 로긴해야 한다.) https://www.gitbook.com/ 접속, 깃헙 계정으로 로긴하면 이메일로 컨펌이 온다. 그걸 누르면 아래 페이지로 감. Integration - 버튼 클릭 > 깃북용 리포 선택 > install gitbook Account - 깃헙 계정 연동 위의 두 가지를 하고 나면 Books 메뉴에 create 메뉴가 생김. 끗. 예시 커스텀하기 플러그인(npm) 설치/제작 - https://plugins.gitbook.com/ 플러긴 관리 : book.json에 이름 넣고 git install 하면 설치해주는데 지우는 커멘드가 안 보임 어차피 npm이므로 gitbook-plugin-${이름}으로 package.json 따로 관리하는게 나을듯. 이 gitbook에 설치해본거 search-pro - 검색 highlight prism - syntax highlight codepen - 무료라 혹했는데 플러긴이 바보 되어있음 ㅠㅠ jsbin - pro 계정 필요 JS Bin on jsbin.com 테마도 플러긴으로 바꿔볼까 했는데 아직 테마 마켓은 성숙하지 않은듯... 그러므로 테마는 직접 야매로 바꾸는게 낫습니다. css 수정 - styles/website.css layout 수정 - _layout/website/... 템플릿 언어 : nunjucks 구조 참고 : GitbookIO/theme-default 양 많아지면 걍 플러그인 행이 나을듯. See More gitbook FAQ gitbook toolchain doc "},"extensions-api-index.html":{"url":"extensions-api-index.html","title":"API INDEX","keywords":"","body":"JavaScript APIs Chrome provides extensions with many special-purpose APIs like whale.runtime and whale.alarms. Stable APIs Name Description Since accessibilityFeatures Use the whale.accessibilityFeatures API to manage Chrome's accessibility features. This API relies on the ChromeSetting prototype of the type API for getting and setting individual accessibility features. In order to get feature states the extension must request accessibilityFeatures.read permission. For modifying feature state, the extension needs accessibilityFeatures.modify permission. Note that accessibilityFeatures.modify does not imply accessibilityFeatures.read permission. 37 alarms Use the whale.alarms API to schedule code to run periodically or at a specified time in the future. 22 bookmarks Use the whale.bookmarks API to create, organize, and otherwise manipulate bookmarks. Also see Override Pages, which you can use to create a custom Bookmark Manager page. 20 browserAction Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup. 20 browsingData Use the whale.browsingData API to remove browsing data from a user's local profile. 20 certificateProvider Use this API to expose certificates to the platform which can use these certificates for TLS authentications. 46 commands Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension. 25 contentSettings Use the whale.contentSettings API to change settings that control whether websites can use features such as cookies, JavaScript, and plugins. More generally speaking, content settings allow you to customize Chrome's behavior on a per-site basis instead of globally. 20 contextMenus Use the whale.contextMenus API to add items to Google Chrome's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages. 20 cookies Use the whale.cookies API to query and modify cookies, and to be notified when they change. 20 debugger The whale.debugger API serves as an alternate transport for Chrome's remote debugging protocol. Use whale.debugger to attach to one or more tabs to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee tabId to target tabs with sendCommand and route events by tabId from onEvent callbacks. 20 declarativeContent Use the whale.declarativeContent API to take actions depending on the content of a page, without requiring permission to read the page's content. 33 desktopCapture Desktop Capture API that can be used to capture content of screen, individual windows or tabs. 34 devtools.inspectedWindow Use the whale.devtools.inspectedWindow API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page. 21 devtools.network Use the whale.devtools.network API to retrieve the information about network requests displayed by the Developer Tools in the Network panel. 21 devtools.panels Use the whale.devtools.panels API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars. 21 documentScan Use the whale.documentScan API to discover and retrieve images from attached paper document scanners. 44 downloads Use the whale.downloads API to programmatically initiate, monitor, manipulate, and search for downloads. 31 enterprise.deviceAttributes Use the whale.enterprise.deviceAttributes API to read device attributes. 46 enterprise.platformKeys Use the whale.enterprise.platformKeys API to generate hardware-backed keys and to install certificates for these keys. The certificates will be managed by the platform and can be used for TLS authentication, network access or by other extension through whale.platformKeys. 37 events The whale.events namespace contains common types used by APIs dispatching events to notify you when something interesting happens. 21 extension The whale.extension API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in Message Passing. 20 extensionTypes The whale.extensionTypes API contains type declarations for Chrome extensions. 39 fileBrowserHandler Use the whale.fileBrowserHandler API to extend the Chrome OS file browser. For example, you can use this API to enable users to upload files to your website. 20 fileSystemProvider Use the whale.fileSystemProvider API to create file systems, that can be accessible from the file manager on Chrome OS. 40 fontSettings Use the whale.fontSettings API to manage Chrome's font settings. 22 gcm Use whale.gcm to enable apps and extensions to send and receive messages through the Google Cloud Messaging Service. 35 history Use the whale.history API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see Override Pages. 20 i18n Use the whale.i18n infrastructure to implement internationalization across your whole app or extension. 20 identity Use the whale.identity API to get OAuth2 access tokens. 29 idle Use the whale.idle API to detect when the machine's idle state changes. 20 input.ime Use the whale.input.ime API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window. 21 instanceID Use whale.instanceID to access the Instance ID service. 46 management The whale.management API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that override the built-in New Tab page. 20 networking.config Use the networking.config API to authenticate to captive portals. 43 notifications Use the whale.notifications API to create rich notifications using templates and show these notifications to users in the system tray. 28 omnibox The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox. 20 pageAction Use the whale.pageAction API to put icons in the main Google Chrome toolbar, to the right of the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages. Page actions appear grayed out when inactive. 20 pageCapture Use the whale.pageCapture API to save a tab as MHTML. 20 permissions Use the whale.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary. 20 platformKeys Use the whale.platformKeys API to access client certificates managed by the platform. If the user or policy grants the permission, an extension can use such a certficate in its custom authentication protocol. E.g. this allows usage of platform managed certificates in third party VPNs (see whale.vpnProvider). 45 power Use the whale.power API to override the system's power management features. 27 printerProvider The whale.printerProvider API exposes events used by print manager to query printers controlled by extensions, to query their capabilities and to submit print jobs to these printers. 44 privacy Use the whale.privacy API to control usage of the features in Chrome that can affect a user's privacy. This API relies on the ChromeSetting prototype of the type API for getting and setting Chrome's configuration. 20 proxy Use the whale.proxy API to manage Chrome's proxy settings. This API relies on the ChromeSetting prototype of the type API for getting and setting the proxy configuration. 20 runtime Use the whale.runtime API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs. 22 sessions Use the whale.sessions API to query and restore tabs and windows from a browsing session. 37 storage Use the whale.storage API to store, retrieve, and track changes to user data. 20 system.cpu Use the system.cpu API to query CPU metadata. 32 system.memory The whale.system.memory API. 32 system.storage Use the whale.system.storage API to query storage device information and be notified when a removable storage device is attached and detached. 30 tabCapture Use the whale.tabCapture API to interact with tab media streams. 31 tabs Use the whale.tabs API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser. 20 topSites Use the whale.topSites API to access the top sites that are displayed on the new tab page. 20 tts Use the whale.tts API to play synthesized text-to-speech (TTS). See also the related ttsEngine API, which allows an extension to implement a speech engine. 20 ttsEngine Use the whale.ttsEngine API to implement a text-to-speech(TTS) engine using an extension. If your extension registers using this API, it will receive events containing an utterance to be spoken and other parameters when any extension or Chrome App uses the tts API to generate speech. Your extension can then use any available web technology to synthesize and output the speech, and send events back to the calling function to report the status. 20 types The whale.types API contains type declarations for Chrome. 20 vpnProvider Use the whale.vpnProvider API to implement a VPN client. 43 wallpaper Use the whale.wallpaper API to change the ChromeOS wallpaper. 31 webNavigation Use the whale.webNavigation API to receive notifications about the status of navigation requests in-flight. 20 webRequest Use the whale.webRequest API to observe and analyze traffic and to intercept, block, or modify requests in-flight. 20 webstore Use the whale.webstore API to initiate app and extension installations \"inline\" from your site. 20 windows Use the whale.windows API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser. 20 Beta APIs These APIs are only available in the Chrome Beta and Dev channels: Name Description declarativeWebRequest Note: this API is currently on hold, without concrete plans to move to stable. Use the whale.declarativeWebRequest API to intercept, block, or modify requests in-flight. It is significantly faster than the whale.webRequest API because you can register rules that are evaluated in the browser rather than the JavaScript engine with reduces roundtrip latencies and allows higher efficiency. Dev APIs These APIs are only available in the Chrome Dev channel: Name Description automation The whale.automation API allows developers to access the automation (accessibility) tree for the browser. The tree resembles the DOM tree, but only exposes the semantic structure of a page. It can be used to programmatically interact with a page by examining names, roles, and states, listening for events, and performing actions on nodes. processes Use the whale.processes API to interact with the browser's processes. signedInDevices Use the whale.signedInDevices API to get a list of devices signed into chrome with the same account as the current profile. Experimental APIs Chrome also has experimental APIs, some of which will become supported APIs in future releases of Chrome. API conventions Unless the doc says otherwise, methods in the whale. APIs are *asynchronous: they return immediately, without waiting for the operation to finish. If you need to know the outcome of an operation, then you pass a callback function into the method. For more information, watch this video: Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-system-cpu.html":{"url":"extensions-system-cpu.html","title":"system-cpu","keywords":"","body":"whale.system.cpu Description: Use the system.cpu API to query CPU metadata. Availability: Since Chrome 32. Permissions: \"system.cpu\" Summary Methods getInfo − whale.system.cpu.getInfo(function callback) Methods getInfo `whale.system.cpu.getInfo(function callback)` Queries basic CPU information of the system. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | integer | numOfProcessors | |---|---| The number of logical processors. | | string | archName | The architecture name of the processors. | | string | modelName | The model name of the processors. | | array of string | features | A set of feature codes indicating some of the processor's capabilities. The currently supported codes are \"mmx\", \"sse\", \"sse2\", \"sse3\", \"ssse3\", \"sse4_1\", \"sse4_2\", and \"avx\". | | array of object | processors | Information about each logical processor. #### Properties of each object | object | usage | |---|---| Cumulative usage info for this logical processor. | double | user | |---|---| The cumulative time used by userspace programs on this processor. | | double | kernel | The cumulative time used by kernel programs on this processor. | | double | idle | The cumulative time spent idle by this processor. | | double | total | The total cumulative time for this processor. This value is equal to user + kernel + idle. | | | | array of double | temperatures | List of CPU temperature readings from each thermal zone of the CPU. Temperatures are in degrees Celsius. Currently supported on Chrome OS only. | | | "},"extensions-system-memory.html":{"url":"extensions-system-memory.html","title":"system-memory","keywords":"","body":"whale.system.memory Description: The whale.system.memory API. Availability: Since Chrome 32. Permissions: \"system.memory\" ## Summary | Methods | |---| | [getInfo](#method-getInfo) − `whale.system.memory.getInfo(function callback)` | ## Methods ### getInfo `whale.system.memory.getInfo(function callback)` Get physical memory information. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | double | capacity | |---|---| The total amount of physical memory capacity, in bytes. | | double | availableCapacity | The amount of available capacity, in bytes. | | | "},"extensions-system-storage.html":{"url":"extensions-system-storage.html","title":"system-storage","keywords":"","body":"whale.system.storage Description: Use the whale.system.storage API to query storage device information and be notified when a removable storage device is attached and detached. Availability: Since Chrome 30. Permissions: \"system.storage\" ## Summary | Types | |---| | [StorageUnitInfo](#type-StorageUnitInfo) | | Methods | | [getInfo](#method-getInfo) − `whale.system.storage.getInfo(function callback)` | | [ejectDevice](#method-ejectDevice) − `whale.system.storage.ejectDevice(string id, function callback)` | | [getAvailableCapacity](#method-getAvailableCapacity) − `whale.system.storage.getAvailableCapacity(string id, function callback)` | | Events | | [onAttached](#event-onAttached) | | [onDetached](#event-onDetached) | ## Types ### StorageUnitInfo | properties | |---| | string | id | The transient ID that uniquely identifies the storage device. This ID will be persistent within the same run of a single application. It will not be a persistent identifier between different runs of an application, or between different applications. | | string | name | The name of the storage unit. | | enum of `\"fixed\"`, `\"removable\"`, or `\"unknown\"` | type | The media type of the storage unit. fixed The storage has fixed media, e.g. hard disk or SSD. removable The storage is removable, e.g. USB flash drive. unknown The storage type is unknown. | | double | capacity | The total amount of the storage space, in bytes. | ## Methods ### getInfo `whale.system.storage.getInfo(function callback)` Get the storage information from the system. The argument passed to the callback is an array of StorageUnitInfo objects. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) info) {...};` | array of [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) | info | | |---|---|---| | ### ejectDevice `whale.system.storage.ejectDevice(string id, function callback)` Ejects a removable storage device. | Parameters | |---| | string | id | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(enum of `\"success\"`, `\"in_use\"`, `\"no_such_device\"`, or `\"failure\"` result) {...};` | enum of `\"success\"`, `\"in_use\"`, `\"no_such_device\"`, or `\"failure\"` | result | |---|---| success The ejection command is successful -- the application can prompt the user to remove the device. in_use The device is in use by another application. The ejection did not succeed; the user should not remove the device until the other application is done with the device. no_such_device There is no such device known. failure The ejection command failed. | | ### getAvailableCapacity `whale.system.storage.getAvailableCapacity(string id, function callback)` **Dev** channel only. [Learn more](api_index#dev_apis). Get the available capacity of a specified |id| storage device. The |id| is the transient device ID from StorageUnitInfo. | Parameters | |---| | string | id | Since Chrome 32. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | string | id | |---|---| A copied |id| of getAvailableCapacity function parameter |id|. | | double | availableCapacity | The available capacity of the storage device, in bytes. | | | ## Events ### onAttached Fired when a new removable storage is attached to the system. #### addListener `whale.system.storage.onAttached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) info) {...};` | [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) | info | | |---|---|---| | ### onDetached Fired when a removable storage is detached from the system. #### addListener `whale.system.storage.onDetached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id) {...};` | string | id | | |---|---|---| | "},"extensions-management.html":{"url":"extensions-management.html","title":"management","keywords":"","body":"whale.management Description: The whale.management API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that override the built-in New Tab page. Availability: Since Chrome 20. Permissions: \"management\" ## Manifest You must declare the \"management\" permission in the [extension manifest](manifest) to use the management API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"management\" ]**, ... } [management.getPermissionWarningsByManifest](/extensions/management#method-getPermissionWarningsByManifest), [management.uninstallSelf](/extensions/management#method-uninstallSelf), and [management.getSelf](/extensions/management#method-getSelf) do not require the management permission. ## Summary | Types | |---| | [IconInfo](#type-IconInfo) | | [LaunchType](#type-LaunchType) | | [ExtensionDisabledReason](#type-ExtensionDisabledReason) | | [ExtensionType](#type-ExtensionType) | | [ExtensionInstallType](#type-ExtensionInstallType) | | [ExtensionInfo](#type-ExtensionInfo) | | Methods | | [getAll](#method-getAll) − `whale.management.getAll(function callback)` | | [get](#method-get) − `whale.management.get(string id, function callback)` | | [getSelf](#method-getSelf) − `whale.management.getSelf(function callback)` | | [getPermissionWarningsById](#method-getPermissionWarningsById) − `whale.management.getPermissionWarningsById(string id, function callback)` | | [getPermissionWarningsByManifest](#method-getPermissionWarningsByManifest) − `whale.management.getPermissionWarningsByManifest(string manifestStr, function callback)` | | [setEnabled](#method-setEnabled) − `whale.management.setEnabled(string id, boolean enabled, function callback)` | | [uninstall](#method-uninstall) − `whale.management.uninstall(string id, object options, function callback)` | | [uninstallSelf](#method-uninstallSelf) − `whale.management.uninstallSelf(object options, function callback)` | | [launchApp](#method-launchApp) − `whale.management.launchApp(string id, function callback)` | | [createAppShortcut](#method-createAppShortcut) − `whale.management.createAppShortcut(string id, function callback)` | | [setLaunchType](#method-setLaunchType) − `whale.management.setLaunchType(string id, LaunchType launchType, function callback)` | | [generateAppForLink](#method-generateAppForLink) − `whale.management.generateAppForLink(string url, string title, function callback)` | | Events | | [onInstalled](#event-onInstalled) | | [onUninstalled](#event-onUninstalled) | | [onEnabled](#event-onEnabled) | | [onDisabled](#event-onDisabled) | ## Types ### IconInfo Information about an icon belonging to an extension, app, or theme. | properties | |---| | integer | size | A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16. | | string | url | The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append `?grayscale=true` to the URL. | ### LaunchType These are all possible app launch types. | Enum | |---| | `\"OPEN_AS_REGULAR_TAB\"`, `\"OPEN_AS_PINNED_TAB\"`, `\"OPEN_AS_WINDOW\"`, or `\"OPEN_FULL_SCREEN\"` | ### ExtensionDisabledReason A reason the item is disabled. | Enum | |---| | `\"unknown\"`, or `\"permissions_increase\"` | ### ExtensionType The type of this extension, app, or theme. | Enum | |---| | `\"extension\"`, `\"hosted_app\"`, `\"packaged_app\"`, `\"legacy_packaged_app\"`, or `\"theme\"` | ### ExtensionInstallType How the extension was installed. One of admin: The extension was installed because of an administrative policy, development: The extension was loaded unpacked in developer mode, normal: The extension was installed normally via a .crx file, sideload: The extension was installed by other software on the machine, other: The extension was installed by other means. | Enum | |---| | `\"admin\"`, `\"development\"`, `\"normal\"`, `\"sideload\"`, or `\"other\"` | ### ExtensionInfo Information about an installed extension, app, or theme. | properties | |---| | string | id | The extension's unique identifier. | | string | name | The name of this extension, app, or theme. | | string | shortName | Since Chrome 31. A short version of the name of this extension, app, or theme. | | string | description | The description of this extension, app, or theme. | | string | version | The [version](manifest/version) of this extension, app, or theme. | | string | (optional) versionName | Since Chrome 50. The [version name](manifest/version#version_name) of this extension, app, or theme if the manifest specified one. | | boolean | mayDisable | Whether this extension can be disabled or uninstalled by the user. | | boolean | (optional) mayEnable | Since Chrome 62. Whether this extension can be enabled by the user. This is only returned for extensions which are not enabled. | | boolean | enabled | Whether it is currently enabled or disabled. | | [ExtensionDisabledReason](/extensions/management#type-ExtensionDisabledReason) | (optional) disabledReason | A reason the item is disabled. | | boolean | isApp | **Deprecated** since Chrome 33. Please use [management.ExtensionInfo.type](/extensions/management#property-ExtensionInfo-type). True if this is an app. | | [ExtensionType](/extensions/management#type-ExtensionType) | type | Since Chrome 23. The type of this extension, app, or theme. | | string | (optional) appLaunchUrl | The launch url (only present for apps). | | string | (optional) homepageUrl | The URL of the homepage of this extension, app, or theme. | | string | (optional) updateUrl | The update URL of this extension, app, or theme. | | boolean | offlineEnabled | Whether the extension, app, or theme declares that it supports offline. | | string | optionsUrl | The url for the item's options page, if it has one. | | array of [IconInfo](/extensions/management#type-IconInfo) | (optional) icons | A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the [manifest documentation on icons](manifest/icons) for more details. | | array of string | permissions | Returns a list of API based permissions. | | array of string | hostPermissions | Returns a list of host based permissions. | | [ExtensionInstallType](/extensions/management#type-ExtensionInstallType) | installType | Since Chrome 22. How the extension was installed. | | [LaunchType](/extensions/management#type-LaunchType) | (optional) launchType | Since Chrome 37. The app launch type (only present for apps). | | array of [LaunchType](/extensions/management#type-LaunchType) | (optional) availableLaunchTypes | Since Chrome 37. The currently available launch types (only present for apps). | ## Methods ### getAll `whale.management.getAll(function callback)` Returns a list of information about installed extensions and apps. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | array of [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### get `whale.management.get(string id, function callback)` Returns information about the installed extension, app, or theme that has the given ID. | Parameters | |---| | string | id | The ID from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### getSelf `whale.management.getSelf(function callback)` Since Chrome 39. Returns information about the calling extension, app, or theme. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### getPermissionWarningsById `whale.management.getPermissionWarningsById(string id, function callback)` Returns a list of [permission warnings](permission_warnings) for the given extension id. | Parameters | |---| | string | id | The ID of an already installed extension. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of string permissionWarnings) {...};` | array of string | permissionWarnings | | |---|---|---| | ### getPermissionWarningsByManifest `whale.management.getPermissionWarningsByManifest(string manifestStr, function callback)` Returns a list of [permission warnings](permission_warnings) for the given extension manifest string. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | string | manifestStr | Extension manifest JSON string. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of string permissionWarnings) {...};` | array of string | permissionWarnings | | |---|---|---| | ### setEnabled `whale.management.setEnabled(string id, boolean enabled, function callback)` Enables or disables an app or extension. In most cases this function must be called in the context of a user gesture (e.g. an onclick handler for a button), and may present the user with a native confirmation UI as a way of preventing abuse. | Parameters | |---| | string | id | This should be the id from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | boolean | enabled | Whether this item should be enabled or disabled. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### uninstall `whale.management.uninstall(string id, object options, function callback)` Uninstalls a currently installed app or extension. | Parameters | |---| | string | id | This should be the id from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | object | (optional) options | Since Chrome 21. | boolean | (optional) showConfirmDialog | |---|---| Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false for self uninstalls. If an extension uninstalls another extension, this parameter is ignored and the dialog is always shown. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### uninstallSelf `whale.management.uninstallSelf(object options, function callback)` Since Chrome 26. Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | object | (optional) options | | boolean | (optional) showConfirmDialog | |---|---| Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### launchApp `whale.management.launchApp(string id, function callback)` Launches an application. | Parameters | |---| | string | id | The extension id of the application. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### createAppShortcut `whale.management.createAppShortcut(string id, function callback)` Since Chrome 37. Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be created. | Parameters | |---| | string | id | Since Chrome 36. This should be the id from an app item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setLaunchType `whale.management.setLaunchType(string id, [LaunchType](/extensions/management#type-LaunchType) launchType, function callback)` Since Chrome 37. Set the launch type of an app. | Parameters | |---| | string | id | This should be the id from an app item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | [LaunchType](/extensions/management#type-LaunchType) | launchType | The target launch type. Always check and make sure this launch type is in [ExtensionInfo.availableLaunchTypes](/extensions/management#property-ExtensionInfo-availableLaunchTypes), because the available launch types vary on different platforms and configurations. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### generateAppForLink `whale.management.generateAppForLink(string url, string title, function callback)` Since Chrome 37. Generate an app for a URL. Returns the generated bookmark app. | Parameters | |---| | string | url | The URL of a web page. The scheme of the URL can only be \"http\" or \"https\". | | string | title | The title of the generated app. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ## Events ### onInstalled Fired when an app or extension has been installed. #### addListener `whale.management.onInstalled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | ### onUninstalled Fired when an app or extension has been uninstalled. #### addListener `whale.management.onUninstalled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id) {...};` | string | id | |---|---| The id of the extension, app, or theme that was uninstalled. | | ### onEnabled Fired when an app or extension has been enabled. #### addListener `whale.management.onEnabled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | ### onDisabled Fired when an app or extension has been disabled. #### addListener `whale.management.onDisabled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | "},"extensions-alarms.html":{"url":"extensions-alarms.html","title":"alarms","keywords":"","body":"whale.alarms Description: Use the whale.alarms API to schedule code to run periodically or at a specified time in the future. Availability: Since Chrome 22. Permissions: \"alarms\" Learn More: Event Pages ## Summary | Types | |---| | [Alarm](#type-Alarm) | | Methods | | [create](#method-create) − `whale.alarms.create(string name, object alarmInfo)` | | [get](#method-get) − `whale.alarms.get(string name, function callback)` | | [getAll](#method-getAll) − `whale.alarms.getAll(function callback)` | | [clear](#method-clear) − `whale.alarms.clear(string name, function callback)` | | [clearAll](#method-clearAll) − `whale.alarms.clearAll(function callback)` | | Events | | [onAlarm](#event-onAlarm) | ## Types ### Alarm | properties | |---| | string | name | Name of this alarm. | | double | scheduledTime | Time at which this alarm was scheduled to fire, in milliseconds past the epoch (e.g. `Date.now() + n`). For performance reasons, the alarm may have been delayed an arbitrary amount beyond this. | | double | (optional) periodInMinutes | If not null, the alarm is a repeating alarm and will fire again in periodInMinutes minutes. | ## Methods ### create `whale.alarms.create(string name, object alarmInfo)` Creates an alarm. Near the time(s) specified by alarmInfo, the `onAlarm` event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm. In order to reduce the load on the user's machine, Chrome limits alarms to at most once every 1 minute but may delay them an arbitrary amount more. That is, setting `delayInMinutes` or `periodInMinutes` to less than `1` will not be honored and will cause a warning. `when` can be set to less than 1 minute after \"now\" without warning but won't actually cause the alarm to fire for at least 1 minute. To help you debug your app or extension, when you've loaded it unpacked, there's no limit to how often the alarm can fire. | Parameters | |---| | string | (optional) name | Optional name to identify this alarm. Defaults to the empty string. | | object | alarmInfo | Describes when the alarm should fire. The initial time must be specified by either when or delayInMinutes (but not both). If periodInMinutes is set, the alarm will repeat every periodInMinutes minutes after the initial event. If neither when or delayInMinutes is set for a repeating alarm, periodInMinutes is used as the default for delayInMinutes. | double | (optional) when | |---|---| Time at which the alarm should fire, in milliseconds past the epoch (e.g. `Date.now() + n`). | | double | (optional) delayInMinutes | Length of time in minutes after which the `onAlarm` event should fire. | | double | (optional) periodInMinutes | If set, the onAlarm event should fire every periodInMinutes minutes after the initial event specified by when or delayInMinutes. If not set, the alarm will only fire once. | | ### get `whale.alarms.get(string name, function callback)` Retrieves details about the specified alarm. | Parameters | |---| | string | (optional) name | The name of the alarm to get. Defaults to the empty string. | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Alarm](/extensions/alarms#type-Alarm) alarm) {...};` | [Alarm](/extensions/alarms#type-Alarm) | (optional) alarm | | |---|---|---| | ### getAll `whale.alarms.getAll(function callback)` Gets an array of all the alarms. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Alarm](/extensions/alarms#type-Alarm) alarms) {...};` | array of [Alarm](/extensions/alarms#type-Alarm) | alarms | | |---|---|---| | ### clear `whale.alarms.clear(string name, function callback)` Clears the alarm with the given name. | Parameters | |---| | string | (optional) name | The name of the alarm to clear. Defaults to the empty string. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ### clearAll `whale.alarms.clearAll(function callback)` Clears all alarms. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ## Events ### onAlarm Fired when an alarm has elapsed. Useful for event pages. #### addListener `whale.alarms.onAlarm.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Alarm](/extensions/alarms#type-Alarm) alarm) {...};` | [Alarm](/extensions/alarms#type-Alarm) | alarm | |---|---| The alarm that has elapsed. | | "},"extensions-messaging.html":{"url":"extensions-messaging.html","title":"messaging","keywords":"","body":"Message Passing Since content scripts run in the context of a web page and not the extension, they often need some way of communicating with the rest of the extension. For example, an RSS reader extension might use content scripts to detect the presence of an RSS feed on a page, then notify the background page in order to display a page action icon for that page. Communication between extensions and their content scripts works by using message passing. Either side can listen for messages sent from the other end, and respond on the same channel. A message can contain any valid JSON object (null, boolean, number, string, array, or object). There is a simple API for one-time requests and a more complex API that allows you to have long-lived connections for exchanging multiple messages with a shared context. It is also possible to send a message to another extension if you know its ID, which is covered in the cross-extension messages section. Simple one-time requests If you only need to send a single message to another part of your extension (and optionally get a response back), you should use the simplified runtime.sendMessage or tabs.sendMessage . This lets you send a one-time JSON-serializable message from a content script to extension , or vice versa, respectively . An optional callback parameter allows you handle the response from the other side, if there is one. Sending a request from a content script looks like this: whale.runtime.sendMessage({greeting: \"hello\"}, function(response) { console.log(response.farewell); }); Sending a request from the extension to a content script looks very similar, except that you need to specify which tab to send it to. This example demonstrates sending a message to the content script in the selected tab. whale.tabs.query({active: true, currentWindow: true}, function(tabs) { whale.tabs.sendMessage(tabs[0].id, {greeting: \"hello\"}, function(response) { console.log(response.farewell); }); }); On the receiving end, you need to set up an runtime.onMessage event listener to handle the message. This looks the same from a content script or extension page. whale.runtime.onMessage.addListener( function(request, sender, sendResponse) { console.log(sender.tab ? \"from a content script:\" + sender.tab.url : \"from the extension\"); if (request.greeting == \"hello\") sendResponse({farewell: \"goodbye\"}); }); In the above example, sendResponse was called synchronously. If you want to asynchronously use sendResponse, add return true; to the onMessage event handler. Note: If multiple pages are listening for onMessage events, only the first to call sendResponse() for a particular event will succeed in sending the response. All other responses to that event will be ignored. Note: The sendResponse callback is only valid if used synchronously, or if the event handler returns true to indicate that it will respond asynchronously. The sendMessage function's callback will be invoked automatically if no handlers return true or if the sendResponse callback is garbage-collected. Long-lived connections Sometimes it's useful to have a conversation that lasts longer than a single request and response. In this case, you can open a long-lived channel from your content script to an extension page , or vice versa, using runtime.connect or tabs.connect, respectively . The channel can optionally have a name, allowing you to distinguish between different types of connections. One use case might be an automatic form fill extension. The content script could open a channel to the extension page for a particular login, and send a message to the extension for each input element on the page to request the form data to fill in. The shared connection allows the extension to keep shared state linking the several messages coming from the content script. When establishing a connection, each end is given a runtime.Port object which is used for sending and receiving messages through that connection. Here is how you open a channel from a content script, and send and listen for messages: var port = whale.runtime.connect({name: \"knockknock\"}); port.postMessage({joke: \"Knock knock\"}); port.onMessage.addListener(function(msg) { if (msg.question == \"Who's there?\") port.postMessage({answer: \"Madame\"}); else if (msg.question == \"Madame who?\") port.postMessage({answer: \"Madame... Bovary\"}); }); Sending a request from the extension to a content script looks very similar, except that you need to specify which tab to connect to. Simply replace the call to connect in the above example with tabs.connect. In order to handle incoming connections, you need to set up a runtime.onConnect event listener. This looks the same from a content script or an extension page. When another part of your extension calls \"connect()\", this event is fired, along with the runtime.Port object you can use to send and receive messages through the connection. Here's what it looks like to respond to incoming connections: whale.runtime.onConnect.addListener(function(port) { console.assert(port.name == \"knockknock\"); port.onMessage.addListener(function(msg) { if (msg.joke == \"Knock knock\") port.postMessage({question: \"Who's there?\"}); else if (msg.answer == \"Madame\") port.postMessage({question: \"Madame who?\"}); else if (msg.answer == \"Madame... Bovary\") port.postMessage({question: \"I don't get it.\"}); }); }); Port lifetime Ports are designed as a two-way communication method between different parts of the extension, where a (top-level) frame is viewed as the smallest part. Upon calling tabs.connect, runtime.connect or runtime.connectNative, a Port is created. This port can immediately be used for sending messages to the other end via postMessage. If there are multiple frames in a tab, calling tabs.connect results in multiple invocations of the runtime.onConnect event (once for each frame in the tab). Similarly, if runtime.connect is used, then the onConnect event may be fired multiple times (once for every frame in the extension process). You may want to find out when a connection is closed, for example if you are maintaining separate state for each open port. For this you can listen to the runtime.Port.onDisconnect event. This event is fired when there are no valid ports at the other side of the channel. This happens in the following situations: There are no listeners for runtime.onConnect at the other end. The tab containing the port is unloaded (e.g. if the tab is navigated). The frame from where connect was called has unloaded. All frames that received the port (via runtime.onConnect) have unloaded. runtime.Port.disconnect is called by the other end. Note that if a connect call results in multiple ports at the receiver's end, and disconnect() is called on any of these ports, then the onDisconnect event is only fired at the port of the sender, and not at the other ports. Cross-extension messaging In addition to sending messages between different components in your extension, you can use the messaging API to communicate with other extensions. This lets you expose a public API that other extensions can take advantage of. Listening for incoming requests and connections is similar to the internal case, except you use the runtime.onMessageExternal or runtime.onConnectExternal methods. Here's an example of each: // For simple requests: whale.runtime.onMessageExternal.addListener( function(request, sender, sendResponse) { if (sender.id == blacklistedExtension) return; // don't allow this extension access else if (request.getTargetData) sendResponse({targetData: targetData}); else if (request.activateLasers) { var success = activateLasers(); sendResponse({activateLasers: success}); } }); // For long-lived connections: whale.runtime.onConnectExternal.addListener(function(port) { port.onMessage.addListener(function(msg) { // See other examples for sample onMessage handlers. }); }); Likewise, sending a message to another extension is similar to sending one within your extension. The only difference is that you must pass the ID of the extension you want to communicate with. For example: // The ID of the extension we want to talk to. var laserExtensionId = \"abcdefghijklmnoabcdefhijklmnoabc\"; // Make a simple request: whale.runtime.sendMessage(laserExtensionId, {getTargetData: true}, function(response) { if (targetInRange(response.targetData)) whale.runtime.sendMessage(laserExtensionId, {activateLasers: true}); }); // Start a long-running conversation: var port = whale.runtime.connect(laserExtensionId); port.postMessage(...); Sending messages from web pages Similar to cross-extension messaging, your app or extension can receive and respond to messages from regular web pages. To use this feature, you must first specify in your manifest.json which web sites you want to communicate with. For example: \"externally_connectable\": { \"matches\": [\"*://*.example.com/*\"] } This will expose the messaging API to any page which matches the URL patterns you specify. The URL pattern must contain at least a second-level domain - that is, hostname patterns like \"\", \".com\", \".co.uk\", and \".appspot.com\" are prohibited. From the web page, use the runtime.sendMessage or runtime.connect APIs to send a message to a specific app or extension. For example: // The ID of the extension we want to talk to. var editorExtensionId = \"abcdefghijklmnoabcdefhijklmnoabc\"; // Make a simple request: whale.runtime.sendMessage(editorExtensionId, {openUrlInEditor: url}, function(response) { if (!response.success) handleError(url); }); From your app or extension, you may listen to messages from web pages via the runtime.onMessageExternal or runtime.onConnectExternal APIs, similar to cross-extension messaging. Only the web page can initiate a connection. Here is an example: whale.runtime.onMessageExternal.addListener( function(request, sender, sendResponse) { if (sender.url == blacklistedWebsite) return; // don't allow this web page access if (request.openUrlInEditor) openUrl(request.openUrlInEditor); }); Native messaging Extensions and apps can exchange messages with native applications that are registered as a native messaging host. To learn more about this feature, see Native messaging. Security considerations When receiving a message from a content script or another extension, your background page should be careful not to fall victim to cross-site scripting. Specifically, avoid using dangerous APIs such as the below: whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // WARNING! Might be evaluating an evil script! var resp = eval(\"(\" + response.farewell + \")\"); }); whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // WARNING! Might be injecting a malicious script! document.getElementById(\"resp\").innerHTML = response.farewell; }); Instead, prefer safer APIs that do not run scripts: whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // JSON.parse does not evaluate the attacker's scripts. var resp = JSON.parse(response.farewell); }); whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // innerText does not let the attacker inject HTML elements. document.getElementById(\"resp\").innerText = response.farewell; }); Examples You can find simple examples of communication via messages in the examples/api/messaging directory. The native messaging sample demonstrates how a Chrome app can communicate with a native app. For more examples and for help in viewing the source code, see Samples. Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-notifications.html":{"url":"extensions-notifications.html","title":"notifications","keywords":"","body":"whale.notifications Description: Use the whale.notifications API to create rich notifications using templates and show these notifications to users in the system tray. Availability: Since Chrome 28. Permissions: \"notifications\" Learn More: Rich Notifications Keep Users Informed Chrome Apps Office Hours: Rich Notifications | ## Summary | Types | |---| | [TemplateType](#type-TemplateType) | | [PermissionLevel](#type-PermissionLevel) | | [NotificationOptions](#type-NotificationOptions) | | Methods | | [create](#method-create) − `whale.notifications.create(string notificationId, NotificationOptions options, function callback)` | | [update](#method-update) − `whale.notifications.update(string notificationId, NotificationOptions options, function callback)` | | [clear](#method-clear) − `whale.notifications.clear(string notificationId, function callback)` | | [getAll](#method-getAll) − `whale.notifications.getAll(function callback)` | | [getPermissionLevel](#method-getPermissionLevel) − `whale.notifications.getPermissionLevel(function callback)` | | Events | | [onClosed](#event-onClosed) | | [onClicked](#event-onClicked) | | [onButtonClicked](#event-onButtonClicked) | | [onPermissionLevelChanged](#event-onPermissionLevelChanged) | | [onShowSettings](#event-onShowSettings) | ## Types ### TemplateType | Enum | |---| | `\"basic\"` icon, title, message, expandedMessage, up to two buttons `\"image\"` icon, title, message, expandedMessage, image, up to two buttons `\"list\"` icon, title, message, items, up to two buttons. Users on Mac OS X only see the first item. `\"progress\"` icon, title, message, progress, up to two buttons | ### PermissionLevel | Enum | |---| | `\"granted\"` User has elected to show notifications from the app or extension. This is the default at install time. `\"denied\"` User has elected not to show notifications from the app or extension. | ### NotificationOptions | properties | |---| | [TemplateType](/extensions/notifications#type-TemplateType) | (optional) type | Which type of notification to display. _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) iconUrl | A URL to the sender's avatar, app icon, or a thumbnail for image notifications. URLs can be a data URL, a blob URL, or a URL relative to a resource within this extension's .crx file _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) appIconMaskUrl | **Deprecated** since Chrome 59. The app icon mask is not visible for Mac OS X users. A URL to the app icon mask. URLs have the same restrictions as [iconUrl](/extensions/notifications#property-NotificationOptions-iconUrl). The app icon mask should be in alpha channel, as only the alpha channel of the image will be considered. | | string | (optional) title | Title of the notification (e.g. sender name for email). _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) message | Main notification content. _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) contextMessage | Since Chrome 31. Alternate notification content with a lower-weight font. | | integer | (optional) priority | Priority ranges from -2 to 2\\. -2 is lowest priority. 2 is highest. Zero is default. On platforms that don't support a notification center (Windows, Linux & Mac), -2 and -1 result in an error as notifications with those priorities will not be shown at all. | | double | (optional) eventTime | A timestamp associated with the notification, in milliseconds past the epoch (e.g. `Date.now() + n`). | | array of object | (optional) buttons | Text and icons for up to two notification action buttons. #### Properties of each object | string | title | | |---|---|---| | string | (optional) iconUrl | | | | string | (optional) imageUrl | **Deprecated** since Chrome 59. The image is not visible for Mac OS X users. A URL to the image thumbnail for image-type notifications. URLs have the same restrictions as [iconUrl](/extensions/notifications#property-NotificationOptions-iconUrl). | | array of object | (optional) items | Items for multi-item notifications. Users on Mac OS X only see the first item. #### Properties of each object | string | title | |---|---| Title of one item of a list notification. | | string | message | Additional details about this item. | | | integer | (optional) progress | Since Chrome 30. Current progress ranges from 0 to 100. | | boolean | (optional) isClickable | Since Chrome 32. Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification. | | boolean | (optional) requireInteraction | Since Chrome 50. Indicates that the notification should remain visible on screen until the user activates or dismisses the notification. This defaults to false. | ## Methods ### create `whale.notifications.create(string notificationId, [NotificationOptions](/extensions/notifications#type-NotificationOptions) options, function callback)` Creates and displays a notification. | Parameters | |---| | string | (optional) notificationId | Identifier of the notification. If not set or empty, an ID will automatically be generated. If it matches an existing notification, this method first clears that notification before proceeding with the create operation. The identifier may not be longer than 500 characters. The `notificationId` parameter is required before Chrome 42. | | [NotificationOptions](/extensions/notifications#type-NotificationOptions) | options | Contents of the notification. | | function | (optional) callback | Returns the notification id (either supplied or generated) that represents the created notification. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(string notificationId) {...};` | string | notificationId | | |---|---|---| | ### update `whale.notifications.update(string notificationId, [NotificationOptions](/extensions/notifications#type-NotificationOptions) options, function callback)` Updates an existing notification. | Parameters | |---| | string | notificationId | The id of the notification to be updated. This is returned by [notifications.create](/extensions/notifications#method-create) method. | | [NotificationOptions](/extensions/notifications#type-NotificationOptions) | options | Contents of the notification to update to. | | function | (optional) callback | Called to indicate whether a matching notification existed. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasUpdated) {...};` | boolean | wasUpdated | | |---|---|---| | ### clear `whale.notifications.clear(string notificationId, function callback)` Clears the specified notification. | Parameters | |---| | string | notificationId | The id of the notification to be cleared. This is returned by [notifications.create](/extensions/notifications#method-create) method. | | function | (optional) callback | Called to indicate whether a matching notification existed. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ### getAll `whale.notifications.getAll(function callback)` Since Chrome 29. Retrieves all the notifications. | Parameters | |---| | function | callback | Returns the set of notification_ids currently in the system. The _callback_ parameter should be a function that looks like this: `function(object notifications) {...};` | object | notifications | | |---|---|---| | ### getPermissionLevel `whale.notifications.getPermissionLevel(function callback)` Since Chrome 32. Retrieves whether the user has enabled notifications from this app or extension. | Parameters | |---| | function | callback | Returns the current permission level. The _callback_ parameter should be a function that looks like this: `function( [PermissionLevel](/extensions/notifications#type-PermissionLevel) level) {...};` | [PermissionLevel](/extensions/notifications#type-PermissionLevel) | level | | |---|---|---| | ## Events ### onClosed The notification closed, either by the system or by user action. #### addListener `whale.notifications.onClosed.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId, boolean byUser) {...};` | string | notificationId | | |---|---|---| | boolean | byUser | | | ### onClicked The user clicked in a non-button area of the notification. #### addListener `whale.notifications.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId) {...};` | string | notificationId | | |---|---|---| | ### onButtonClicked The user pressed a button in the notification. #### addListener `whale.notifications.onButtonClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId, integer buttonIndex) {...};` | string | notificationId | | |---|---|---| | integer | buttonIndex | | | ### onPermissionLevelChanged Since Chrome 32. The user changes the permission level. As of Chrome 47, only ChromeOS has UI that dispatches this event. #### addListener `whale.notifications.onPermissionLevelChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [PermissionLevel](/extensions/notifications#type-PermissionLevel) level) {...};` | [PermissionLevel](/extensions/notifications#type-PermissionLevel) | level | | |---|---|---| | ### onShowSettings Since Chrome 32. The user clicked on a link for the app's notification settings. As of Chrome 47, only ChromeOS has UI that dispatches this event. #### addListener `whale.notifications.onShowSettings.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-automation.html":{"url":"extensions-automation.html","title":"automation","keywords":"","body":"whale.automation Description: The whale.automation API allows developers to access the automation (accessibility) tree for the browser. The tree resembles the DOM tree, but only exposes the semantic structure of a page. It can be used to programmatically interact with a page by examining names, roles, and states, listening for events, and performing actions on nodes. Availability: Dev channel only. Learn more. Manifest: \"automation\": {...} ## Summary | Types | |---| | [EventType](#type-EventType) | | [RoleType](#type-RoleType) | | [StateType](#type-StateType) | | [Restriction](#type-Restriction) | | [Rect](#type-Rect) | | [FindParams](#type-FindParams) | | [SetDocumentSelectionParams](#type-SetDocumentSelectionParams) | | [AutomationEvent](#type-AutomationEvent) | | [TreeChange](#type-TreeChange) | | [AutomationNode](#type-AutomationNode) | | Methods | | [getTree](#method-getTree) − `whale.automation.getTree(integer tabId, function callback)` | | [getDesktop](#method-getDesktop) − `whale.automation.getDesktop(function callback)` | | [getFocus](#method-getFocus) − `whale.automation.getFocus(function callback)` | | [addTreeChangeObserver](#method-addTreeChangeObserver) − `whale.automation.addTreeChangeObserver(enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` filter, function observer)` | | [removeTreeChangeObserver](#method-removeTreeChangeObserver) − `whale.automation.removeTreeChangeObserver(function observer)` | | [setDocumentSelection](#method-setDocumentSelection) − `whale.automation.setDocumentSelection( SetDocumentSelectionParams params)` | ## Types ### EventType Possible events fired on an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"activedescendantchanged\"`, `\"alert\"`, `\"ariaAttributeChanged\"`, `\"autocorrectionOccured\"`, `\"blur\"`, `\"checkedStateChanged\"`, `\"childrenChanged\"`, `\"clicked\"`, `\"documentSelectionChanged\"`, `\"expandedChanged\"`, `\"focus\"`, `\"imageFrameUpdated\"`, `\"hide\"`, `\"hover\"`, `\"invalidStatusChanged\"`, `\"layoutComplete\"`, `\"liveRegionCreated\"`, `\"liveRegionChanged\"`, `\"loadComplete\"`, `\"locationChanged\"`, `\"mediaStartedPlaying\"`, `\"mediaStoppedPlaying\"`, `\"menuEnd\"`, `\"menuListItemSelected\"`, `\"menuListValueChanged\"`, `\"menuPopupEnd\"`, `\"menuPopupStart\"`, `\"menuStart\"`, `\"mouseCanceled\"`, `\"mouseDragged\"`, `\"mouseMoved\"`, `\"mousePressed\"`, `\"mouseReleased\"`, `\"rowCollapsed\"`, `\"rowCountChanged\"`, `\"rowExpanded\"`, `\"scrollPositionChanged\"`, `\"scrolledToAnchor\"`, `\"selectedChildrenChanged\"`, `\"selection\"`, `\"selectionAdd\"`, `\"selectionRemove\"`, `\"show\"`, `\"textChanged\"`, `\"textSelectionChanged\"`, `\"treeChanged\"`, or `\"valueChanged\"` | ### RoleType Describes the purpose of an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"abbr\"`, `\"alertDialog\"`, `\"alert\"`, `\"anchor\"`, `\"annotation\"`, `\"application\"`, `\"article\"`, `\"audio\"`, `\"banner\"`, `\"blockquote\"`, `\"button\"`, `\"buttonDropDown\"`, `\"canvas\"`, `\"caption\"`, `\"caret\"`, `\"cell\"`, `\"checkBox\"`, `\"client\"`, `\"colorWell\"`, `\"columnHeader\"`, `\"column\"`, `\"comboBox\"`, `\"complementary\"`, `\"contentInfo\"`, `\"date\"`, `\"dateTime\"`, `\"definition\"`, `\"descriptionListDetail\"`, `\"descriptionList\"`, `\"descriptionListTerm\"`, `\"desktop\"`, `\"details\"`, `\"dialog\"`, `\"directory\"`, `\"disclosureTriangle\"`, `\"document\"`, `\"embeddedObject\"`, `\"feed\"`, `\"figcaption\"`, `\"figure\"`, `\"footer\"`, `\"form\"`, `\"genericContainer\"`, `\"grid\"`, `\"group\"`, `\"heading\"`, `\"iframe\"`, `\"iframePresentational\"`, `\"ignored\"`, `\"imageMap\"`, `\"image\"`, `\"inlineTextBox\"`, `\"inputTime\"`, `\"labelText\"`, `\"legend\"`, `\"lineBreak\"`, `\"link\"`, `\"listBoxOption\"`, `\"listBox\"`, `\"listItem\"`, `\"listMarker\"`, `\"list\"`, `\"locationBar\"`, `\"log\"`, `\"main\"`, `\"mark\"`, `\"marquee\"`, `\"math\"`, `\"menuBar\"`, `\"menuButton\"`, `\"menuItem\"`, `\"menuItemCheckBox\"`, `\"menuItemRadio\"`, `\"menuListOption\"`, `\"menuListPopup\"`, `\"menu\"`, `\"meter\"`, `\"navigation\"`, `\"note\"`, `\"pane\"`, `\"paragraph\"`, `\"popUpButton\"`, `\"pre\"`, `\"presentational\"`, `\"progressIndicator\"`, `\"radioButton\"`, `\"radioGroup\"`, `\"region\"`, `\"rootWebArea\"`, `\"rowHeader\"`, `\"row\"`, `\"ruby\"`, `\"svgRoot\"`, `\"scrollBar\"`, `\"search\"`, `\"searchBox\"`, `\"slider\"`, `\"sliderThumb\"`, `\"spinButtonPart\"`, `\"spinButton\"`, `\"splitter\"`, `\"staticText\"`, `\"status\"`, `\"switch\"`, `\"tabList\"`, `\"tabPanel\"`, `\"tab\"`, `\"tableHeaderContainer\"`, `\"table\"`, `\"term\"`, `\"textField\"`, `\"time\"`, `\"timer\"`, `\"titleBar\"`, `\"toggleButton\"`, `\"toolbar\"`, `\"treeGrid\"`, `\"treeItem\"`, `\"tree\"`, `\"unknown\"`, `\"tooltip\"`, `\"video\"`, `\"webArea\"`, `\"webView\"`, or `\"window\"` | ### StateType Describes characteristics of an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"collapsed\"`, `\"default\"`, `\"editable\"`, `\"expanded\"`, `\"focusable\"`, `\"focused\"`, `\"haspopup\"`, `\"horizontal\"`, `\"hovered\"`, `\"invisible\"`, `\"linked\"`, `\"multiline\"`, `\"multiselectable\"`, `\"offscreen\"`, `\"protected\"`, `\"required\"`, `\"richlyEditable\"`, `\"selectable\"`, `\"selected\"`, `\"vertical\"`, or `\"visited\"` | ### Restriction The input restriction for a object -- even non-controls can be disabled. | Enum | |---| | `\"disabled\"`, or `\"readOnly\"` | ### Rect | properties | |---| | integer | left | | | integer | top | | | integer | width | | | integer | height | | ### FindParams | properties | |---| | [RoleType](/extensions/automation#type-RoleType) | (optional) role | | | object | (optional) state | A map of [automation.StateType](/extensions/automation#type-StateType) to boolean, indicating for each state whether it should be set or not. For example: `{ StateType.disabled: false }` would only match if `StateType.disabled` was _not_ present in the node's `state` object. | | object | (optional) attributes | A map of attribute name to expected value, for example `{ name: 'Root directory', checkbox_mixed: true }`. String attribute values may be specified as a regex, for example `{ name: /stralia$/` }. Unless specifying a regex, the expected value must be an exact match in type and value for the actual value. Thus, the type of expected value must be one of: * string * integer * float * boolean | ### SetDocumentSelectionParams | properties | |---| | AutomationNode | anchorObject | The node where the selection begins. | | integer | anchorOffset | The offset in the anchor node where the selection begins. | | AutomationNode | focusObject | The node where the selection ends. | | integer | focusOffset | The offset within the focus node where the selection ends. | ### AutomationEvent | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | target | The [automation.AutomationNode](/extensions/automation#type-AutomationNode) to which the event was targeted. | | [EventType](/extensions/automation#type-EventType) | type | The type of the event. | | string | eventFrom | The source of this event. | | integer | mouseX | | | integer | mouseY | | | function | stopPropagation | Stops this event from further processing except for any remaining listeners on [AutomationEvent.target](/extensions/automation#property-AutomationEvent-target). | ### TreeChange | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | target | The [automation.AutomationNode](/extensions/automation#type-AutomationNode) that changed. | | enum of `\"nodeCreated\"`, `\"subtreeCreated\"`, `\"nodeChanged\"`, `\"textChanged\"`, or `\"nodeRemoved\"` | type | The type of change. nodeCreated * This node was added to the tree and its parent is new as well, so it's just one node in a new subtree that was added. subtreeCreated * This node was added to the tree but its parent was already in the tree, so it's possibly the root of a new subtree - it does not mean that it necessarily has children. nodeChanged * This node changed. textChanged * This node's text (name) changed. nodeRemoved * This node was removed. | ### AutomationNode | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) root | The root node of the tree containing this AutomationNode. | | boolean | isRootNode | Whether this AutomationNode is a root node. | | [RoleType](/extensions/automation#type-RoleType) | (optional) role | The role of this node. | | object | (optional) state | The [automation.StateType](/extensions/automation#type-StateType)s describing this node. | | [Rect](/extensions/automation#type-Rect) | (optional) location | The rendered location (as a bounding box) of this node in global screen coordinates. | | function | boundsForRange | Computes the bounding box of a subrange of this node in global screen coordinates. Returns the same as |location| if range information is not available. The start and end indices are zero-based offsets into the node's \"name\" string attribute. Returns [Rect](/extensions/automation#type-Rect). | Parameters | |---| | integer | startIndex | | | integer | endIndex | | | | string | (optional) description | The purpose of the node, other than the role, if any. | | string | (optional) placeholder | The placeholder for this text field, if any. | | string | (optional) roleDescription | The role description for this node. | | string | (optional) name | The accessible name for this node, via the [Accessible Name Calculation](http://www.w3.org/TR/wai-aria/roles#namecalculation) process. | | enum of `\"uninitialized\"`, `\"attribute\"`, `\"attributeExplicitlyEmpty\"`, `\"contents\"`, `\"placeholder\"`, `\"relatedElement\"`, or `\"value\"` | (optional) nameFrom | The source of the name. | | string | (optional) value | The value for this node: for example the `value` attribute of an ` element.` | | string | (optional) htmlTag | The HTML tag for this element, if this node is an HTML element. | | integer | (optional) hierarchicalLevel | The level of a heading or tree item. | | array of integer | (optional) wordStarts | The start and end index of each word in an inline text box. | | array of integer | (optional) wordEnds | | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) controls | The nodes, if any, which this node is specified to control via [`aria-controls`](http://www.w3.org/TR/wai-aria/states_and_properties#aria-controls). | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) describedBy | The nodes, if any, which form a description for this node. | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) flowTo | The nodes, if any, which may optionally be navigated to after this one. See [`aria-flowto`](http://www.w3.org/TR/wai-aria/states_and_properties#aria-flowto). | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) labelledBy | The nodes, if any, which form a label for this element. Generally, the text from these elements will also be exposed as the element's accessible name, via the [automation.AutomationNode.name](/extensions/automation#property-AutomationNode-name) attribute. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) activeDescendant | The node referred to by `aria-activedescendant`, where applicable | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) inPageLinkTarget | The target of an in-page link. | | array of object | (optional) customActions | An array of custom actions. #### Properties of each object | integer | id | | |---|---|---| | string | description | | | | string | (optional) url | The URL that this link will navigate to. | | string | (optional) docUrl | The URL of this document. | | string | (optional) docTitle | The title of this document. | | boolean | (optional) docLoaded | Whether this document has finished loading. | | double | (optional) docLoadingProgress | The proportion (out of 1.0) that this doc has completed loading. | | integer | (optional) scrollX | Scrollable container attributes. | | integer | (optional) scrollXMin | | | integer | (optional) scrollXMax | | | integer | (optional) scrollY | | | integer | (optional) scrollYMin | | | integer | (optional) scrollYMax | | | integer | (optional) textSelStart | The character index of the start of the selection within this editable text element; -1 if no selection. | | integer | (optional) textSelEnd | The character index of the end of the selection within this editable text element; -1 if no selection. | | string | (optional) textInputType | The input type, like email or number. | | array of integer | lineBreaks | An array of indexes of the break between lines in editable text. | | array of integer | markerStarts | An array of indexes of the start position of each text marker. | | array of integer | markerEnds | An array of indexes of the end position of each text marker. | | array of integer | markerTypes | An array of numerical types indicating the type of each text marker, such as a spelling error. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) anchorObject | The anchor node of the tree selection, if any. | | integer | (optional) anchorOffset | The anchor offset of the tree selection, if any. | | string | (optional) anchorAffinity | The affinity of the tree selection anchor, if any. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) focusObject | The focus node of the tree selection, if any. | | integer | (optional) focusOffset | The focus offset of the tree selection, if any. | | string | (optional) focusAffinity | The affinity of the tree selection focus, if any. | | double | (optional) valueForRange | The current value for this range. | | double | (optional) minValueForRange | The minimum possible value for this range. | | double | (optional) maxValueForRange | The maximum possible value for this range. | | integer | (optional) posInSet | The 1-based index of an item in a set. | | integer | (optional) setSize | The number of items in a set; | | integer | (optional) tableRowCount | The number of rows in this table as specified in the DOM. | | integer | (optional) ariaRowCount | The number of rows in this table as specified by the page author. | | integer | (optional) tableColumnCount | The number of columns in this table as specified in the DOM. | | integer | (optional) ariaColumnCount | The number of columns in this table as specified by the page author. | | integer | (optional) tableCellColumnIndex | The zero-based index of the column that this cell is in as specified in the DOM. | | integer | (optional) ariaCellColumnIndex | The ARIA column index as specified by the page author. | | integer | (optional) tableCellColumnSpan | The number of columns that this cell spans (default is 1). | | integer | (optional) tableCellRowIndex | The zero-based index of the row that this cell is in as specified in the DOM. | | integer | (optional) ariaCellRowIndex | The ARIA row index as specified by the page author. | | integer | (optional) tableCellRowSpan | The number of rows that this cell spans (default is 1). | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) tableColumnHeader | The corresponding column header for this cell. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) tableRowHeader | The corresponding row header for this cell. | | string | (optional) liveStatus | The type of region if this is the root of a live region. Possible values are 'polite' and 'assertive'. | | string | (optional) liveRelevant | The value of aria-relevant for a live region. | | boolean | (optional) liveAtomic | The value of aria-atomic for a live region. | | boolean | (optional) busy | The value of aria-busy for a live region or any other element. | | string | (optional) containerLiveStatus | The type of live region if this node is inside a live region. | | string | (optional) containerLiveRelevant | The value of aria-relevant if this node is inside a live region. | | boolean | (optional) containerLiveAtomic | The value of aria-atomic if this node is inside a live region. | | boolean | (optional) containerLiveBusy | The value of aria-busy if this node is inside a live region. | | object | (optional) htmlAttributes | A map containing all HTML attributes and their values | | string | (optional) inputType | The input type of a text field, such as \"text\" or \"email\". | | string | (optional) accessKey | The key that activates this widget. | | string | (optional) ariaInvalidValue | The value of the aria-invalid attribute, indicating the error type. | | string | (optional) display | The CSS display attribute for this node, if applicable. | | string | (optional) imageDataUrl | A data url with the contents of this object's image or thumbnail. | | string | (optional) language | The language code for this subtree. | | string | (optional) restriction | Input restriction, if any, such as readonly or disabled: undefined - enabled control or other object that is not disabled Restriction.DISABLED - disallows input in itself + any descendants Restriction.READONLY - allow focus/selection but not input | | string | (optional) checked | Tri-state describing checkbox or radio button: 'false' | 'true' | 'mixed' | | integer | (optional) color | The RGBA foreground color of this subtree, as an integer. | | integer | (optional) backgroundColor | The RGBA background color of this subtree, as an integer. | | integer | (optional) colorValue | The RGBA color of an input element whose value is a color. | | boolean | bold | Indicates node text is bold. | | boolean | italic | Indicates node text is italic. | | boolean | underline | Indicates node text is underline. | | boolean | lineThrough | Indicates node text is line through. | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | children | Walking the tree. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) parent | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) firstChild | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) lastChild | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) previousSibling | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) nextSibling | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) nextOnLine | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) previousOnLine | | | integer | (optional) indexInParent | The index of this node in its parent node's list of children. If this is the root node, this will be undefined. | | function | doDefault | Does the default action based on this node's role. This is generally the same action that would result from clicking the node such as expanding a treeitem, toggling a checkbox, selecting a radiobutton, or activating a button. | | function | focus | Places focus on this node. | | function | getImageData | Request a data url for the contents of an image, optionally resized. Pass zero for maxWidth and/or maxHeight for the original size. | Parameters | |---| | integer | maxWidth | | | integer | maxHeight | | | | function | hitTest | Does a hit test of the given global screen coordinates, and fires eventToFire on the resulting object. | Parameters | |---| | integer | x | | | integer | y | | | [EventType](/extensions/automation#type-EventType) | eventToFire | | | | function | makeVisible | Scrolls this node to make it visible. | | function | performCustomAction | Performs custom action. | Parameters | |---| | integer | customActionId | | | | function | setSelection | Sets selection within a text field. | Parameters | |---| | integer | startIndex | | | integer | endIndex | | | | function | setSequentialFocusNavigationStartingPoint | Clears focus and sets this node as the starting point for the next time the user presses Tab or Shift+Tab. | | function | showContextMenu | Show the context menu for this element, as if the user right-clicked. | | function | resumeMedia | Resume playing any media within this tree. | | function | startDuckingMedia | Start ducking any media within this tree. | | function | stopDuckingMedia | Stop ducking any media within this tree. | | function | suspendMedia | Suspend any media playing within this tree. | | function | scrollBackward | Scrolls this scrollable container backward. | | function | scrollForward | Scrolls this scrollable container forward. | | function | scrollUp | Scrolls this scrollable container up. | | function | scrollDown | Scrolls this scrollable container down. | | function | scrollLeft | Scrolls this scrollable container left. | | function | scrollRight | Scrolls this scrollable container right. | | function | addEventListener | Adds a listener for the given event type and event phase. | Parameters | |---| | [EventType](/extensions/automation#type-EventType) | eventType | | | function | listener | A listener for events on an `AutomationNode`. | Parameters | |---| | [AutomationEvent](/extensions/automation#type-AutomationEvent) | event | | | | boolean | capture | | | | function | removeEventListener | Removes a listener for the given event type and event phase. | Parameters | |---| | [EventType](/extensions/automation#type-EventType) | eventType | | | function | listener | A listener for events on an `AutomationNode`. | Parameters | |---| | [AutomationEvent](/extensions/automation#type-AutomationEvent) | event | | | | boolean | capture | | | | function | domQuerySelector | Gets the first node in this node's subtree which matches the given CSS selector and is within the same DOM context. If this node doesn't correspond directly with an HTML node in the DOM, querySelector will be run on this node's nearest HTML node ancestor. Note that this may result in the query returning a node which is not a descendant of this node. If the selector matches a node which doesn't directly correspond to an automation node (for example an element within an ARIA widget, where the ARIA widget forms one node of the automation tree, or an element which is hidden from accessibility via hiding it using CSS or using aria-hidden), this will return the nearest ancestor which does correspond to an automation node. | Parameters | |---| | string | selector | | | | function | find | Finds the first AutomationNode in this node's subtree which matches the given search parameters. Returns [AutomationNode](/extensions/automation#type-AutomationNode). | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | | function | findAll | Finds all the AutomationNodes in this node's subtree which matches the given search parameters. Returns array of [AutomationNode](/extensions/automation#type-AutomationNode). | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | | function | matches | Returns whether this node matches the given [automation.FindParams](/extensions/automation#type-FindParams). Returns boolean. | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | ## Methods ### getTree `whale.automation.getTree(integer tabId, function callback)` Get the automation tree for the tab with the given tabId, or the current tab if no tabID is given, enabling automation if necessary. Returns a tree with a placeholder root node; listen for the \"loadComplete\" event to get a notification that the tree has fully loaded (the previous root node reference will stop working at or before this point). | Parameters | |---| | integer | (optional) tabId | | | function | (optional) callback | Called when the `AutomationNode` for the page is available. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) rootNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | rootNode | | |---|---|---| | ### getDesktop `whale.automation.getDesktop(function callback)` Get the automation tree for the whole desktop which consists of all on screen views. Note this API is currently only supported on Chrome OS. | Parameters | |---| | function | callback | Called when the `AutomationNode` for the page is available. The _callback_ parameter should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) rootNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | rootNode | | |---|---|---| | ### getFocus `whale.automation.getFocus(function callback)` Get the automation node that currently has focus, globally. Will return null if none of the nodes in any loaded trees have focus. | Parameters | |---| | function | callback | Called with the `AutomationNode` that currently has focus. The _callback_ parameter should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) focusedNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | focusedNode | | |---|---|---| | ### addTreeChangeObserver `whale.automation.addTreeChangeObserver(enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` filter, function observer)` Add a tree change observer. Tree change observers are static/global, they listen to changes across all trees. Pass a filter to determine what specific tree changes to listen to, and note that listnening to all tree changes can be expensive. | Parameters | |---| | enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` | filter | | | function | observer | A listener for changes on the `AutomationNode` tree. The _observer_ parameter should be a function that looks like this: `function( [TreeChange](/extensions/automation#type-TreeChange) treeChange) {...};` | [TreeChange](/extensions/automation#type-TreeChange) | treeChange | | |---|---|---| | ### removeTreeChangeObserver `whale.automation.removeTreeChangeObserver(function observer)` Remove a tree change observer. | Parameters | |---| | function | observer | A listener for changes on the `AutomationNode` tree. The _observer_ parameter should be a function that looks like this: `function( [TreeChange](/extensions/automation#type-TreeChange) treeChange) {...};` | [TreeChange](/extensions/automation#type-TreeChange) | treeChange | | |---|---|---| | ### setDocumentSelection `whale.automation.setDocumentSelection( [SetDocumentSelectionParams](/extensions/automation#type-SetDocumentSelectionParams) params)` Sets the selection in a tree. This creates a selection in a single tree (anchorObject and focusObject must have the same root). Everything in the tree between the two node/offset pairs gets included in the selection. The anchor is where the user started the selection, while the focus is the point at which the selection gets extended e.g. when dragging with a mouse or using the keyboard. For nodes with the role staticText, the offset gives the character offset within the value where the selection starts or ends, respectively. | Parameters | |---| | [SetDocumentSelectionParams](/extensions/automation#type-SetDocumentSelectionParams) | params | | "},"extensions-omnibox.html":{"url":"extensions-omnibox.html","title":"omnibox","keywords":"","body":"whale.omnibox Description: The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox. Availability: Since Chrome 20. Manifest: \"omnibox\": {...} ![A screenshot showing suggestions related to the keyword 'Chromium Search'](/static/images/omnibox.png) When the user enters your extension's keyword, the user starts interacting solely with your extension. Each keystroke is sent to your extension, and you can provide suggestions in response. The suggestions can be richly formatted in a variety of ways. When the user accepts a suggestion, your extension is notified and can take action. ## Manifest You must include an `omnibox` `keyword` field in the [manifest](manifest) to use the omnibox API. You should also specify a 16x16-pixel icon, which will be displayed in the address bar when suggesting that users enter keyword mode. For example: { \"name\": \"Aaron's omnibox extension\", \"version\": \"1.0\", **\"omnibox\": { \"keyword\" : \"aaron\" },** **\"icons\": {** **\"16\": \"16-full-color.png\"** **},** \"background\": { \"persistent\": false, \"scripts\": [\"background.js\"] } } **Note:** Chrome automatically creates a grayscale version of your 16x16-pixel icon. You should provide a full-color version so that it can also be used in other situations that require color. For example, the [context menus API](contextMenus) also uses a 16x16-pixel icon, but it is displayed in color. ## Examples You can find samples of this API on the [sample page](samples#search:omnibox). ## Summary | Types | |---| | [DescriptionStyleType](#type-DescriptionStyleType) | | [OnInputEnteredDisposition](#type-OnInputEnteredDisposition) | | [SuggestResult](#type-SuggestResult) | | Methods | | [setDefaultSuggestion](#method-setDefaultSuggestion) − `whale.omnibox.setDefaultSuggestion(object suggestion)` | | Events | | [onInputStarted](#event-onInputStarted) | | [onInputChanged](#event-onInputChanged) | | [onInputEntered](#event-onInputEntered) | | [onInputCancelled](#event-onInputCancelled) | | [onDeleteSuggestion](#event-onDeleteSuggestion) | ## Types ### DescriptionStyleType The style type. | Enum | |---| | `\"url\"`, `\"match\"`, or `\"dim\"` | ### OnInputEnteredDisposition The window disposition for the omnibox query. This is the recommended context to display results. For example, if the omnibox command is to navigate to a certain URL, a disposition of 'newForegroundTab' means the navigation should take place in a new selected tab. | Enum | |---| | `\"currentTab\"`, `\"newForegroundTab\"`, or `\"newBackgroundTab\"` | ### SuggestResult A suggest result. | properties | |---| | string | content | The text that is put into the URL bar, and that is sent to the extension when the user chooses this entry. | | string | description | The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match. You must escape the five predefined entities to display them as text: stackoverflow.com/a/1091953/89484 | | boolean | (optional) deletable | Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). Whether the suggest result can be deleted by the user. | ## Methods ### setDefaultSuggestion `whale.omnibox.setDefaultSuggestion(object suggestion)` Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar. | Parameters | |---| | object | suggestion | A partial SuggestResult object, without the 'content' parameter. | string | description | |---|---| The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match. | | ## Events ### onInputStarted User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events. #### addListener `whale.omnibox.onInputStarted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onInputChanged User has changed what is typed into the omnibox. #### addListener `whale.omnibox.onInputChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text, function suggest) {...};` | string | text | | |---|---|---| | function | suggest | A callback passed to the onInputChanged event used for sending suggestions back to the browser. The _suggest_ parameter should be a function that looks like this: `function(array of [SuggestResult](/extensions/omnibox#type-SuggestResult) suggestResults) {...};` | array of [SuggestResult](/extensions/omnibox#type-SuggestResult) | suggestResults | |---|---| Array of suggest results | | | ### onInputEntered User has accepted what is typed into the omnibox. #### addListener `whale.omnibox.onInputEntered.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text, [OnInputEnteredDisposition](/extensions/omnibox#type-OnInputEnteredDisposition) disposition) {...};` | string | text | | |---|---|---| | [OnInputEnteredDisposition](/extensions/omnibox#type-OnInputEnteredDisposition) | disposition | Since Chrome 28. | | ### onInputCancelled User has ended the keyword input session without accepting the input. #### addListener `whale.omnibox.onInputCancelled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onDeleteSuggestion Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). User has deleted a suggested result. #### addListener `whale.omnibox.onDeleteSuggestion.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text) {...};` | string | text | |---|---| Text of the deleted suggestion. | | "},"extensions-bookmarks.html":{"url":"extensions-bookmarks.html","title":"bookmarks","keywords":"","body":"whale.bookmarks Description: Use the whale.bookmarks API to create, organize, and otherwise manipulate bookmarks. Also see Override Pages, which you can use to create a custom Bookmark Manager page. Availability: Since Chrome 20. Permissions: \"bookmarks\" ![Clicking the star adds a bookmark](/static/images/bookmarks.png) ## Manifest You must declare the \"bookmarks\" permission in the [extension manifest](manifest) to use the bookmarks API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"bookmarks\" ]**, ... } ## Objects and properties Bookmarks are organized in a tree, where each node in the tree is either a bookmark or a folder (sometimes called a _group_). Each node in the tree is represented by a [bookmarks.BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) object. `BookmarkTreeNode` properties are used throughout the `whale.bookmarks` API. For example, when you call [bookmarks.create](/extensions/bookmarks#method-create), you pass in the new node's parent (`parentId`), and, optionally, the node's `index`, `title`, and `url` properties. See [bookmarks.BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) for information about the properties a node can have. **Note:** You cannot use this API to add or remove entries in the root folder. You also cannot rename, move, or remove the special \"Bookmarks Bar\" and \"Other Bookmarks\" folders. ## Examples The following code creates a folder with the title \"Extension bookmarks\". The first argument to `create()` specifies properties for the new folder. The second argument defines a function to be executed after the folder is created. whale.bookmarks.create({'parentId': bookmarkBar.id, 'title': 'Extension bookmarks'}, function(newFolder) { console.log(\"added folder: \" + newFolder.title); }); The next snippet creates a bookmark pointing to the developer documentation for extensions. Since nothing bad will happen if creating the bookmark fails, this code doesn't bother to define a callback function. whale.bookmarks.create({'parentId': extensionsFolderId, 'title': 'Extensions doc', 'url': 'http://code.google.com/chrome/extensions'}); For an example of using this API, see the [basic bookmarks sample](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/bookmarks/basic/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [BookmarkTreeNodeUnmodifiable](#type-BookmarkTreeNodeUnmodifiable) | | [BookmarkTreeNode](#type-BookmarkTreeNode) | | Properties | | [MAX_WRITE_OPERATIONS_PER_HOUR](#property-MAX_WRITE_OPERATIONS_PER_HOUR) | | [MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE](#property-MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE) | | Methods | | [get](#method-get) − `whale.bookmarks.get(string or array of string idOrIdList, function callback)` | | [getChildren](#method-getChildren) − `whale.bookmarks.getChildren(string id, function callback)` | | [getRecent](#method-getRecent) − `whale.bookmarks.getRecent(integer numberOfItems, function callback)` | | [getTree](#method-getTree) − `whale.bookmarks.getTree(function callback)` | | [getSubTree](#method-getSubTree) − `whale.bookmarks.getSubTree(string id, function callback)` | | [search](#method-search) − `whale.bookmarks.search(string or object query, function callback)` | | [create](#method-create) − `whale.bookmarks.create(object bookmark, function callback)` | | [move](#method-move) − `whale.bookmarks.move(string id, object destination, function callback)` | | [update](#method-update) − `whale.bookmarks.update(string id, object changes, function callback)` | | [remove](#method-remove) − `whale.bookmarks.remove(string id, function callback)` | | [removeTree](#method-removeTree) − `whale.bookmarks.removeTree(string id, function callback)` | | Events | | [onCreated](#event-onCreated) | | [onRemoved](#event-onRemoved) | | [onChanged](#event-onChanged) | | [onMoved](#event-onMoved) | | [onChildrenReordered](#event-onChildrenReordered) | | [onImportBegan](#event-onImportBegan) | | [onImportEnded](#event-onImportEnded) | ## Types ### BookmarkTreeNodeUnmodifiable Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator. Omitted if the node can be modified by the user and the extension (default). | Enum | |---| | `\"managed\"` | ### BookmarkTreeNode A node (either a bookmark or a folder) in the bookmark tree. Child nodes are ordered within their parent folder. | properties | |---| | string | id | The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted. | | string | (optional) parentId | The `id` of the parent folder. Omitted for the root node. | | integer | (optional) index | The 0-based position of this node within its parent folder. | | string | (optional) url | The URL navigated to when a user clicks the bookmark. Omitted for folders. | | string | title | The text displayed for the node. | | double | (optional) dateAdded | When this node was created, in milliseconds since the epoch (`new Date(dateAdded)`). | | double | (optional) dateGroupModified | When the contents of this folder last changed, in milliseconds since the epoch. | | [BookmarkTreeNodeUnmodifiable](/extensions/bookmarks#type-BookmarkTreeNodeUnmodifiable) | (optional) unmodifiable | Since Chrome 37. Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default). | | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | (optional) children | An ordered list of children of this node. | ## Properties | `1,000,000` | `whale.bookmarks.MAX_WRITE_OPERATIONS_PER_HOUR` | |---|---| **Deprecated** since Chrome 38. Bookmark write operations are no longer limited by Chrome. | | `1,000,000` | `whale.bookmarks.MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE` | **Deprecated** since Chrome 38. Bookmark write operations are no longer limited by Chrome. | ## Methods ### get `whale.bookmarks.get(string or array of string idOrIdList, function callback)` Retrieves the specified BookmarkTreeNode(s). | Parameters | |---| | string or array of string | idOrIdList | A single string-valued id, or an array of string-valued ids | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getChildren `whale.bookmarks.getChildren(string id, function callback)` Retrieves the children of the specified BookmarkTreeNode id. | Parameters | |---| | string | id | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getRecent `whale.bookmarks.getRecent(integer numberOfItems, function callback)` Retrieves the recently added bookmarks. | Parameters | |---| | integer | numberOfItems | The maximum number of items to return. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getTree `whale.bookmarks.getTree(function callback)` Retrieves the entire Bookmarks hierarchy. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getSubTree `whale.bookmarks.getSubTree(string id, function callback)` Retrieves part of the Bookmarks hierarchy, starting at the specified node. | Parameters | |---| | string | id | The ID of the root of the subtree to retrieve. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### search `whale.bookmarks.search(string or object query, function callback)` Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties. | Parameters | |---| | string or object | query | Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties `query`, `url`, and `title` may be specified and bookmarks matching all specified properties will be produced. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### create `whale.bookmarks.create(object bookmark, function callback)` Creates a bookmark or folder under the specified parentId. If url is NULL or missing, it will be a folder. | Parameters | |---| | object | bookmark | | string | (optional) parentId | |---|---| Defaults to the Other Bookmarks folder. | | integer | (optional) index | | | string | (optional) title | | | string | (optional) url | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### move `whale.bookmarks.move(string id, object destination, function callback)` Moves the specified BookmarkTreeNode to the provided location. | Parameters | |---| | string | id | | | object | destination | | string | (optional) parentId | | |---|---|---| | integer | (optional) index | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### update `whale.bookmarks.update(string id, object changes, function callback)` Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. **Note:** Currently, only 'title' and 'url' are supported. | Parameters | |---| | string | id | | | object | changes | | string | (optional) title | | |---|---|---| | string | (optional) url | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### remove `whale.bookmarks.remove(string id, function callback)` Removes a bookmark or an empty bookmark folder. | Parameters | |---| | string | id | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeTree `whale.bookmarks.removeTree(string id, function callback)` Recursively removes a bookmark folder. | Parameters | |---| | string | id | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onCreated Fired when a bookmark or folder is created. #### addListener `whale.bookmarks.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) bookmark) {...};` | string | id | | |---|---|---| | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | bookmark | | | ### onRemoved Fired when a bookmark or folder is removed. When a folder is removed recursively, a single notification is fired for the folder, and none for its contents. #### addListener `whale.bookmarks.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object removeInfo) {...};` | string | id | | |---|---|---| | object | removeInfo | | string | parentId | | |---|---|---| | integer | index | | | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | node | Since Chrome 48. | | | ### onChanged Fired when a bookmark or folder changes. **Note:** Currently, only title and url changes trigger this. #### addListener `whale.bookmarks.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object changeInfo) {...};` | string | id | | |---|---|---| | object | changeInfo | | string | title | | |---|---|---| | string | (optional) url | | | | ### onMoved Fired when a bookmark or folder is moved to a different parent folder. #### addListener `whale.bookmarks.onMoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object moveInfo) {...};` | string | id | | |---|---|---| | object | moveInfo | | string | parentId | | |---|---|---| | integer | index | | | string | oldParentId | | | integer | oldIndex | | | | ### onChildrenReordered Fired when the children of a folder have changed their order due to the order being sorted in the UI. This is not called as a result of a move(). #### addListener `whale.bookmarks.onChildrenReordered.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object reorderInfo) {...};` | string | id | | |---|---|---| | object | reorderInfo | | array of string | childIds | | |---|---|---| | | ### onImportBegan Fired when a bookmark import session is begun. Expensive observers should ignore onCreated updates until onImportEnded is fired. Observers should still handle other notifications immediately. #### addListener `whale.bookmarks.onImportBegan.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onImportEnded Fired when a bookmark import session is ended. #### addListener `whale.bookmarks.onImportEnded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-override.html":{"url":"extensions-override.html","title":"override","keywords":"","body":"Override Pages #pics { margin:2em 1em 1.5em; } #pics td { text-align:center; width:50%!important; border:none; padding:0 1em; font-size:90%; } #pics img { width:188; height:246; border:none; } Override pages are a way to substitute an HTML file from your extension for a page that Google Chrome normally provides. In addition to HTML, an override page usually has CSS and JavaScript code. An extension can replace any one of the following pages: Bookmark Manager: The page that appears when the user chooses the Bookmark Manager menu item from the Chrome menu or, on Mac, the Bookmark Manager item from the Bookmarks menu. You can also get to this page by entering the URL chrome://bookmarks. History: The page that appears when the user chooses the History menu item from the Chrome menu or, on Mac, the Show Full History item from the History menu. You can also get to this page by entering the URL chrome://history. New Tab: The page that appears when the user creates a new tab or window. You can also get to this page by entering the URL chrome://newtab. Note: A single extension can override only one page. For example, an extension can't override both the Bookmark Manager and History pages. Incognito windows are treated specially. New Tab pages cannot be overridden in incognito windows. Other override pages work in incognito windows as long as the incognito manifest property is set to \"spanning\" (which is the default value). See Saving data and incognito mode in the Overview for more details on how you should treat incognito windows. The following screenshots show the default New Tab page next to a custom New Tab page. The default New Tab page An alternative New Tab page Manifest Register an override page in the extension manifest like this: { \"name\": \"My extension\", ... **\"chrome_url_overrides\" : { \"_pageToOverride_\": \"_myPage.html_\" }**, ... } For _pageToOverride_, substitute one of the following: bookmarks history newtab Tips For an effective override page, follow these guidelines: Make your page quick and small. Users expect built-in browser pages to open instantly. Avoid doing things that might take a long time. For example, avoid synchronous fetches of network or database resources. Include a title in your page. Otherwise people might see the URL of the page, which could be confusing. Here's an example of specifying the title: New Tab Don't rely on the page having the keyboard focus. The address bar always gets the focus first when the user creates a new tab. Don't try to emulate the default New Tab page. The APIs necessary to create a slightly modified version of the default New Tab page — with top pages, recently closed pages, tips, a theme background image, and so on — don't exist yet. Until they do, you're better off trying to make something completely different. Examples See the override samples. Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-browser-action.html":{"url":"extensions-browser-action.html","title":"browser-action","keywords":"","body":"whale.browserAction Description: Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup. Availability: Since Chrome 19. Manifest: \"browser_action\": {...} In the following figure, the multicolored square to the right of the address bar is the icon for a browser action. A popup is below the icon. ![](/static/images/browser-action.png) If you want to create an icon that isn't always visible, use a [page action](pageAction) instead of a browser action. ## Manifest Register your browser action in the [extension manifest](manifest) like this: { \"name\": \"My extension\", ... **\"browser_action\": { \"default_icon\": { _// optional_ \"16\": \"images/icon16.png\", _// optional_ \"24\": \"images/icon24.png\", _// optional_ \"32\": \"images/icon32.png\" _// optional_ }, \"default_title\": \"Google Mail\", _// optional; shown in tooltip_ \"default_popup\": \"popup.html\" _// optional_ }**, ... } You can provide any size icon to be used in Chrome, and Chrome will select the closest one and scale it to the appropriate size to fill the 16-dip space. However, if the exact size isn't provided, this scaling can cause the icon to lose detail or look fuzzy. Since devices with less-common scale factors like 1.5x or 1.2x are becoming more common, you are encouraged to provide multiple sizes for your icons. This also ensures that if the icon display size is ever changed, you don't need to do any more work to provide different icons! The old syntax for registering the default icon is still supported: { \"name\": \"My extension\", ... **\"browser_action\": { ... \"default_icon\": \"images/icon32.png\" _// optional_ _// equivalent to \"default_icon\": { \"32\": \"images/icon32.png\" }_ }**, ... } ## Parts of the UI A browser action can have an [icon](#icon), a [tooltip](#tooltip), a [badge](#badge), and a [popup](#popups). ### Icon The browser action icons in Chrome are 16 dips (device-independent pixels) wide and high. Larger icons are resized to fit, but for best results, use a 16-dip square icon. You can set the icon in two ways: using a static image or using the HTML5 [canvas element](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html). Using static images is easier for simple applications, but you can create more dynamic UIs — such as smooth animation — using the canvas element. Static images can be in any format WebKit can display, including BMP, GIF, ICO, JPEG, or PNG. For unpacked extensions, images must be in the PNG format. To set the icon, use the **default_icon** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setIcon](/extensions/browserAction#method-setIcon) method. To properly display icon when screen pixel density (ratio `size_in_pixel / size_in_dip`) is different than 1, the icon can be defined as set of images with different sizes. The actual image to display will be selected from the set to best fit the pixel size of 16 dip. The icon set can contain any size icon specification, and Chrome will select the most appropriate one. ### Tooltip To set the tooltip, use the **default_title** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setTitle](/extensions/browserAction#method-setTitle) method. You can specify locale-specific strings for the **default_title** field; see [Internationalization](i18n) for details. ### Badge Browser actions can optionally display a _badge_ — a bit of text that is layered over the icon. Badges make it easy to update the browser action to display a small amount of information about the state of the extension. Because the badge has limited space, it should have 4 characters or less. Set the text and color of the badge using [browserAction.setBadgeText](/extensions/browserAction#method-setBadgeText) and [browserAction.setBadgeBackgroundColor](/extensions/browserAction#method-setBadgeBackgroundColor), respectively. ### Popup If a browser action has a popup, the popup appears when the user clicks the icon. The popup can contain any HTML contents that you like, and it's automatically sized to fit its contents. To add a popup to your browser action, create an HTML file with the popup's contents. Specify the HTML file in the **default_popup** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setPopup](/extensions/browserAction#method-setPopup) method. ## Tips For the best visual impact, follow these guidelines: * **Do** use browser actions for features that make sense on most pages. * **Don't** use browser actions for features that make sense for only a few pages. Use [page actions](pageAction) instead. * **Do** use big, colorful icons that make the most of the 16x16-dip space. Browser action icons should seem a little bigger and heavier than page action icons. * **Don't** attempt to mimic Google Chrome's monochrome menu icon. That doesn't work well with themes, and anyway, extensions should stand out a little. * **Do** use alpha transparency to add soft edges to your icon. Because many people use themes, your icon should look nice on a variety of background colors. * **Don't** constantly animate your icon. That's just annoying. ## Examples You can find simple examples of using browser actions in the [examples/api/browserAction](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/browserAction/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [ColorArray](#type-ColorArray) | | [ImageDataType](#type-ImageDataType) | | Methods | | [setTitle](#method-setTitle) − `whale.browserAction.setTitle(object details)` | | [getTitle](#method-getTitle) − `whale.browserAction.getTitle(object details, function callback)` | | [setIcon](#method-setIcon) − `whale.browserAction.setIcon(object details, function callback)` | | [setPopup](#method-setPopup) − `whale.browserAction.setPopup(object details)` | | [getPopup](#method-getPopup) − `whale.browserAction.getPopup(object details, function callback)` | | [setBadgeText](#method-setBadgeText) − `whale.browserAction.setBadgeText(object details)` | | [getBadgeText](#method-getBadgeText) − `whale.browserAction.getBadgeText(object details, function callback)` | | [setBadgeBackgroundColor](#method-setBadgeBackgroundColor) − `whale.browserAction.setBadgeBackgroundColor(object details)` | | [getBadgeBackgroundColor](#method-getBadgeBackgroundColor) − `whale.browserAction.getBadgeBackgroundColor(object details, function callback)` | | [enable](#method-enable) − `whale.browserAction.enable(integer tabId)` | | [disable](#method-disable) − `whale.browserAction.disable(integer tabId)` | | Events | | [onClicked](#event-onClicked) | ## Types ### ColorArray array of integer ### ImageDataType Since Chrome 23. Pixel data for an image. Must be an ImageData object (for example, from a `canvas` element). ## Methods ### setTitle `whale.browserAction.setTitle(object details)` Sets the title of the browser action. This shows up in the tooltip. | Parameters | |---| | object | details | | string | title | |---|---| The string the browser action should display when moused over. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getTitle `whale.browserAction.getTitle(object details, function callback)` Gets the title of the browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the title from. If no tab is specified, the non-tab-specific title is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setIcon `whale.browserAction.setIcon(object details, function callback)` Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the **path** or the **imageData** property must be specified. | Parameters | |---| | object | details | | [ImageDataType](/extensions/browserAction#type-ImageDataType) or object | (optional) imageData | |---|---| Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}' | | string or object | (optional) path | Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.path = {'16': foo}' | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setPopup `whale.browserAction.setPopup(object details)` Sets the html document to be opened as a popup when the user clicks on the browser action's icon. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | string | popup | The html file to show in a popup. If set to the empty string (''), no popup is shown. | | ### getPopup `whale.browserAction.getPopup(object details, function callback)` Gets the html document set as the popup for this browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the popup from. If no tab is specified, the non-tab-specific popup is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setBadgeText `whale.browserAction.setBadgeText(object details)` Sets the badge text for the browser action. The badge is displayed on top of the icon. | Parameters | |---| | object | details | | string | text | |---|---| Any number of characters can be passed, but only about four can fit in the space. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getBadgeText `whale.browserAction.getBadgeText(object details, function callback)` Gets the badge text of the browser action. If no tab is specified, the non-tab-specific badge text is returned. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the badge text from. If no tab is specified, the non-tab-specific badge text is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setBadgeBackgroundColor `whale.browserAction.setBadgeBackgroundColor(object details)` Sets the background color for the badge. | Parameters | |---| | object | details | | string or [ColorArray](/extensions/browserAction#type-ColorArray) | color | |---|---| An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is `[255, 0, 0, 255]`. Can also be a string with a CSS value, with opaque red being `#FF0000` or `#F00`. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getBadgeBackgroundColor `whale.browserAction.getBadgeBackgroundColor(object details, function callback)` Gets the background color of the browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the badge background color from. If no tab is specified, the non-tab-specific badge background color is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ColorArray](/extensions/browserAction#type-ColorArray) result) {...};` | [ColorArray](/extensions/browserAction#type-ColorArray) | result | | |---|---|---| | ### enable `whale.browserAction.enable(integer tabId)` Since Chrome 22. Enables the browser action for a tab. By default, browser actions are enabled. | Parameters | |---| | integer | (optional) tabId | The id of the tab for which you want to modify the browser action. | ### disable `whale.browserAction.disable(integer tabId)` Since Chrome 22. Disables the browser action for a tab. | Parameters | |---| | integer | (optional) tabId | The id of the tab for which you want to modify the browser action. | ## Events ### onClicked Fired when a browser action icon is clicked. This event will not fire if the browser action has a popup. #### addListener `whale.browserAction.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [tabs.Tab](/extensions/tabs#type-Tab) tab) {...};` | [tabs.Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | "},"extensions-page-action.html":{"url":"extensions-page-action.html","title":"page-action","keywords":"","body":"whale.pageAction Description: Use the whale.pageAction API to put icons in the main Google Chrome toolbar, to the right of the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages. Page actions appear grayed out when inactive. Availability: Since Chrome 19. Manifest: \"page_action\": {...} Some examples: * Subscribe to this page's RSS feed * Make a slideshow out of this page's photos The RSS icon in the following screenshot represents a page action that lets you subscribe to the RSS feed for the current page. ![](/static/images/page_action.png) Hidden page actions appear grayed out. For example, the RSS feed below is grayed out, as you can't subscribe to the feed for the current page: ![](/static/images/page_action_grey.png) Please consider using a [browser action](browserAction) instead, so that users can always interact with your extension. ## Manifest Register your page action in the [extension manifest](manifest) like this: { \"name\": \"My extension\", ... **\"page_action\": { \"default_icon\": { _// optional_ \"16\": \"images/icon16.png\", _// optional_ \"24\": \"images/icon24.png\", _// optional_ \"32\": \"images/icon32.png\" _// optional_ }, \"default_title\": \"Google Mail\", _// optional; shown in tooltip_ \"default_popup\": \"popup.html\" _// optional_ }**, ... } You can provide any size icon to be used in Chrome, and Chrome will select the closest one and scale it to the appropriate size to fill the 16-dip space. However, if the exact size isn't provided, this scaling can cause the icon to lose detail or look fuzzy. Since devices with less-common scale factors like 1.5x or 1.2x are becoming more common, you are encouraged to provide multiple sizes for your icons. This also ensures that if the icon display size is ever changed, you don't need to do any more work to provide different icons! The old syntax for registering the default icon is still supported: { \"name\": \"My extension\", ... **\"page_action\": { ... \"default_icon\": \"images/icon32.png\" _// optional_ _// equivalent to \"default_icon\": { \"32\": \"images/icon32.png\" }_ }**, ... } ## Parts of the UI Like browser actions, page actions can have an icon, a tooltip, and popup; they can't have badges, however. In addition, page actions can be grayed out. You can find information about icons, tooltips, and popups by reading about the [browser action UI](browserAction#ui). You make a page action appear and be grayed out using the [pageAction.show](/extensions/pageAction#method-show) and [pageAction.hide](/extensions/pageAction#method-hide) methods, respectively. By default, a page action appears grayed out. When you show it, you specify the tab in which the icon should appear. The icon remains visible until the tab is closed or starts displaying a different URL (because the user clicks a link, for example). ## Tips For the best visual impact, follow these guidelines: * **Do** use page actions for features that make sense for only a few pages. * **Don't** use page actions for features that make sense for most pages. Use [browser actions](browserAction) instead. * **Don't** constantly animate your icon. That's just annoying. ## Examples You can find simple examples of using page actions in the [examples/api/pageAction](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/pageAction/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [ImageDataType](#type-ImageDataType) | | Methods | | [show](#method-show) − `whale.pageAction.show(integer tabId)` | | [hide](#method-hide) − `whale.pageAction.hide(integer tabId)` | | [setTitle](#method-setTitle) − `whale.pageAction.setTitle(object details)` | | [getTitle](#method-getTitle) − `whale.pageAction.getTitle(object details, function callback)` | | [setIcon](#method-setIcon) − `whale.pageAction.setIcon(object details, function callback)` | | [setPopup](#method-setPopup) − `whale.pageAction.setPopup(object details)` | | [getPopup](#method-getPopup) − `whale.pageAction.getPopup(object details, function callback)` | | Events | | [onClicked](#event-onClicked) | ## Types ### ImageDataType Since Chrome 23. Pixel data for an image. Must be an ImageData object (for example, from a `canvas` element). ## Methods ### show `whale.pageAction.show(integer tabId)` Shows the page action. The page action is shown whenever the tab is selected. | Parameters | |---| | integer | tabId | The id of the tab for which you want to modify the page action. | ### hide `whale.pageAction.hide(integer tabId)` Hides the page action. Hidden page actions still appear in the Chrome toolbar, but are grayed out. | Parameters | |---| | integer | tabId | The id of the tab for which you want to modify the page action. | ### setTitle `whale.pageAction.setTitle(object details)` Sets the title of the page action. This is displayed in a tooltip over the page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | string | title | The tooltip string. | | ### getTitle `whale.pageAction.getTitle(object details, function callback)` Gets the title of the page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| Specify the tab to get the title from. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setIcon `whale.pageAction.setIcon(object details, function callback)` Sets the icon for the page action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the **path** or the **imageData** property must be specified. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | [ImageDataType](/extensions/pageAction#type-ImageDataType) or object | (optional) imageData | Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}' | | string or object | (optional) path | Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.path = {'16': foo}' | | integer | (optional) iconIndex | **Deprecated.** This argument is ignored. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setPopup `whale.pageAction.setPopup(object details)` Sets the html document to be opened as a popup when the user clicks on the page action's icon. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | string | popup | The html file to show in a popup. If set to the empty string (''), no popup is shown. | | ### getPopup `whale.pageAction.getPopup(object details, function callback)` Gets the html document set as the popup for this page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| Specify the tab to get the popup from. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ## Events ### onClicked Fired when a page action icon is clicked. This event will not fire if the page action has a popup. #### addListener `whale.pageAction.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [tabs.Tab](/extensions/tabs#type-Tab) tab) {...};` | [tabs.Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | "},"extensions-browsing-data.html":{"url":"extensions-browsing-data.html","title":"browsing-data","keywords":"","body":"whale.browsingData Description: Use the whale.browsingData API to remove browsing data from a user's local profile. Availability: Since Chrome 19. Permissions: \"browsingData\" ## Manifest You must declare the \"browsingData\" permission in the [extension manifest](manifest) to use this API. { \"name\": \"My extension\", ... **\"permissions\": [ \"browsingData\", ]**, ... } ## Usage The simplest use-case for this API is a a time-based mechanism for clearing a user's browsing data. Your code should provide a timestamp which indicates the historical date after which the user's browsing data should be removed. This timestamp is formatted as the number of milliseconds since the Unix epoch (which can be retrieved from a JavaScript `Date` object via the `getTime` method). For example, to clear all of a user's browsing data from the last week, you might write code as follows: var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.remove({ \"since\": oneWeekAgo }, { \"appcache\": true, \"cache\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"pluginData\": true, \"passwords\": true, \"webSQL\": true }, callback); The `whale.browsingData.remove` method allows you to remove various types of browsing data with a single call, and will be much faster than calling multiple more specific methods. If, however, you only want to clear one specific type of browsing data (cookies, for example), the more granular methods offer a readable alternative to a call filled with JSON. var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.removeCookies({ \"since\": oneWeekAgo }, callback); **Important**: Removing browsing data involves a good deal of heavy lifting in the background, and can take _tens of seconds_ to complete, depending on a user's profile. You should use the callback mechanism to keep your users up to date on the removal's status. ## Origin Types Adding an `originTypes` property to the API's options object allows you to specify which types of origins ought to be effected. Currently, origins are divided into three categories: * `unprotectedWeb` covers the general case of websites that users visit without taking any special action. If you don't specify an `originTypes`, the API defaults to removing data from unprotected web origins. * `protectedWeb` covers those web origins that have been installed as hosted applications. Installing [Angry Birds](https://whale.google.com/webstore/detail/aknpkdffaafgjchaibgeefbgmgeghloj), for example, protects the origin `http://whale.angrybirds.com`, and removes it from the `unprotectedWeb` category. Please do be careful when triggering deletion of data for these origins: make sure your users know what they're getting, as this will irrevocably remove their game data. No one wants to knock tiny pig houses over more often than necessary. * `extension` covers origins under the `chrome-extensions:` scheme. Removing extension data is, again, something you should be very careful about. We could adjust the previous example to remove only data from protected websites as follows: var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.remove({ \"since\": oneWeekAgo, **\"originTypes\": { \"protectedWeb\": true }** }, { \"appcache\": true, \"cache\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"serverBoundCertificates\": true, \"pluginData\": true, \"passwords\": true, \"webSQL\": true }, callback); **Seriously**: Be careful with `protectedWeb` and `extension`. These are destructive operations that your users will write angry email about if they're not well-informed about what to expect when your extension removes data on their behalf. ## Examples Samples for the `browsingData` API are available [on the samples page](samples#search:browsingData). ## Summary | Types | |---| | [RemovalOptions](#type-RemovalOptions) | | [DataTypeSet](#type-DataTypeSet) | | Methods | | [settings](#method-settings) − `whale.browsingData.settings(function callback)` | | [remove](#method-remove) − `whale.browsingData.remove( RemovalOptions options, DataTypeSet dataToRemove, function callback)` | | [removeAppcache](#method-removeAppcache) − `whale.browsingData.removeAppcache( RemovalOptions options, function callback)` | | [removeCache](#method-removeCache) − `whale.browsingData.removeCache( RemovalOptions options, function callback)` | | [removeCookies](#method-removeCookies) − `whale.browsingData.removeCookies( RemovalOptions options, function callback)` | | [removeDownloads](#method-removeDownloads) − `whale.browsingData.removeDownloads( RemovalOptions options, function callback)` | | [removeFileSystems](#method-removeFileSystems) − `whale.browsingData.removeFileSystems( RemovalOptions options, function callback)` | | [removeFormData](#method-removeFormData) − `whale.browsingData.removeFormData( RemovalOptions options, function callback)` | | [removeHistory](#method-removeHistory) − `whale.browsingData.removeHistory( RemovalOptions options, function callback)` | | [removeIndexedDB](#method-removeIndexedDB) − `whale.browsingData.removeIndexedDB( RemovalOptions options, function callback)` | | [removeLocalStorage](#method-removeLocalStorage) − `whale.browsingData.removeLocalStorage( RemovalOptions options, function callback)` | | [removePluginData](#method-removePluginData) − `whale.browsingData.removePluginData( RemovalOptions options, function callback)` | | [removePasswords](#method-removePasswords) − `whale.browsingData.removePasswords( RemovalOptions options, function callback)` | | [removeWebSQL](#method-removeWebSQL) − `whale.browsingData.removeWebSQL( RemovalOptions options, function callback)` | ## Types ### RemovalOptions Options that determine exactly what data will be removed. | properties | |---| | double | (optional) since | Remove data accumulated on or after this date, represented in milliseconds since the epoch (accessible via the `getTime` method of the JavaScript `Date` object). If absent, defaults to 0 (which would remove all browsing data). | | object | (optional) originTypes | Since Chrome 21. An object whose properties specify which origin types ought to be cleared. If this object isn't specified, it defaults to clearing only \"unprotected\" origins. Please ensure that you _really_ want to remove application data before adding 'protectedWeb' or 'extensions'. | boolean | (optional) unprotectedWeb | |---|---| Normal websites. | | boolean | (optional) protectedWeb | Websites that have been installed as hosted applications (be careful!). | | boolean | (optional) extension | Extensions and packaged applications a user has installed (be _really_ careful!). | | ### DataTypeSet Since Chrome 27. A set of data types. Missing data types are interpreted as `false`. | properties | |---| | boolean | (optional) appcache | Websites' appcaches. | | boolean | (optional) cache | The browser's cache. Note: when removing data, this clears the _entire_ cache: it is not limited to the range you specify. | | boolean | (optional) cookies | The browser's cookies. | | boolean | (optional) downloads | The browser's download list. | | boolean | (optional) fileSystems | Websites' file systems. | | boolean | (optional) formData | The browser's stored form data. | | boolean | (optional) history | The browser's history. | | boolean | (optional) indexedDB | Websites' IndexedDB data. | | boolean | (optional) localStorage | Websites' local storage data. | | boolean | (optional) serverBoundCertificates | Server-bound certificates. | | boolean | (optional) passwords | Stored passwords. | | boolean | (optional) pluginData | Plugins' data. | | boolean | (optional) serviceWorkers | Since Chrome 39. Service Workers. | | boolean | (optional) webSQL | Websites' WebSQL data. | ## Methods ### settings `whale.browsingData.settings(function callback)` Since Chrome 26. Reports which types of data are currently selected in the 'Clear browsing data' settings UI. Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object result) {...};` | object | result | |---|---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | |---|---|---| | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataToRemove | All of the types will be present in the result, with values of `true` if they are both selected to be removed and permitted to be removed, otherwise `false`. | | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataRemovalPermitted | All of the types will be present in the result, with values of `true` if they are permitted to be removed (e.g., by enterprise policy) and `false` if not. | | | ### remove `whale.browsingData.remove( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, [DataTypeSet](/extensions/browsingData#type-DataTypeSet) dataToRemove, function callback)` Clears various types of browsing data stored in a user's profile. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataToRemove | The set of data types to remove. | | function | (optional) callback | Called when deletion has completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeAppcache `whale.browsingData.removeAppcache( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' appcache data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' appcache data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeCache `whale.browsingData.removeCache( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's cache. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's cache has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeCookies `whale.browsingData.removeCookies( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's cookies and server-bound certificates modified within a particular timeframe. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's cookies and server-bound certificates have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeDownloads `whale.browsingData.removeDownloads( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's list of downloaded files (_not_ the downloaded files themselves). | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's list of downloaded files has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeFileSystems `whale.browsingData.removeFileSystems( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' file system data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' file systems have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeFormData `whale.browsingData.removeFormData( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's stored form data (autofill). | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's form data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeHistory `whale.browsingData.removeHistory( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's history. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's history has cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeIndexedDB `whale.browsingData.removeIndexedDB( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' IndexedDB data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' IndexedDB data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeLocalStorage `whale.browsingData.removeLocalStorage( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' local storage data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' local storage has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removePluginData `whale.browsingData.removePluginData( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears plugins' data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when plugins' data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removePasswords `whale.browsingData.removePasswords( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's stored passwords. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's passwords have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeWebSQL `whale.browsingData.removeWebSQL( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' WebSQL data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' WebSQL databases have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | "},"extensions-page-capture.html":{"url":"extensions-page-capture.html","title":"page-capture","keywords":"","body":"whale.pageCapture Description: Use the whale.pageCapture API to save a tab as MHTML. Availability: Since Chrome 19. Permissions: \"pageCapture\" MHTML is a [standard format](http://tools.ietf.org/html/rfc2557) supported by most browsers. It encapsulates in a single file a page and all its resources (CSS files, images..). Note that for security reasons a MHTML file can only be loaded from the file system and that it can only be loaded in the main frame. ## Manifest You must declare the \"pageCapture\" permission in the [extension manifest](manifest) to use the pageCapture API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"pageCapture\" ]**, ... } ## Summary | Methods | |---| | [saveAsMHTML](#method-saveAsMHTML) − `whale.pageCapture.saveAsMHTML(object details, function callback)` | ## Methods ### saveAsMHTML `whale.pageCapture.saveAsMHTML(object details, function callback)` Saves the content of the tab with given id as MHTML. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab to save as MHTML. | | | function | callback | Called when the MHTML has been generated. The _callback_ parameter should be a function that looks like this: `function(binary mhtmlData) {...};` | binary | (optional) mhtmlData | |---|---| The MHTML data as a Blob. | | "},"extensions-commands.html":{"url":"extensions-commands.html","title":"commands","keywords":"","body":"whale.commands Description: Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension. Availability: Since Chrome 25. Manifest: \"commands\": {...} ## Manifest You must have a `\"manifest_version\"` of at least `2` to use this API. ## Usage The commands API allows you to define specific commands, and bind them to a default key combination. Each command your extension accepts must be listed in the manifest as an attribute of the 'commands' manifest key. An extension can have many commands but only 4 suggested keys can be specified. The user can manually add more shortcuts from the chrome://extensions/configureCommands dialog. Supported keys: A-Z, 0-9, Comma, Period, Home, End, PageUp, PageDown, Space, Insert, Delete, Arrow keys (Up, Down, Left, Right) and the Media Keys (MediaNextTrack, MediaPlayPause, MediaPrevTrack, MediaStop). Note: All key combinations must include either Ctrl* or Alt. Combinations that involve Ctrl+Alt are not permitted in order to avoid conflicts with the AltGr key. Shift can be used in addition to Alt or Ctrl, but is not required. Modifiers (such as Ctrl) can not be used in combination with the Media Keys. Tab key was removed from list of supported keys in Chrome version 33 and above for accessibility reasons. * Also note that on Mac 'Ctrl' is automatically converted to 'Command'. If you want 'Ctrl' instead, please specify 'MacCtrl'. * Additionally, on Chrome OS, you can specify 'Search' as a modifier. Certain Chrome shortcuts (e.g. window management) always take priority over Extension Command shortcuts and can not be overwritten. { \"name\": \"My extension\", ... ** \"commands\": { \"toggle-feature-foo\": { \"suggested_key\": { \"default\": \"Ctrl+Shift+Y\", \"mac\": \"Command+Shift+Y\" }, \"description\": \"Toggle feature foo\" }, \"_execute_browser_action\": { \"suggested_key\": { \"windows\": \"Ctrl+Shift+Y\", \"mac\": \"Command+Shift+Y\", \"chromeos\": \"Ctrl+Shift+U\", \"linux\": \"Ctrl+Shift+J\" } }, \"_execute_page_action\": { \"suggested_key\": { \"default\": \"Ctrl+Shift+E\", \"windows\": \"Alt+Shift+P\", \"mac\": \"Alt+Shift+P\" } } }**, ... } In your background page, you can bind a handler to each of the commands defined in the manifest (except for '_execute_browser_action' and '_execute_page_action') via onCommand.addListener. For example: whale.commands.onCommand.addListener(function(command) { console.log('Command:', command); }); The '_execute_browser_action' and '_execute_page_action' commands are reserved for the action of opening your extension's popups. They won't normally generate events that you can handle. If you need to take action based on your popup opening, consider listening for an 'onDomReady' event inside your popup's code. ## Scope By default, Commands are scoped to the Chrome browser, which means that while the browser does not have focus, the shortcut will be inactive. On desktop Chrome, Commands can instead have global scope, as of version 35, and will then also work while Chrome does *not* have focus. NOTE: The exception here is Chrome OS, where global commands are not allowed at the moment. The user is free to designate any shortcut as global using the UI in chrome://extensions \\ Keyboard Shortcuts, but the extension developer is limited to specifying only Ctrl+Shift+[0..9] as global shortcuts. This is to minimize the risk of overriding shortcuts in other applications since if, for example, Alt+P were to be allowed as global, the printing shortcut might not work in other applications. Example: { \"name\": \"My extension\", ... \"commands\": { \"toggle-feature-foo\": { \"suggested_key\": { \"default\": \"Ctrl+Shift+5\" }, \"description\": \"Toggle feature foo\", **\"global\": true** } }, ... } ## Summary | Types | |---| | [Command](#type-Command) | | Methods | | [getAll](#method-getAll) − `whale.commands.getAll(function callback)` | | Events | | [onCommand](#event-onCommand) | ## Types ### Command | properties | |---| | string | (optional) name | The name of the Extension Command | | string | (optional) description | The Extension Command description | | string | (optional) shortcut | The shortcut active for this command, or blank if not active. | ## Methods ### getAll `whale.commands.getAll(function callback)` Returns all the registered extension commands for this extension and their shortcut (if active). | Parameters | |---| | function | (optional) callback | Called to return the registered commands. If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of [Command](/extensions/commands#type-Command) commands) {...};` | array of [Command](/extensions/commands#type-Command) | commands | | |---|---|---| | ## Events ### onCommand Fired when a registered command is activated using a keyboard shortcut. #### addListener `whale.commands.onCommand.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string command) {...};` | string | command | | |---|---|---| | "},"extensions-permissions.html":{"url":"extensions-permissions.html","title":"permissions","keywords":"","body":"whale.permissions Description: Use the whale.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary. Availability: Since Chrome 20. Learn More: Declaring permissions ## Implementing optional permissions ### Step 1: Decide which permissions are required and which are optional An extension can declare both required and optional permissions. In general, you should: * Use required permissions when they are needed for your extension’s basic functionality. * Use optional permissions when they are needed for optional features in your extension. Advantages of _required_ permissions: * **Fewer prompts:** An extension can prompt the user once to accept all permissions. * **Simpler development:** Required permissions are guaranteed to be present. Advantages of _optional_ permissions: * **Better security:** Extensions run with fewer permissions since users only enable permissions that are needed. * **Better information for users:** An extension can explain why it needs a particular permission when the user enables the relevant feature. * **Easier upgrades:** When you upgrade your extension, Chrome will not disable it for your users if the upgrade adds optional rather than required permissions. ### Step 2: Declare optional permissions in the manifest Declare optional permissions in your [extension manifest](manifest) with the `optional_permissions` key, using the same format as the [permissions](declare_permissions#manifest) field: { \"name\": \"My extension\", ... **\"optional_permissions\": [ \"tabs\", \"http://www.google.com/\" ],** ... } You can specify any of the following as optional [permissions](declare_permissions): * _host permissions_ * background * bookmarks * clipboardRead * clipboardWrite * contentSettings * contextMenus * cookies * debugger * history * idle * management * notifications * pageCapture * tabs * topSites * webNavigation * webRequest * webRequestBlocking If you want to request hosts that you only discover at runtime, include `\"http://*/\"` and/or `\"https://*/\"` as an `optional_permission`. This lets you specify any origin in [Permissions.origins](/extensions/permissions#property-Permissions-origins) as long as it has a matching scheme. ### Step 3: Request optional permissions Request the permissions from within a user gesture using `permissions.request()`: document.querySelector('#my-button').addEventListener('click', function(event) { // Permissions must be requested from inside a user gesture, like a button's // click handler. whale.permissions.request({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(granted) { // The callback argument will be true if the user granted the permissions. if (granted) { doSomething(); } else { doSomethingElse(); } }); }); Chrome prompts the user if adding the permissions results in different [warning messages](permission_warnings) than the user has already seen and accepted. For example, the previous code might result in a prompt like this: ![example permission confirmation prompt](/static/images/perms-optional.png) ### Step 4: Check the extension's current permissions To check whether your extension has a specific permission or set of permissions, use `permission.contains()`: whale.permissions.contains({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(result) { if (result) { // The extension has the permissions. } else { // The extension doesn't have the permissions. } }); ### Step 5: Remove the permissions You should remove permissions when you no longer need them. After a permission has been removed, calling `permissions.request()` usually adds the permission back without prompting the user. whale.permissions.remove({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(removed) { if (removed) { // The permissions have been removed. } else { // The permissions have not been removed (e.g., you tried to remove // required permissions). } }); ## Summary | Types | |---| | [Permissions](#type-Permissions) | | Methods | | [getAll](#method-getAll) − `whale.permissions.getAll(function callback)` | | [contains](#method-contains) − `whale.permissions.contains( Permissions permissions, function callback)` | | [request](#method-request) − `whale.permissions.request( Permissions permissions, function callback)` | | [remove](#method-remove) − `whale.permissions.remove( Permissions permissions, function callback)` | | Events | | [onAdded](#event-onAdded) | | [onRemoved](#event-onRemoved) | ## Types ### Permissions | properties | |---| | array of string | (optional) permissions | List of named permissions (does not include hosts or origins). Anything listed here must appear in the `optional_permissions` list in the manifest. | | array of string | (optional) origins | List of origin permissions. Anything listed here must be a subset of a host that appears in the `optional_permissions` list in the manifest. For example, if `http://*.example.com/` or `http://*/` appears in `optional_permissions`, you can request an origin of `http://help.example.com/`. Any path is ignored. | ## Methods ### getAll `whale.permissions.getAll(function callback)` Gets the extension's current set of permissions. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The extension's active permissions. | | ### contains `whale.permissions.contains( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Checks if the extension has the specified permissions. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(boolean result) {...};` | boolean | result | |---|---| True if the extension has the specified permissions. | | ### request `whale.permissions.request( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Requests access to the specified permissions. These permissions must be defined in the optional_permissions field of the manifest. If there are any problems requesting the permissions, [runtime.lastError](/extensions/runtime#property-lastError) will be set. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean granted) {...};` | boolean | granted | |---|---| True if the user granted the specified permissions. | | ### remove `whale.permissions.remove( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Removes access to the specified permissions. If there are any problems removing the permissions, [runtime.lastError](/extensions/runtime#property-lastError) will be set. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean removed) {...};` | boolean | removed | |---|---| True if the permissions were removed. | | ## Events ### onAdded Fired when the extension acquires new permissions. #### addListener `whale.permissions.onAdded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The newly acquired permissions. | | ### onRemoved Fired when access to permissions has been removed from the extension. #### addListener `whale.permissions.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The permissions that have been removed. | | "},"extensions-content-settings.html":{"url":"extensions-content-settings.html","title":"content-settings","keywords":"","body":"whale.contentSettings Description: Use the whale.contentSettings API to change settings that control whether websites can use features such as cookies, JavaScript, and plugins. More generally speaking, content settings allow you to customize Chrome's behavior on a per-site basis instead of globally. Availability: Since Chrome 19. Permissions: \"contentSettings\" ## Manifest You must declare the \"contentSettings\" permission in your extension's manifest to use the API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"contentSettings\" ]**, ... } ## Content setting patterns You can use patterns to specify the websites that each content setting affects. For example, `http://*.youtube.com/*` specifies youtube.com and all of its subdomains. The syntax for content setting patterns is the same as for [match patterns](match_patterns), with a few differences: * For `http`, `https`, and `ftp` URLs, the path must be a wildcard (`/*`). For `file` URLs, the path must be completely specified and **must not** contain wildcards. * In contrast to match patterns, content setting patterns can specify a port number. If a port number is specified, the pattern only matches websites with that port. If no port number is specified, the pattern matches all ports. ### Pattern precedence When more than one content setting rule applies for a given site, the rule with the more specific pattern takes precedence. For example, the following patterns are ordered by precedence: 1. `http://www.example.com/*` 2. `http://*.example.com/*` (matching example.com and all subdomains) 3. `` (matching every URL) Three kinds of wildcards affect how specific a pattern is: * Wildcards in the port (for example `http://www.example.com:*/*`) * Wildcards in the scheme (for example `*://www.example.com:123/*`) * Wildcards in the hostname (for example `http://*.example.com:123/*`) If a pattern is more specific than another pattern in one part but less specific in another part, the different parts are checked in the following order: hostname, scheme, port. For example, the following patterns are ordered by precedence: 1. `http://www.example.com:*/*` Specifies the hostname and scheme. 2. `*:/www.example.com:123/*` Not as high, because although it specifies the hostname, it doesn't specify the scheme. 3. `http://*.example.com:123/*` Lower because although it specifies the port and scheme, it has a wildcard in the hostname. ## Primary and secondary patterns The URL taken into account when deciding which content setting to apply depends on the content type. For example, for [contentSettings.notifications](/extensions/contentSettings#property-notifications) settings are based on the URL shown in the omnibox. This URL is called the \"primary\" URL. Some content types can take additional URLs into account. For example, whether a site is allowed to set a [contentSettings.cookies](/extensions/contentSettings#property-cookies) is decided based on the URL of the HTTP request (which is the primary URL in this case) as well as the URL shown in the omnibox (which is called the \"secondary\" URL). If multiple rules have primary and secondary patterns, the rule with the more specific primary pattern takes precedence. If there multiple rules have the same primary pattern, the rule with the more specific secondary pattern takes precedence. For example, the following list of primary/secondary pattern pairs is ordered by precedence: | Precedence | Primary pattern | Secondary pattern | |---|---|---| | 1 | `http://www.moose.com/*`, | `http://www.wombat.com/*` | | 2 | `http://www.moose.com/*`, | `` | | 3 | ``, | `http://www.wombat.com/*` | | 4 | ``, | `` | ## Resource identifiers Resource identifiers allow you to specify content settings for specific subtypes of a content type. Currently, the only content type that supports resource identifiers is [contentSettings.plugins](/extensions/contentSettings#property-plugins), where a resource identifier identifies a specific plugin. When applying content settings, first the settings for the specific plugin are checked. If there are no settings found for the specific plugin, the general content settings for plugins are checked. For example, if a content setting rule has the resource identifier `adobe-flash-player` and the pattern ``, it takes precedence over a rule without a resource identifier and the pattern `http://www.example.com/*`, even if that pattern is more specific. You can get a list of resource identifiers for a content type by calling the [contentSettings.ContentSetting.getResourceIdentifiers](/extensions/contentSettings#method-ContentSetting-getResourceIdentifiers) method. The returned list can change with the set of installed plugins on the user's machine, but Chrome tries to keep the identifiers stable across plugin updates. ## Examples You can find samples of this API on the [sample page](samples#search:contentSettings). ## Summary | Types | |---| | [ResourceIdentifier](#type-ResourceIdentifier) | | [Scope](#type-Scope) | | [ContentSetting](#type-ContentSetting) | | [CookiesContentSetting](#type-CookiesContentSetting) | | [ImagesContentSetting](#type-ImagesContentSetting) | | [JavascriptContentSetting](#type-JavascriptContentSetting) | | [LocationContentSetting](#type-LocationContentSetting) | | [PluginsContentSetting](#type-PluginsContentSetting) | | [PopupsContentSetting](#type-PopupsContentSetting) | | [NotificationsContentSetting](#type-NotificationsContentSetting) | | [FullscreenContentSetting](#type-FullscreenContentSetting) | | [MouselockContentSetting](#type-MouselockContentSetting) | | [MicrophoneContentSetting](#type-MicrophoneContentSetting) | | [CameraContentSetting](#type-CameraContentSetting) | | [PpapiBrokerContentSetting](#type-PpapiBrokerContentSetting) | | [MultipleAutomaticDownloadsContentSetting](#type-MultipleAutomaticDownloadsContentSetting) | | Properties | | [cookies](#property-cookies) | | [images](#property-images) | | [javascript](#property-javascript) | | [location](#property-location) | | [plugins](#property-plugins) | | [popups](#property-popups) | | [notifications](#property-notifications) | | [fullscreen](#property-fullscreen) | | [mouselock](#property-mouselock) | | [microphone](#property-microphone) | | [camera](#property-camera) | | [unsandboxedPlugins](#property-unsandboxedPlugins) | | [automaticDownloads](#property-automaticDownloads) | ## Types ### ResourceIdentifier The only content type using resource identifiers is [contentSettings.plugins](/extensions/contentSettings#property-plugins). For more information, see [Resource Identifiers](contentSettings#resource-identifiers). | properties | |---| | string | id | The resource identifier for the given content type. | | string | (optional) description | A human readable description of the resource. | ### Scope The scope of the ContentSetting. One of regular: setting for regular profile (which is inherited by the incognito profile if not overridden elsewhere), incognito_session_only: setting for incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular settings). | Enum | |---| | `\"regular\"`, or `\"incognito_session_only\"` | ### ContentSetting | methods | |---| | #### clear `ContentSetting.clear(object details, function callback)` Clear all content setting rules set by this extension. | Parameters | |---| | object | details | | [Scope](/extensions/contentSettings#type-Scope) | (optional) scope | |---|---| Where to clear the setting (default: regular). | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### get `ContentSetting.get(object details, function callback)` Gets the current content setting for a given pair of URLs. | Parameters | |---| | object | details | | string | primaryUrl | |---|---| The primary URL for which the content setting should be retrieved. Note that the meaning of a primary URL depends on the content type. | | string | (optional) secondaryUrl | The secondary URL for which the content setting should be retrieved. Defaults to the primary URL. Note that the meaning of a secondary URL depends on the content type, and not all content types use secondary URLs. | | [ResourceIdentifier](/extensions/contentSettings#type-ResourceIdentifier) | (optional) resourceIdentifier | A more specific identifier of the type of content for which the settings should be retrieved. | | boolean | (optional) incognito | Whether to check the content settings for an incognito session. (default false) | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | any | setting | |---|---| The content setting. See the description of the individual ContentSetting objects for the possible values. | | | | | #### set `ContentSetting.set(object details, function callback)` Applies a new content setting rule. | Parameters | |---| | object | details | | string | primaryPattern | |---|---| The pattern for the primary URL. For details on the format of a pattern, see [Content Setting Patterns](contentSettings#patterns). | | string | (optional) secondaryPattern | The pattern for the secondary URL. Defaults to matching all URLs. For details on the format of a pattern, see [Content Setting Patterns](contentSettings#patterns). | | [ResourceIdentifier](/extensions/contentSettings#type-ResourceIdentifier) | (optional) resourceIdentifier | The resource identifier for the content type. | | any | setting | The setting applied by this rule. See the description of the individual ContentSetting objects for the possible values. | | [Scope](/extensions/contentSettings#type-Scope) | (optional) scope | Where to set the setting (default: regular). | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### getResourceIdentifiers `ContentSetting.getResourceIdentifiers(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [ResourceIdentifier](/extensions/contentSettings#type-ResourceIdentifier) resourceIdentifiers) {...};` | array of [ResourceIdentifier](/extensions/contentSettings#type-ResourceIdentifier) | (optional) resourceIdentifiers | |---|---| A list of resource identifiers for this content type, or undefined if this content type does not use resource identifiers. | | | ### CookiesContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"session_only\"` | ### ImagesContentSetting | Enum | |---| | `\"allow\"`, or `\"block\"` | ### JavascriptContentSetting | Enum | |---| | `\"allow\"`, or `\"block\"` | ### LocationContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ### PluginsContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"detect_important_content\"` | ### PopupsContentSetting | Enum | |---| | `\"allow\"`, or `\"block\"` | ### NotificationsContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ### FullscreenContentSetting | Enum | |---| | `\"allow\"` | ### MouselockContentSetting | Enum | |---| | `\"allow\"` | ### MicrophoneContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ### CameraContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ### PpapiBrokerContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ### MultipleAutomaticDownloadsContentSetting | Enum | |---| | `\"allow\"`, `\"block\"`, or `\"ask\"` | ## Properties | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.cookies` | Whether to allow cookies and other local data to be set by websites. One of allow: Accept cookies, block: Block cookies, session_only: Accept cookies only for the current session. Default is allow. The primary URL is the URL representing the cookie origin. The secondary URL is the URL of the top-level frame. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.images` | Whether to show images. One of allow: Show images, block: Don't show images. Default is allow. The primary URL is the URL of the top-level frame. The secondary URL is the URL of the image. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.javascript` | Whether to run JavaScript. One of allow: Run JavaScript, block: Don't run JavaScript. Default is allow. The primary URL is the URL of the top-level frame. The secondary URL is not used. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.location` | Since Chrome 42. Whether to allow Geolocation. One of allow: Allow sites to track your physical location, block: Don't allow sites to track your physical location, ask: Ask before allowing sites to track your physical location. Default is ask. The primary URL is the URL of the document which requested location data. The secondary URL is the URL of the top-level frame (which may or may not differ from the requesting URL). | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.plugins` | Whether to run plugins. One of allow: Run plugins automatically, block: Don't run plugins automatically, detect_important_content: Only run automatically those plugins that are detected as the website's main content. The primary URL is the URL of the top-level frame. The secondary URL is not used. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.popups` | Whether to allow sites to show pop-ups. One of allow: Allow sites to show pop-ups, block: Don't allow sites to show pop-ups. Default is block. The primary URL is the URL of the top-level frame. The secondary URL is not used. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.notifications` | Whether to allow sites to show desktop notifications. One of allow: Allow sites to show desktop notifications, block: Don't allow sites to show desktop notifications, ask: Ask when a site wants to show desktop notifications. Default is ask. The primary URL is the URL of the document which wants to show the notification. The secondary URL is not used. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.fullscreen` | Since Chrome 42. _Deprecated._ No longer has any effect. Fullscreen permission is now automatically granted for all sites. Value is always allow. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.mouselock` | Since Chrome 42. _Deprecated._ No longer has any effect. Mouse lock permission is now automatically granted for all sites. Value is always allow. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.microphone` | Since Chrome 46. Whether to allow sites to access the microphone. One of allow: Allow sites to access the microphone, block: Don't allow sites to access the microphone, ask: Ask when a site wants to access the microphone. Default is ask. The primary URL is the URL of the document which requested microphone access. The secondary URL is not used. NOTE: The 'allow' setting is not valid if both patterns are ''. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.camera` | Since Chrome 46. Whether to allow sites to access the camera. One of allow: Allow sites to access the camera, block: Don't allow sites to access the camera, ask: Ask when a site wants to access the camera. Default is ask. The primary URL is the URL of the document which requested camera access. The secondary URL is not used. NOTE: The 'allow' setting is not valid if both patterns are ''. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.unsandboxedPlugins` | Since Chrome 42. Whether to allow sites to run plugins unsandboxed. One of allow: Allow sites to run plugins unsandboxed, block: Don't allow sites to run plugins unsandboxed, ask: Ask when a site wants to run a plugin unsandboxed. Default is ask. The primary URL is the URL of the top-level frame. The secondary URL is not used. | | [ContentSetting](/extensions/contentSettings#type-ContentSetting) | `whale.contentSettings.automaticDownloads` | Since Chrome 42. Whether to allow sites to download multiple files automatically. One of allow: Allow sites to download multiple files automatically, block: Don't allow sites to download multiple files automatically, ask: Ask when a site wants to download files automatically after the first file. Default is ask. The primary URL is the URL of the top-level frame. The secondary URL is not used. | "},"extensions-power.html":{"url":"extensions-power.html","title":"power","keywords":"","body":"whale.power Description: Use the whale.power API to override the system's power management features. Availability: Since Chrome 27. Permissions: \"power\" ## Usage By default, operating systems dim the screen when users are inactive and eventually suspend the system. With the power API, an app or extension can keep the system awake. Using this API, you can specify the [Level](/extensions/power#type-Level) to which power management is disabled. The `\"system\"` level keeps the system active, but allows the screen to be dimmed or turned off. For example, a communication app can continue to receive messages while the screen is off. The `\"display\"` level keeps the screen and system active. E-book and presentation apps, for example, can keep the screen and system active while users read. When a user has more than one app or extension active, each with its own power level, the highest-precedence level takes effect; `\"display\"` always takes precedence over `\"system\"`. For example, if app A asks for `\"system\"` power management, and app B asks for `\"display\"`, `\"display\"` is used until app B is unloaded or releases its request. If app A is still active, `\"system\"` is then used. ## Summary | Types | |---| | [Level](#type-Level) | | Methods | | [requestKeepAwake](#method-requestKeepAwake) − `whale.power.requestKeepAwake( Level level)` | | [releaseKeepAwake](#method-releaseKeepAwake) − `whale.power.releaseKeepAwake()` | ## Types ### Level | Enum | |---| | `\"system\"` Prevent the system from sleeping in response to user inactivity. `\"display\"` Prevent the display from being turned off or dimmed or the system from sleeping in response to user inactivity. | ## Methods ### requestKeepAwake `whale.power.requestKeepAwake( [Level](/extensions/power#type-Level) level)` Requests that power management be temporarily disabled. |level| describes the degree to which power management should be disabled. If a request previously made by the same app is still active, it will be replaced by the new request. | Parameters | |---| | [Level](/extensions/power#type-Level) | level | | ### releaseKeepAwake `whale.power.releaseKeepAwake()` Releases a request previously made via requestKeepAwake(). "},"extensions-context-menus.html":{"url":"extensions-context-menus.html","title":"context-menus","keywords":"","body":"whale.contextMenus Description: Use the whale.contextMenus API to add items to Google Chrome's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages. Availability: Since Chrome 19. Permissions: \"contextMenus\" ## Usage Context menu items can appear in any document (or frame within a document), even those with file:// or chrome:// URLs. To control which documents your items can appear in, specify the documentUrlPatterns field when you call the create() or update() method. You can create as many context menu items as you need, but if more than one from your extension is visible at once, Google Chrome automatically collapses them into a single parent menu. ## Manifest You must declare the \"contextMenus\" permission in your extension's manifest to use the API. Also, you should specify a 16x16-pixel icon for display next to your menu item. For example: { \"name\": \"My extension\", ... \"permissions\": [ **\"contextMenus\"** ], \"icons\": { **\"16\": \"icon-bitty.png\",** \"48\": \"icon-small.png\", \"128\": \"icon-large.png\" }, ... } ## Examples You can find samples of this API on the [sample page](samples#search:contextMenus). ## Summary | Types | |---| | [ContextType](#type-ContextType) | | [ItemType](#type-ItemType) | | Properties | | [ACTION_MENU_TOP_LEVEL_LIMIT](#property-ACTION_MENU_TOP_LEVEL_LIMIT) | | Methods | | [create](#method-create) − `integer or string whale.contextMenus.create(object createProperties, function callback)` | | [update](#method-update) − `whale.contextMenus.update(integer or string id, object updateProperties, function callback)` | | [remove](#method-remove) − `whale.contextMenus.remove(integer or string menuItemId, function callback)` | | [removeAll](#method-removeAll) − `whale.contextMenus.removeAll(function callback)` | | Events | | [onClicked](#event-onClicked) | ## Types ### ContextType The different contexts a menu can appear in. Specifying 'all' is equivalent to the combination of all other contexts except for 'launcher'. The 'launcher' context is only supported by apps and is used to add menu items to the context menu that appears when clicking on the app icon in the launcher/taskbar/dock/etc. Different platforms might put limitations on what is actually supported in a launcher context menu. | Enum | |---| | `\"all\"`, `\"page\"`, `\"frame\"`, `\"selection\"`, `\"link\"`, `\"editable\"`, `\"image\"`, `\"video\"`, `\"audio\"`, `\"launcher\"`, `\"browser_action\"`, or `\"page_action\"` | ### ItemType The type of menu item. | Enum | |---| | `\"normal\"`, `\"checkbox\"`, `\"radio\"`, or `\"separator\"` | ## Properties | `6` | `whale.contextMenus.ACTION_MENU_TOP_LEVEL_LIMIT` | |---|---| Since Chrome 38. The maximum number of top level extension items that can be added to an extension action context menu. Any items beyond this limit will be ignored. | ## Methods ### create `integer or string whale.contextMenus.create(object createProperties, function callback)` Creates a new context menu item. Note that if an error occurs during creation, you may not find out until the creation callback fires (the details will be in whale.runtime.lastError). | Parameters | |---| | object | createProperties | | [ItemType](/extensions/contextMenus#type-ItemType) | (optional) type | |---|---| The type of menu item. Defaults to 'normal' if not specified. | | string | (optional) id | Since Chrome 21. The unique ID to assign to this item. Mandatory for event pages. Cannot be the same as another ID for this extension. | | string | (optional) title | The text to be displayed in the item; this is _required_ unless `type` is 'separator'. When the context is 'selection', you can use `%s` within the string to show the selected text. For example, if this parameter's value is \"Translate '%s' to Pig Latin\" and the user selects the word \"cool\", the context menu item for the selection is \"Translate 'cool' to Pig Latin\". | | boolean | (optional) checked | The initial state of a checkbox or radio item: true for selected and false for unselected. Only one radio item can be selected at a time in a given group of radio items. | | array of [ContextType](/extensions/contextMenus#type-ContextType) | (optional) contexts | List of contexts this menu item will appear in. Defaults to ['page'] if not specified. | | boolean | (optional) visible | Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). Whether the item is visible in the menu. | | function | (optional) onclick | A function that will be called back when the menu item is clicked. Event pages cannot use this; instead, they should register a listener for whale.contextMenus.onClicked. | Parameters | |---| | object | info | Information about the item clicked and the context where the click happened. | integer or string | menuItemId | |---|---| Since Chrome 35. The ID of the menu item that was clicked. | | integer or string | (optional) parentMenuItemId | Since Chrome 35. The parent ID, if any, for the item clicked. | | string | (optional) mediaType | Since Chrome 35. One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements. | | string | (optional) linkUrl | Since Chrome 35. If the element is a link, the URL it points to. | | string | (optional) srcUrl | Since Chrome 35. Will be present for elements with a 'src' URL. | | string | (optional) pageUrl | Since Chrome 35. The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu. | | string | (optional) frameUrl | Since Chrome 35. The URL of the frame of the element where the context menu was clicked, if it was in a frame. | | integer | (optional) frameId | Since Chrome 35. The [ID of the frame](webNavigation#frame_ids) of the element where the context menu was clicked, if it was in a frame. | | string | (optional) selectionText | Since Chrome 35. The text for the context selection, if any. | | boolean | editable | Since Chrome 35. A flag indicating whether the element is editable (text input, textarea, etc.). | | boolean | (optional) wasChecked | Since Chrome 35. A flag indicating the state of a checkbox or radio item before it was clicked. | | boolean | (optional) checked | Since Chrome 35. A flag indicating the state of a checkbox or radio item after it is clicked. | | | [tabs.Tab](/extensions/tabs#type-Tab) | tab | The details of the tab where the click took place. Note: this parameter only present for extensions. | | | integer or string | (optional) parentId | The ID of a parent menu item; this makes the item a child of a previously added item. | | array of string | (optional) documentUrlPatterns | Lets you restrict the item to apply only to documents whose URL matches one of the given patterns. (This applies to frames as well.) For details on the format of a pattern, see [Match Patterns](match_patterns). | | array of string | (optional) targetUrlPatterns | Similar to documentUrlPatterns, but lets you filter based on the src attribute of img/audio/video tags and the href of anchor tags. | | boolean | (optional) enabled | Since Chrome 20. Whether this context menu item is enabled or disabled. Defaults to true. | | | function | (optional) callback | Called when the item has been created in the browser. If there were any problems creating the item, details will be available in whale.runtime.lastError. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### update `whale.contextMenus.update(integer or string id, object updateProperties, function callback)` Updates a previously created context menu item. | Parameters | |---| | integer or string | id | The ID of the item to update. | | object | updateProperties | The properties to update. Accepts the same values as the create function. | [ItemType](/extensions/contextMenus#type-ItemType) | (optional) type | | |---|---|---| | string | (optional) title | | | boolean | (optional) checked | | | array of [ContextType](/extensions/contextMenus#type-ContextType) | (optional) contexts | | | boolean | (optional) visible | Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). Whether the item is visible in the menu. | | function | (optional) onclick | | Parameters | |---| | object | info | Since Chrome 44. Information sent when a context menu item is clicked. | integer or string | menuItemId | |---|---| The ID of the menu item that was clicked. | | integer or string | (optional) parentMenuItemId | The parent ID, if any, for the item clicked. | | string | (optional) mediaType | One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements. | | string | (optional) linkUrl | If the element is a link, the URL it points to. | | string | (optional) srcUrl | Will be present for elements with a 'src' URL. | | string | (optional) pageUrl | The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu. | | string | (optional) frameUrl | The URL of the frame of the element where the context menu was clicked, if it was in a frame. | | integer | (optional) frameId | The [ID of the frame](webNavigation#frame_ids) of the element where the context menu was clicked, if it was in a frame. | | string | (optional) selectionText | The text for the context selection, if any. | | boolean | editable | A flag indicating whether the element is editable (text input, textarea, etc.). | | boolean | (optional) wasChecked | A flag indicating the state of a checkbox or radio item before it was clicked. | | boolean | (optional) checked | A flag indicating the state of a checkbox or radio item after it is clicked. | | | [tabs.Tab](/extensions/tabs#type-Tab) | tab | Since Chrome 44. The details of the tab where the click took place. Note: this parameter only present for extensions. | | | integer or string | (optional) parentId | Note: You cannot change an item to be a child of one of its own descendants. | | array of string | (optional) documentUrlPatterns | | | array of string | (optional) targetUrlPatterns | | | boolean | (optional) enabled | Since Chrome 20. | | | function | (optional) callback | Called when the context menu has been updated. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### remove `whale.contextMenus.remove(integer or string menuItemId, function callback)` Removes a context menu item. | Parameters | |---| | integer or string | menuItemId | The ID of the context menu item to remove. | | function | (optional) callback | Called when the context menu has been removed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeAll `whale.contextMenus.removeAll(function callback)` Removes all context menu items added by this extension. | Parameters | |---| | function | (optional) callback | Called when removal is complete. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onClicked Since Chrome 21. Fired when a context menu item is clicked. #### addListener `whale.contextMenus.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info, [tabs.Tab](/extensions/tabs#type-Tab) tab) {...};` | object | info | |---|---| Information about the item clicked and the context where the click happened. | integer or string | menuItemId | |---|---| Since Chrome 35. The ID of the menu item that was clicked. | | integer or string | (optional) parentMenuItemId | Since Chrome 35. The parent ID, if any, for the item clicked. | | string | (optional) mediaType | Since Chrome 35. One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements. | | string | (optional) linkUrl | Since Chrome 35. If the element is a link, the URL it points to. | | string | (optional) srcUrl | Since Chrome 35. Will be present for elements with a 'src' URL. | | string | (optional) pageUrl | Since Chrome 35. The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu. | | string | (optional) frameUrl | Since Chrome 35. The URL of the frame of the element where the context menu was clicked, if it was in a frame. | | integer | (optional) frameId | Since Chrome 35. The [ID of the frame](webNavigation#frame_ids) of the element where the context menu was clicked, if it was in a frame. | | string | (optional) selectionText | Since Chrome 35. The text for the context selection, if any. | | boolean | editable | Since Chrome 35. A flag indicating whether the element is editable (text input, textarea, etc.). | | boolean | (optional) wasChecked | Since Chrome 35. A flag indicating the state of a checkbox or radio item before it was clicked. | | boolean | (optional) checked | Since Chrome 35. A flag indicating the state of a checkbox or radio item after it is clicked. | | | [tabs.Tab](/extensions/tabs#type-Tab) | (optional) tab | The details of the tab where the click took place. If the click did not take place in a tab, this parameter will be missing. | | "},"extensions-printer-provider.html":{"url":"extensions-printer-provider.html","title":"printer-provider","keywords":"","body":"whale.printerProvider Description: The whale.printerProvider API exposes events used by print manager to query printers controlled by extensions, to query their capabilities and to submit print jobs to these printers. Availability: Since Chrome 44. Permissions: \"printerProvider\" ## Summary | Types | |---| | [PrinterInfo](#type-PrinterInfo) | | Events | | [onGetPrintersRequested](#event-onGetPrintersRequested) | | [onGetUsbPrinterInfoRequested](#event-onGetUsbPrinterInfoRequested) | | [onGetCapabilityRequested](#event-onGetCapabilityRequested) | | [onPrintRequested](#event-onPrintRequested) | ## Types ### PrinterInfo | properties | |---| | string | id | Unique printer ID. | | string | name | Printer's human readable name. | | string | (optional) description | Printer's human readable description. | ## Events ### onGetPrintersRequested Event fired when print manager requests printers provided by extensions. #### addListener `whale.printerProvider.onGetPrintersRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(function resultCallback) {...};` | function | resultCallback | |---|---| Callback to return printer list. Every listener must call callback exactly once. The _resultCallback_ parameter should be a function that looks like this: `function(array of [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) printerInfo) {...};` | array of [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) | printerInfo | | |---|---|---| | | ### onGetUsbPrinterInfoRequested Since Chrome 45. Event fired when print manager requests information about a USB device that may be a printer. _Note:_ An application should not rely on this event being fired more than once per device. If a connected device is supported it should be returned in the [onGetPrintersRequested](/extensions/printerProvider#event-onGetPrintersRequested) event. #### addListener `whale.printerProvider.onGetUsbPrinterInfoRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [usb.Device](/extensions/#type-Device) device, function resultCallback) {...};` | [usb.Device](/extensions/#type-Device) | device | |---|---| The USB device. | | function | resultCallback | Callback to return printer info. The receiving listener must call callback exactly once. If the parameter to this callback is undefined that indicates that the application has determined that the device is not supported. The _resultCallback_ parameter should be a function that looks like this: `function( [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) printerInfo) {...};` | [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) | (optional) printerInfo | | |---|---|---| | | ### onGetCapabilityRequested Event fired when print manager requests printer capabilities. #### addListener `whale.printerProvider.onGetCapabilityRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string printerId, function resultCallback) {...};` | string | printerId | |---|---| Unique ID of the printer whose capabilities are requested. | | function | resultCallback | Callback to return device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). The receiving listener must call callback exectly once. The _resultCallback_ parameter should be a function that looks like this: `function(object capabilities) {...};` | object | capabilities | |---|---| Device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). | | | ### onPrintRequested Event fired when print manager requests printing. #### addListener `whale.printerProvider.onPrintRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object printJob, function resultCallback) {...};` | object | printJob | |---|---| The printing request parameters. | string | printerId | |---|---| ID of the printer which should handle the job. | | string | title | The print job title. | | object | ticket | Print ticket in [CJT format](https://developers.google.com/cloud-print/docs/cdd#cjt). | | string | contentType | The document content type. Supported formats are `\"application/pdf\"` and `\"image/pwg-raster\"`. | | Blob | document | Blob containing the document data to print. Format must match |contentType|. | | | function | resultCallback | Callback that should be called when the printing request is completed. The _resultCallback_ parameter should be a function that looks like this: `function(enum of `\"OK\"`, `\"FAILED\"`, `\"INVALID_TICKET\"`, or `\"INVALID_DATA\"` result) {...};` | enum of `\"OK\"`, `\"FAILED\"`, `\"INVALID_TICKET\"`, or `\"INVALID_DATA\"` | result | |---|---| OK Operation completed successfully. FAILED General failure. INVALID_TICKET Print ticket is invalid. For example, ticket is inconsistent with capabilities or extension is not able to handle all settings from the ticket. INVALID_DATA Document is invalid. For example, data may be corrupted or the format is incompatible with the extension. | | | "},"extensions-cookies.html":{"url":"extensions-cookies.html","title":"cookies","keywords":"","body":"whale.cookies Description: Use the whale.cookies API to query and modify cookies, and to be notified when they change. Availability: Since Chrome 20. Permissions: \"cookies\" host permissions | ## Manifest To use the cookies API, you must declare the \"cookies\" permission in your manifest, along with [host permissions](declare_permissions) for any hosts whose cookies you want to access. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"cookies\", \"*://*.google.com\" ]**, ... } ## Examples You can find a simple example of using the cookies API in the [examples/api/cookies](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/cookies/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [SameSiteStatus](#type-SameSiteStatus) | | [Cookie](#type-Cookie) | | [CookieStore](#type-CookieStore) | | [OnChangedCause](#type-OnChangedCause) | | Methods | | [get](#method-get) − `whale.cookies.get(object details, function callback)` | | [getAll](#method-getAll) − `whale.cookies.getAll(object details, function callback)` | | [set](#method-set) − `whale.cookies.set(object details, function callback)` | | [remove](#method-remove) − `whale.cookies.remove(object details, function callback)` | | [getAllCookieStores](#method-getAllCookieStores) − `whale.cookies.getAllCookieStores(function callback)` | | Events | | [onChanged](#event-onChanged) | ## Types ### SameSiteStatus A cookie's 'SameSite' state (https://tools.ietf.org/html/draft-west-first-party-cookies). 'no_restriction' corresponds to a cookie set without a 'SameSite' attribute, 'lax' to 'SameSite=Lax', and 'strict' to 'SameSite=Strict'. | Enum | |---| | `\"no_restriction\"`, `\"lax\"`, or `\"strict\"` | ### Cookie Represents information about an HTTP cookie. | properties | |---| | string | name | The name of the cookie. | | string | value | The value of the cookie. | | string | domain | The domain of the cookie (e.g. \"www.google.com\", \"example.com\"). | | boolean | hostOnly | True if the cookie is a host-only cookie (i.e. a request's host must exactly match the domain of the cookie). | | string | path | The path of the cookie. | | boolean | secure | True if the cookie is marked as Secure (i.e. its scope is limited to secure channels, typically HTTPS). | | boolean | httpOnly | True if the cookie is marked as HttpOnly (i.e. the cookie is inaccessible to client-side scripts). | | [SameSiteStatus](/extensions/cookies#type-SameSiteStatus) | sameSite | Since Chrome 51. The cookie's same-site status (i.e. whether the cookie is sent with cross-site requests). | | boolean | session | True if the cookie is a session cookie, as opposed to a persistent cookie with an expiration date. | | double | (optional) expirationDate | The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies. | | string | storeId | The ID of the cookie store containing this cookie, as provided in getAllCookieStores(). | ### CookieStore Represents a cookie store in the browser. An incognito mode window, for instance, uses a separate cookie store from a non-incognito window. | properties | |---| | string | id | The unique identifier for the cookie store. | | array of integer | tabIds | Identifiers of all the browser tabs that share this cookie store. | ### OnChangedCause The underlying reason behind the cookie's change. If a cookie was inserted, or removed via an explicit call to \"whale.cookies.remove\", \"cause\" will be \"explicit\". If a cookie was automatically removed due to expiry, \"cause\" will be \"expired\". If a cookie was removed due to being overwritten with an already-expired expiration date, \"cause\" will be set to \"expired_overwrite\". If a cookie was automatically removed due to garbage collection, \"cause\" will be \"evicted\". If a cookie was automatically removed due to a \"set\" call that overwrote it, \"cause\" will be \"overwrite\". Plan your response accordingly. | Enum | |---| | `\"evicted\"`, `\"expired\"`, `\"explicit\"`, `\"expired_overwrite\"`, or `\"overwrite\"` | ## Methods ### get `whale.cookies.get(object details, function callback)` Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned. | Parameters | |---| | object | details | Details to identify the cookie being retrieved. | string | url | |---|---| The URL with which the cookie to retrieve is associated. This argument may be a full URL, in which case any data following the URL path (e.g. the query string) is simply ignored. If host permissions for this URL are not specified in the manifest file, the API call will fail. | | string | name | The name of the cookie to retrieve. | | string | (optional) storeId | The ID of the cookie store in which to look for the cookie. By default, the current execution context's cookie store will be used. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Cookie](/extensions/cookies#type-Cookie) cookie) {...};` | [Cookie](/extensions/cookies#type-Cookie) | (optional) cookie | |---|---| Contains details about the cookie. This parameter is null if no such cookie was found. | | ### getAll `whale.cookies.getAll(object details, function callback)` Retrieves all cookies from a single cookie store that match the given information. The cookies returned will be sorted, with those with the longest path first. If multiple cookies have the same path length, those with the earliest creation time will be first. | Parameters | |---| | object | details | Information to filter the cookies being retrieved. | string | (optional) url | |---|---| Restricts the retrieved cookies to those that would match the given URL. | | string | (optional) name | Filters the cookies by name. | | string | (optional) domain | Restricts the retrieved cookies to those whose domains match or are subdomains of this one. | | string | (optional) path | Restricts the retrieved cookies to those whose path exactly matches this string. | | boolean | (optional) secure | Filters the cookies by their Secure property. | | boolean | (optional) session | Filters out session vs. persistent cookies. | | string | (optional) storeId | The cookie store to retrieve cookies from. If omitted, the current execution context's cookie store will be used. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Cookie](/extensions/cookies#type-Cookie) cookies) {...};` | array of [Cookie](/extensions/cookies#type-Cookie) | cookies | |---|---| All the existing, unexpired cookies that match the given cookie info. | | ### set `whale.cookies.set(object details, function callback)` Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist. | Parameters | |---| | object | details | Details about the cookie being set. | string | url | |---|---| The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail. | | string | (optional) name | The name of the cookie. Empty by default if omitted. | | string | (optional) value | The value of the cookie. Empty by default if omitted. | | string | (optional) domain | The domain of the cookie. If omitted, the cookie becomes a host-only cookie. | | string | (optional) path | The path of the cookie. Defaults to the path portion of the url parameter. | | boolean | (optional) secure | Whether the cookie should be marked as Secure. Defaults to false. | | boolean | (optional) httpOnly | Whether the cookie should be marked as HttpOnly. Defaults to false. | | [SameSiteStatus](/extensions/cookies#type-SameSiteStatus) | (optional) sameSite | Since Chrome 51. The cookie's same-site status: defaults to 'no_restriction'. | | double | (optional) expirationDate | The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted, the cookie becomes a session cookie. | | string | (optional) storeId | The ID of the cookie store in which to set the cookie. By default, the cookie is set in the current execution context's cookie store. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Cookie](/extensions/cookies#type-Cookie) cookie) {...};` | [Cookie](/extensions/cookies#type-Cookie) | (optional) cookie | |---|---| Contains details about the cookie that's been set. If setting failed for any reason, this will be \"null\", and \"whale.runtime.lastError\" will be set. | | ### remove `whale.cookies.remove(object details, function callback)` Deletes a cookie by name. | Parameters | |---| | object | details | Information to identify the cookie to remove. | string | url | |---|---| The URL associated with the cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail. | | string | name | The name of the cookie to remove. | | string | (optional) storeId | The ID of the cookie store to look in for the cookie. If unspecified, the cookie is looked for by default in the current execution context's cookie store. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | (optional) details | |---|---| Contains details about the cookie that's been removed. If removal failed for any reason, this will be \"null\", and \"whale.runtime.lastError\" will be set. | string | url | |---|---| The URL associated with the cookie that's been removed. | | string | name | The name of the cookie that's been removed. | | string | storeId | The ID of the cookie store from which the cookie was removed. | | | ### getAllCookieStores `whale.cookies.getAllCookieStores(function callback)` Lists all existing cookie stores. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [CookieStore](/extensions/cookies#type-CookieStore) cookieStores) {...};` | array of [CookieStore](/extensions/cookies#type-CookieStore) | cookieStores | |---|---| All the existing cookie stores. | | ## Events ### onChanged Fired when a cookie is set or removed. As a special case, note that updating a cookie's properties is implemented as a two step process: the cookie to be updated is first removed entirely, generating a notification with \"cause\" of \"overwrite\" . Afterwards, a new cookie is written with the updated values, generating a second notification with \"cause\" \"explicit\". #### addListener `whale.cookies.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object changeInfo) {...};` | object | changeInfo | |---|---| | boolean | removed | |---|---| True if a cookie was removed. | | [Cookie](/extensions/cookies#type-Cookie) | cookie | Information about the cookie that was set or removed. | | [OnChangedCause](/extensions/cookies#type-OnChangedCause) | cause | The underlying reason behind the cookie's change. | | | "},"extensions-privacy.html":{"url":"extensions-privacy.html","title":"privacy","keywords":"","body":"whale.privacy Description: Use the whale.privacy API to control usage of the features in Chrome that can affect a user's privacy. This API relies on the ChromeSetting prototype of the type API for getting and setting Chrome's configuration. Availability: Since Chrome 20. Permissions: \"privacy\" The [Chrome Privacy Whitepaper](http://www.google.com/intl/en/landing/chrome/google-chrome-privacy-whitepaper.pdf) gives background detail regarding the features which this API can control. ## Manifest You must declare the \"privacy\" permission in your extension's [manifest](manifest) to use the API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"privacy\" ]**, ... } ## Usage Reading the current value of a Chrome setting is straightforward. You'll first need to find the property you're interested in, then you'll call `get()` on that object in order to retrieve its current value and your extension's level of control. For example, to determine if Chrome's Autofill feature is enabled, you'd write: whale.privacy.services.autofillEnabled.get({}, function(details) { if (details.value) console.log('Autofill is on!'); else console.log('Autofill is off!'); }); Changing the value of a setting is a little bit more complex, simply because you first must verify that your extension can control the setting. The user won't see any change to their settings if your extension toggles a setting that is either locked to a specific value by enterprise policies (`levelOfControl` will be set to \"not_controllable\"), or if another extension is controlling the value (`levelOfControl` will be set to \"controlled_by_other_extensions\"). The `set()` call will succeed, but the setting will be immediately overridden. As this might be confusing, it is advisable to warn the user when the settings they've chosen aren't practically applied. Full details about extensions' ability to control `ChromeSetting`s can be found under [`whale.types.ChromeSetting`](types#ChromeSetting). This means that you ought to use the `get()` method to determine your level of access, and then only call `set()` if your extension can grab control over the setting (in fact if your extension can't control the setting it's probably a good idea to visually disable the functionality to reduce user confusion): whale.privacy.services.autofillEnabled.get({}, function(details) { if (details.levelOfControl === 'controllable_by_this_extension') { whale.privacy.services.autofillEnabled.set({ value: true }, function() { if (whale.runtime.lastError === undefined) console.log(\"Hooray, it worked!\"); else console.log(\"Sadness!\", whale.runtime.lastError); }); } }); If you're interested in changes to a setting's value, add a listener to its `onChange` event. Among other uses, this will allow you to warn the user if a more recently installed extension grabs control of a setting, or if enterprise policy overrides your control. To listen for changes to Autofill's status, for example, the following code would suffice: whale.privacy.services.autofillEnabled.onChange.addListener( function (details) { // The new value is stored in `details.value`, the new level of control // in `details.levelOfControl`, and `details.incognitoSpecific` will be // `true` if the value is specific to Incognito mode. }); ## Examples For example code, see the [Privacy API samples](samples#search:privacy). ## Summary | Types | |---| | [IPHandlingPolicy](#type-IPHandlingPolicy) | | Properties | | [network](#property-network) | | [services](#property-services) | | [websites](#property-websites) | ## Types ### IPHandlingPolicy The IP handling policy of WebRTC. | Enum | |---| | `\"default\"`, `\"default_public_and_private_interfaces\"`, `\"default_public_interface_only\"`, or `\"disable_non_proxied_udp\"` | ## Properties | object | `whale.privacy.network` | Settings that influence Chrome's handling of network connections in general. | Properties | |---| | --- | | object | networkPredictionEnabled | If enabled, Chrome attempts to speed up your web browsing experience by pre-resolving DNS entries, prerendering sites (``), and preemptively opening TCP and SSL connections to servers. This preference's value is a boolean, defaulting to `true`. | | object | webRTCMultipleRoutesEnabled | **Deprecated** since Chrome 48. Please use privacy.network.webRTCIPHandlingPolicy. This remains for backward compatibility in this release and will be removed in the future. If enabled, Chrome will explore all possible routing options when using WebRTC to find the most performant path, possibly exposing user's private IP address. Otherwise, WebRTC traffic will be routed the same way as regular HTTP. This preference's value is a boolean, defaulting to `true`. | | object | webRTCNonProxiedUdpEnabled | **Deprecated** since Chrome 48. Please use privacy.network.webRTCIPHandlingPolicy. This remains for backward compatibility in this release and will be removed in the future. If enabled, Chrome is allowed to use non-proxied UDP to connect to peers or TURN servers when using WebRTC. Since most proxy servers don't handle UDP, using UDP possibly exposes user's IP address. Turning this off effectively forces WebRTC to only use TCP for now, until UDP proxy support is available in Chrome and such proxies are widely deployed. As a result, it also might hurt media performance and increase the load for proxy servers. This preference's value is a boolean, defaulting to `true`. | | object | webRTCIPHandlingPolicy | Since Chrome 48. Allow users to specify the media performance/privacy tradeoffs which impacts how WebRTC traffic will be routed and how much local address information is exposed. This preference's value is of type IPHandlingPolicy, defaulting to `default`. | | | object | `whale.privacy.services` | Settings that enable or disable features that require third-party network services provided by Google and your default search provider. | Properties | |---| | --- | | object | alternateErrorPagesEnabled | If enabled, Chrome uses a web service to help resolve navigation errors. This preference's value is a boolean, defaulting to `true`. | | object | autofillEnabled | If enabled, Chrome offers to automatically fill in forms. This preference's value is a boolean, defaulting to `true`. | | object | hotwordSearchEnabled | Since Chrome 42. If enabled, Chrome will enable 'OK, Google' to start a voice search. This preference's value is a boolean, defaulting to `true`. | | object | passwordSavingEnabled | Since Chrome 38. If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to `true`. | | object | safeBrowsingEnabled | If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to `true`. | | object | safeBrowsingExtendedReportingEnabled | Since Chrome 42. If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to `false`. | | object | searchSuggestEnabled | If enabled, Chrome sends the text you type into the Omnibox to your default search engine, which provides predictions of websites and searches that are likely completions of what you've typed so far. This preference's value is a boolean, defaulting to `true`. | | object | spellingServiceEnabled | If enabled, Chrome uses a web service to help correct spelling errors. This preference's value is a boolean, defaulting to `false`. | | object | translationServiceEnabled | If enabled, Chrome offers to translate pages that aren't in a language you read. This preference's value is a boolean, defaulting to `true`. | | | object | `whale.privacy.websites` | Settings that determine what information Chrome makes available to websites. | Properties | |---| | --- | | object | thirdPartyCookiesAllowed | If disabled, Chrome blocks third-party sites from setting cookies. The value of this preference is of type boolean, and the default value is `true`. | | object | hyperlinkAuditingEnabled | If enabled, Chrome sends auditing pings when requested by a website (``). The value of this preference is of type boolean, and the default value is `true`. | | object | referrersEnabled | If enabled, Chrome sends `referer` headers with your requests. Yes, the name of this preference doesn't match the misspelled header. No, we're not going to change it. The value of this preference is of type boolean, and the default value is `true`. | | object | protectedContentEnabled | Since Chrome 21. **Available on Windows and ChromeOS only**: If enabled, Chrome provides a unique ID to plugins in order to run protected content. The value of this preference is of type boolean, and the default value is `true`. | | "},"extensions-debugger.html":{"url":"extensions-debugger.html","title":"debugger","keywords":"","body":"whale.debugger Description: The whale.debugger API serves as an alternate transport for Chrome's remote debugging protocol. Use whale.debugger to attach to one or more tabs to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee tabId to target tabs with sendCommand and route events by tabId from onEvent callbacks. Availability: Since Chrome 20. Permissions: \"debugger\" ## Notes As of today, attaching to the tab by means of the debugger API and using embedded Chrome DevTools with that tab are mutually exclusive. If user invokes Chrome DevTools while extension is attached to the tab, debugging session is terminated. Extension can re-establish it later. ## Manifest You must declare the \"debugger\" permission in your extension's manifest to use this API. { \"name\": \"My extension\", ... ** \"permissions\": [ \"debugger\", ]**, ... } ## Examples You can find samples of this API in [Samples](samples#search:debugger). ## Summary | Types | |---| | [Debuggee](#type-Debuggee) | | [TargetInfoType](#type-TargetInfoType) | | [DetachReason](#type-DetachReason) | | [TargetInfo](#type-TargetInfo) | | Methods | | [attach](#method-attach) − `whale.debugger.attach( Debuggee target, string requiredVersion, function callback)` | | [detach](#method-detach) − `whale.debugger.detach( Debuggee target, function callback)` | | [sendCommand](#method-sendCommand) − `whale.debugger.sendCommand( Debuggee target, string method, object commandParams, function callback)` | | [getTargets](#method-getTargets) − `whale.debugger.getTargets(function callback)` | | Events | | [onEvent](#event-onEvent) | | [onDetach](#event-onDetach) | ## Types ### Debuggee Debuggee identifier. Either tabId or extensionId must be specified | properties | |---| | integer | (optional) tabId | The id of the tab which you intend to debug. | | string | (optional) extensionId | Since Chrome 27. The id of the extension which you intend to debug. Attaching to an extension background page is only possible when 'silent-debugger-extension-api' flag is enabled on the target browser. | | string | (optional) targetId | Since Chrome 28. The opaque id of the debug target. | ### TargetInfoType Target type. | Enum | |---| | `\"page\"`, `\"background_page\"`, `\"worker\"`, or `\"other\"` | ### DetachReason Connection termination reason. | Enum | |---| | `\"target_closed\"`, `\"canceled_by_user\"`, or `\"replaced_with_devtools\"` | ### TargetInfo Since Chrome 28. Debug target information | properties | |---| | [TargetInfoType](/extensions/debugger#type-TargetInfoType) | type | Target type. | | string | id | Target id. | | integer | (optional) tabId | Since Chrome 30. The tab id, defined if type == 'page'. | | string | (optional) extensionId | Since Chrome 30. The extension id, defined if type = 'background_page'. | | boolean | attached | True if debugger is already attached. | | string | title | Target page title. | | string | url | Target URL. | | string | (optional) faviconUrl | Target favicon URL. | ## Methods ### attach `whale.debugger.attach( [Debuggee](/extensions/debugger#type-Debuggee) target, string requiredVersion, function callback)` Attaches debugger to the given target. | Parameters | |---| | [Debuggee](/extensions/debugger#type-Debuggee) | target | Debugging target to which you want to attach. | | string | requiredVersion | Required debugging protocol version (\"0.1\"). One can only attach to the debuggee with matching major version and greater or equal minor version. List of the protocol versions can be obtained [here](https://developer.whale.com/devtools/docs/debugger-protocol). | | function | (optional) callback | Called once the attach operation succeeds or fails. Callback receives no arguments. If the attach fails, [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### detach `whale.debugger.detach( [Debuggee](/extensions/debugger#type-Debuggee) target, function callback)` Detaches debugger from the given target. | Parameters | |---| | [Debuggee](/extensions/debugger#type-Debuggee) | target | Debugging target from which you want to detach. | | function | (optional) callback | Called once the detach operation succeeds or fails. Callback receives no arguments. If the detach fails, [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### sendCommand `whale.debugger.sendCommand( [Debuggee](/extensions/debugger#type-Debuggee) target, string method, object commandParams, function callback)` Sends given command to the debugging target. | Parameters | |---| | [Debuggee](/extensions/debugger#type-Debuggee) | target | Debugging target to which you want to send the command. | | string | method | Method name. Should be one of the methods defined by the [remote debugging protocol](https://developer.whale.com/devtools/docs/debugger-protocol). | | object | (optional) commandParams | Since Chrome 22. JSON object with request parameters. This object must conform to the remote debugging params scheme for given method. | | function | (optional) callback | Response body. If an error occurs while posting the message, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. If you specify the _callback_ parameter, it should be a function that looks like this: `function(object result) {...};` | object | (optional) result | |---|---| JSON object with the response. Structure of the response varies depending on the method name and is defined by the 'returns' attribute of the command description in the remote debugging protocol. | | ### getTargets `whale.debugger.getTargets(function callback)` Since Chrome 28. Returns the list of available debug targets. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [TargetInfo](/extensions/debugger#type-TargetInfo) result) {...};` | array of [TargetInfo](/extensions/debugger#type-TargetInfo) | result | |---|---| Array of TargetInfo objects corresponding to the available debug targets. | | ## Events ### onEvent Fired whenever debugging target issues instrumentation event. #### addListener `whale.debugger.onEvent.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Debuggee](/extensions/debugger#type-Debuggee) source, string method, object params) {...};` | [Debuggee](/extensions/debugger#type-Debuggee) | source | |---|---| The debuggee that generated this event. | | string | method | Method name. Should be one of the notifications defined by the [remote debugging protocol](https://developer.whale.com/devtools/docs/debugger-protocol). | | object | (optional) params | JSON object with the parameters. Structure of the parameters varies depending on the method name and is defined by the 'parameters' attribute of the event description in the remote debugging protocol. | | ### onDetach Fired when browser terminates debugging session for the tab. This happens when either the tab is being closed or Chrome DevTools is being invoked for the attached tab. #### addListener `whale.debugger.onDetach.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Debuggee](/extensions/debugger#type-Debuggee) source, [DetachReason](/extensions/debugger#type-DetachReason) reason) {...};` | [Debuggee](/extensions/debugger#type-Debuggee) | source | |---|---| The debuggee that was detached. | | [DetachReason](/extensions/debugger#type-DetachReason) | reason | Since Chrome 24. Connection termination reason. | | "},"extensions-processes.html":{"url":"extensions-processes.html","title":"processes","keywords":"","body":"whale.processes Description: Use the whale.processes API to interact with the browser's processes. Availability: Dev channel only. Learn more. Permissions: \"processes\" ## Summary | Types | |---| | [Cache](#type-Cache) | | [Process](#type-Process) | | Methods | | [getProcessIdForTab](#method-getProcessIdForTab) − `whale.processes.getProcessIdForTab(integer tabId, function callback)` | | [terminate](#method-terminate) − `whale.processes.terminate(integer processId, function callback)` | | [getProcessInfo](#method-getProcessInfo) − `whale.processes.getProcessInfo(integer or array of integer processIds, boolean includeMemory, function callback)` | | Events | | [onUpdated](#event-onUpdated) | | [onUpdatedWithMemory](#event-onUpdatedWithMemory) | | [onCreated](#event-onCreated) | | [onUnresponsive](#event-onUnresponsive) | | [onExited](#event-onExited) | ## Types ### Cache | properties | |---| | double | size | The size of the cache, in bytes. | | double | liveSize | The part of the cache that is utilized, in bytes. | ### Process | properties | |---| | integer | id | Unique ID of the process provided by the browser. | | integer | osProcessId | The ID of the process, as provided by the OS. | | enum of `\"browser\"`, `\"renderer\"`, `\"extension\"`, `\"notification\"`, `\"plugin\"`, `\"worker\"`, `\"nacl\"`, `\"utility\"`, `\"gpu\"`, or `\"other\"` | type | The type of process. | | string | profile | The profile which the process is associated with. | | integer | naclDebugPort | The debugging port for Native Client processes. Zero for other process types and for NaCl processes that do not have debugging enabled. | | array of object | tasks | Array of TaskInfos representing the tasks running on this process. #### Properties of each object | string | title | |---|---| The title of the task. | | integer | (optional) tabId | Optional tab ID, if this task represents a tab running on a renderer process. | | | double | (optional) cpu | The most recent measurement of the process’s CPU usage, expressed as the percentage of a single CPU core used in total, by all of the process’s threads. This gives a value from zero to CpuInfo.numOfProcessors*100, which can exceed 100% in multi-threaded processes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | double | (optional) network | The most recent measurement of the process network usage, in bytes per second. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | double | (optional) privateMemory | The most recent measurement of the process private memory usage, in bytes. Only available when receiving the object as part of a callback from onUpdatedWithMemory or getProcessInfo with the includeMemory flag. | | double | (optional) jsMemoryAllocated | The most recent measurement of the process JavaScript allocated memory, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | double | (optional) jsMemoryUsed | The most recent measurement of the process JavaScript memory used, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | double | (optional) sqliteMemory | The most recent measurement of the process’s SQLite memory usage, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | [Cache](/extensions/processes#type-Cache) | (optional) imageCache | The most recent information about the image cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | [Cache](/extensions/processes#type-Cache) | (optional) scriptCache | The most recent information about the script cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | | [Cache](/extensions/processes#type-Cache) | (optional) cssCache | The most recent information about the CSS cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory. | ## Methods ### getProcessIdForTab `whale.processes.getProcessIdForTab(integer tabId, function callback)` Returns the ID of the renderer process for the specified tab. | Parameters | |---| | integer | tabId | The ID of the tab for which the renderer process ID is to be returned. | | function | callback | A callback to return the ID of the renderer process of a tab. The _callback_ parameter should be a function that looks like this: `function(integer processId) {...};` | integer | processId | |---|---| Process ID of the tab's renderer process. | | ### terminate `whale.processes.terminate(integer processId, function callback)` Terminates the specified renderer process. Equivalent to visiting about:crash, but without changing the tab's URL. | Parameters | |---| | integer | processId | The ID of the process to be terminated. | | function | (optional) callback | A callback to report the status of the termination. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean didTerminate) {...};` | boolean | didTerminate | |---|---| True if terminating the process was successful, and false otherwise. | | ### getProcessInfo `whale.processes.getProcessInfo(integer or array of integer processIds, boolean includeMemory, function callback)` Retrieves the process information for each process ID specified. | Parameters | |---| | integer or array of integer | processIds | The list of process IDs or single process ID for which to return the process information. An empty list indicates all processes are requested. | | boolean | includeMemory | True if detailed memory usage is required. Note, collecting memory usage information incurs extra CPU usage and should only be queried for when needed. | | function | callback | A callback called when the processes information is collected. The _callback_ parameter should be a function that looks like this: `function(object processes) {...};` | object | processes | |---|---| A dictionary of [Process](/extensions/processes#type-Process) objects for each requested process that is a live child process of the current browser process, indexed by process ID. Metrics requiring aggregation over time will not be populated in each Process object. | | ## Events ### onUpdated Fired each time the Task Manager updates its process statistics, providing the dictionary of updated Process objects, indexed by process ID. #### addListener `whale.processes.onUpdated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object processes) {...};` | object | processes | |---|---| A dictionary of updated [Process](/extensions/processes#type-Process) objects for each live process in the browser, indexed by process ID. Metrics requiring aggregation over time will be populated in each Process object. | | ### onUpdatedWithMemory Fired each time the Task Manager updates its process statistics, providing the dictionary of updated Process objects, indexed by process ID. Identical to onUpdate, with the addition of memory usage details included in each Process object. Note, collecting memory usage information incurs extra CPU usage and should only be listened for when needed. #### addListener `whale.processes.onUpdatedWithMemory.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object processes) {...};` | object | processes | |---|---| A dictionary of updated [Process](/extensions/processes#type-Process) objects for each live process in the browser, indexed by process ID. Memory usage details will be included in each Process object. | | ### onCreated Fired each time a process is created, providing the corrseponding Process object. #### addListener `whale.processes.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Process](/extensions/processes#type-Process) process) {...};` | [Process](/extensions/processes#type-Process) | process | |---|---| Details of the process that was created. Metrics requiring aggregation over time will not be populated in the object. | | ### onUnresponsive Fired each time a process becomes unresponsive, providing the corrseponding Process object. #### addListener `whale.processes.onUnresponsive.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Process](/extensions/processes#type-Process) process) {...};` | [Process](/extensions/processes#type-Process) | process | |---|---| Details of the unresponsive process. Metrics requiring aggregation over time will not be populated in the object. Only available for renderer processes. | | ### onExited Fired each time a process is terminated, providing the type of exit. #### addListener `whale.processes.onExited.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer processId, integer exitType, integer exitCode) {...};` | integer | processId | |---|---| The ID of the process that exited. | | integer | exitType | The type of exit that occurred for the process - normal, abnormal, killed, crashed. Only available for renderer processes. | | integer | exitCode | The exit code if the process exited abnormally. Only available for renderer processes. | | "},"extensions-declarative-content.html":{"url":"extensions-declarative-content.html","title":"declarative-content","keywords":"","body":"whale.declarativeContent Description: Use the whale.declarativeContent API to take actions depending on the content of a page, without requiring permission to read the page's content. Availability: Since Chrome 33. Permissions: \"declarativeContent\" Learn More: Declarative Events activeTab | ## Usage The Declarative Content API allows you to show your extension's [page action](/extensions/pageAction) depending on the URL of a web page and the CSS selectors its content matches, without needing to take a [host permission](declare_permissions#host-permissions) or inject a [content script](content_scripts). Use the [activeTab](activeTab) permission in order to be able to interact with a page after the user clicks on your page action. If you need more precise control over when your page action appears or you need to change its appearance to match the current tab before the user clicks on it, you'll have to keep using the [pageAction](/extensions/pageAction) API. ## Rules As a [declarative API](events#declarative), this API lets you register rules on the `[onPageChanged](/extensions/declarativeContent#event-onPageChanged)` [event](/extensions/events#type-Event) object which take an action (`[ShowPageAction](/extensions/declarativeContent#type-ShowPageAction)` and `[SetIcon](/extensions/declarativeContent#type-SetIcon)`) when a set of conditions, represented as a `[PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher)`, are met. The `[PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher)` matches web pages if and only if all listed criteria are met. The following rule would show a page action for pages on `https://www.google.com/` when a password field is present on it: var rule1 = { conditions: [ new [whale.declarativeContent.PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher)({ [pageUrl](/extensions/declarativeContent#property-PageStateMatcher-pageUrl): { [hostEquals](/extensions/events#property-UrlFilter-hostEquals): 'www.google.com', [schemes](/extensions/events#property-UrlFilter-schemes): ['https'] }, [css](/extensions/declarativeContent#property-PageStateMatcher-css): [\"input[type='password']\"] }) ], actions: [ new [whale.declarativeContent.ShowPageAction](/extensions/declarativeContent#type-ShowPageAction)() ] }; **Note:** All conditions and actions are created via a constructor as shown in the example above. In order to also show a page action for sites with a video, you can add a second condition, as each condition is sufficient to trigger all specified actions: var rule2 = { conditions: [ new [whale.declarativeContent.PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher)({ [pageUrl](/extensions/declarativeContent#property-PageStateMatcher-pageUrl): { [hostEquals](/extensions/events#property-UrlFilter-hostEquals): 'www.google.com', [schemes](/extensions/events#property-UrlFilter-schemes): ['https'] }, [css](/extensions/declarativeContent#property-PageStateMatcher-css): [\"input[type='password']\"] })**, new [whale.declarativeContent.PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher)({ [css](/extensions/declarativeContent#property-PageStateMatcher-css): [\"video\"] })** ], actions: [ new [whale.declarativeContent.ShowPageAction](/extensions/declarativeContent#type-ShowPageAction)() ] }; [Added rules](events#addingrules) are saved across browser restarts, so register them as follows: [whale.runtime.onInstalled](/extensions/runtime#event-onInstalled).addListener(function(details) { [whale.declarativeContent.onPageChanged](/extensions/declarativeContent#event-onPageChanged).[removeRules](events#removingrules)(undefined, function() { [whale.declarativeContent.onPageChanged](/extensions/declarativeContent#event-onPageChanged).[addRules](events#addingrules)([rule2]); }); }); **Note:** You should always register or unregister rules in bulk rather than individually because each of these operations recreates internal data structures. This re-creation is computationally expensive but facilitates a faster matching algorithm. Combine the above rule with the [activeTab](activeTab) permission to create an extension that doesn't need any install-time permissions but can invite the user to click its page action on relevant pages and can run on those pages when the user clicks the page action. ## CSS Matching [PageStateMatcher.css](/extensions/declarativeContent#property-PageStateMatcher-css) conditions must be _[compound selectors](http://www.w3.org/TR/selectors4/#compound)_, meaning that you can't include [combinators](http://www.w3.org/community/webed/wiki/CSS/Selectors#Combinators) like whitespace or \"`>`\" in your selectors. This helps Chrome match the selectors more efficiently. | Compound Selectors (OK) | Complex Selectors (Not OK) | |---|---| | `a` | `div p` | | `iframe.special[src^='http']` | `p>span.highlight` | | `ns|*` | `p + ol` | | `#abcd:checked` | `p::first-line` | CSS conditions only match displayed elements: if an element that matches your selector is `display:none` or one of its parent elements is `display:none`, it doesn't cause the condition to match. Elements styled with `visibility:hidden`, positioned off-screen, or hidden by other elements can still make your condition match. ## Bookmarked State Matching The [PageStateMatcher.isBookmarked](/extensions/declarativeContent#property-PageStateMatcher-isBookmarked) condition allows matching of the bookmarked state of the current URL in the user's profile. To make use of this condition the \"bookmarks\" permission must be declared in the [extension manifest](manifest) ## Summary | Types | |---| | [PageStateMatcherInstanceType](#type-PageStateMatcherInstanceType) | | [ShowPageActionInstanceType](#type-ShowPageActionInstanceType) | | [SetIconInstanceType](#type-SetIconInstanceType) | | [RequestContentScriptInstanceType](#type-RequestContentScriptInstanceType) | | [PageStateMatcher](#type-PageStateMatcher) | | [ShowPageAction](#type-ShowPageAction) | | [SetIcon](#type-SetIcon) | | [RequestContentScript](#type-RequestContentScript) | | Events | | [onPageChanged](#event-onPageChanged) | ## Types ### PageStateMatcherInstanceType | Enum | |---| | `\"declarativeContent.PageStateMatcher\"` | ### ShowPageActionInstanceType | Enum | |---| | `\"declarativeContent.ShowPageAction\"` | ### SetIconInstanceType | Enum | |---| | `\"declarativeContent.SetIcon\"` | ### RequestContentScriptInstanceType | Enum | |---| | `\"declarativeContent.RequestContentScript\"` | ### PageStateMatcher Matches the state of a web page by various criteria. | properties | |---| | object | (optional) pageUrl | Matches if the condition of the UrlFilter are fulfilled for the top-level URL of the page. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | | | array of string | (optional) css | Matches if all of the CSS selectors in the array match displayed elements in a frame with the same origin as the page's main frame. All selectors in this array must be [compound selectors](http://www.w3.org/TR/selectors4/#compound) to speed up matching. Note that listing hundreds of CSS selectors or CSS selectors that match hundreds of times per page can still slow down web sites. | | boolean | (optional) isBookmarked | Since Chrome 45. Matches if the bookmarked state of the page is equal to the specified value. Requres the [bookmarks permission](declare_permissions). | ### ShowPageAction Declarative event action that shows the extension's [page action](/extensions/pageAction) while the corresponding conditions are met. This action can be used without [host permissions](declare_permissions#host-permissions), but the extension must have a page action. If the extension takes the [activeTab](activeTab.html) permission, a click on the page action will grant access to the active tab. ### SetIcon Since Chrome 39. Declarative event action that sets the n-dip square icon for the extension's [page action](/extensions/pageAction) or [browser action](/extensions/browserAction) while the corresponding conditions are met. This action can be used without [host permissions](declare_permissions.html#host-permissions), but the extension must have page or browser action. Exactly one of `imageData` or `path` must be specified. Both are dictionaries mapping a number of pixels to an image representation. The image representation in `imageData` is an[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) object, for example from a `` element, while the image representation in `path` is the path to an image file relative to the extension's manifest. If `scale` screen pixels fit into a device-independent pixel, the `scale * n` icon will be used. If that scale is missing, another image will be resized to the needed size. | properties | |---| | ImageData or object | (optional) imageData | Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}' | ### RequestContentScript Since Chrome 38. Declarative event action that injects a content script. **WARNING:** This action is still experimental and is not supported on stable builds of Chrome. | properties | |---| | array of string | (optional) css | Names of CSS files to be injected as a part of the content script. | | array of string | (optional) js | Names of Javascript files to be injected as a part of the content script. | | boolean | (optional) allFrames | Whether the content script runs in all frames of the matching page, or only the top frame. Default is false. | | boolean | (optional) matchAboutBlank | Whether to insert the content script on about:blank and about:srcdoc. Default is false. | ## Events ### onPageChanged Provides the [Declarative Event API](events#declarative) consisting of [addRules](/extensions/events#method-Event-addRules), [removeRules](/extensions/events#method-Event-removeRules), and [getRules](/extensions/events#method-Event-addRules). `whale.declarativeContent.onPageChanged.addRules(array of [Rule](/extensions/events#type-Rule) rules, function callback)` `whale.declarativeContent.onPageChanged.removeRules(array of string ruleIdentifiers, function callback)` `whale.declarativeContent.onPageChanged.getRules(array of string ruleIdentifiers, function callback)` #### Supported conditions * [declarativeContent.PageStateMatcher](/extensions/declarativeContent#type-PageStateMatcher) #### Supported actions * [declarativeContent.RequestContentScript](/extensions/declarativeContent#type-RequestContentScript) * [declarativeContent.SetIcon](/extensions/declarativeContent#type-SetIcon) * [declarativeContent.ShowPageAction](/extensions/declarativeContent#type-ShowPageAction) "},"extensions-proxy.html":{"url":"extensions-proxy.html","title":"proxy","keywords":"","body":"whale.proxy Description: Use the whale.proxy API to manage Chrome's proxy settings. This API relies on the ChromeSetting prototype of the type API for getting and setting the proxy configuration. Availability: Since Chrome 20. Permissions: \"proxy\" ## Manifest You must declare the \"proxy\" permission in the [extension manifest](manifest) to use the proxy settings API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"proxy\" ]**, ... } ## Objects and properties Proxy settings are defined in a [proxy.ProxyConfig](/extensions/proxy#type-ProxyConfig) object. Depending on Chrome's proxy settings, the settings may contain [proxy.ProxyRules](/extensions/proxy#type-ProxyRules) or a [proxy.PacScript](/extensions/proxy#type-PacScript). ### Proxy modes A ProxyConfig object's `mode` attribute determines the overall behavior of Chrome with regards to proxy usage. It can take the following values: `direct` In `direct` mode all connections are created directly, without any proxy involved. This mode allows no further parameters in the `ProxyConfig` object. `auto_detect` In `auto_detect` mode the proxy configuration is determined by a PAC script that can be downloaded at [http://wpad/wpad.dat](http://wpad/wpad.dat). This mode allows no further parameters in the `ProxyConfig` object. `pac_script` In `pac_script` mode the proxy configuration is determined by a PAC script that is either retrieved from the URL specified in the [proxy.PacScript](/extensions/proxy#type-PacScript) object or taken literally from the `data` element specified in the [proxy.PacScript](/extensions/proxy#type-PacScript) object. Besides this, this mode allows no further parameters in the `ProxyConfig` object. `fixed_servers` In `fixed_servers` mode the proxy configuration is codified in a [proxy.ProxyRules](/extensions/proxy#type-ProxyRules) object. Its structure is described in [Proxy rules](#proxy_rules). Besides this, the `fixed_servers` mode allows no further parameters in the `ProxyConfig` object. `system` In `system` mode the proxy configuration is taken from the operating system. This mode allows no further parameters in the `ProxyConfig` object. Note that the `system` mode is different from setting no proxy configuration. In the latter case, Chrome falls back to the system settings only if no command-line options influence the proxy configuration. ### Proxy rules The [proxy.ProxyRules](/extensions/proxy#type-ProxyRules) object can contain either a `singleProxy` attribute or a subset of `proxyForHttp`, `proxyForHttps`, `proxyForFtp`, and `fallbackProxy`. In the first case, HTTP, HTTPS and FTP traffic is proxied through the specified proxy server. Other traffic is sent directly. In the latter case the behavior is slightly more subtle: If a proxy server is configured for the HTTP, HTTPS or FTP protocol, the respective traffic is proxied through the specified server. If no such proxy server is specified or traffic uses a different protocol than HTTP, HTTPS or FTP, the `fallbackProxy` is used. If no `fallbackProxy` is specified, traffic is sent directly without a proxy server. ### Proxy server objects A proxy server is configured in a [proxy.ProxyServer](/extensions/proxy#type-ProxyServer) object. The connection to the proxy server (defined by the `host` attribute) uses the protocol defined in the `scheme` attribute. If no `scheme` is specified, the proxy connection defaults to `http`. If no `port` is defined in a [proxy.ProxyServer](/extensions/proxy#type-ProxyServer) object, the port is derived from the scheme. The default ports are: | Scheme | Port | |---|---| | http | 80 | | https | 443 | | socks4 | 1080 | | socks5 | 1080 | ### Bypass list Individual servers may be excluded from being proxied with the `bypassList`. This list may contain the following entries: `[__://]__[:__]` Match all hostnames that match the pattern __. A leading `\".\"` is interpreted as a `\"*.\"`. Examples: `\"foobar.com\", \"*foobar.com\", \"*.foobar.com\", \"*foobar.com:99\", \"https://x.*.y.com:99\"`. | Pattern | Matches | Does not match | |---|---|---| | `\".foobar.com\"` | `\"www.foobar.com\"` | `\"foobar.com\"` | | `\"*.foobar.com\"` | `\"www.foobar.com\"` | `\"foobar.com\"` | | `\"foobar.com\"` | `\"foobar.com\"` | `\"www.foobar.com\"` | | `\"*foobar.com\"` | `\"foobar.com\"`, `\"www.foobar.com\"`, `\"foofoobar.com\"` | | `[__://]__[:__]` Match URLs that are IP address literals. Conceptually this is the similar to the first case, but with special cases to handle IP literal canonicalization. For example, matching on \"[0:0:0::1]\" is the same as matching on \"[::1]\" because the IPv6 canonicalization is done internally. Examples: `\"127.0.1\", \"[0:0::1]\", \"[::1]\", \"http://[::1]:99\"` `__/__` Match any URL containing an IP literal within the given range. The IP range is specified using CIDR notation. Examples: `\"192.168.1.1/16\", \"fefe:13::abc/33\"` `` Match local addresses. An address is local if the host is \"127.0.0.1\", \"::1\", or \"localhost\". Example: `\"\"` ## Examples The following code sets a SOCKS 5 proxy for HTTP connections to all servers but foobar.com and uses direct connections for all other protocols. The settings apply to regular and incognito windows, as incognito windows inherit settings from regular windows. Please also consult the [Types API](types#ChromeSetting) documentation. var config = { mode: \"fixed_servers\", rules: { proxyForHttp: { scheme: \"socks5\", host: \"1.2.3.4\" }, bypassList: [\"foobar.com\"] } }; whale.proxy.settings.set( {value: config, scope: 'regular'}, function() {}); The following code sets a custom PAC script. var config = { mode: \"pac_script\", pacScript: { data: \"function FindProxyForURL(url, host) {\\n\" + \" if (host == 'foobar.com')\\n\" + \" return 'PROXY blackhole:80';\\n\" + \" return 'DIRECT';\\n\" + \"}\" } }; whale.proxy.settings.set( {value: config, scope: 'regular'}, function() {}); The next snippet queries the currently effective proxy settings. The effective proxy settings can be determined by another extension or by a policy. See the [Types API](types#ChromeSetting) documentation for details. whale.proxy.settings.get( {'incognito': false}, function(config) {console.log(JSON.stringify(config));}); Note that the `value` object passed to `set()` is not identical to the `value` object passed to callback function of `get()`. The latter will contain a `rules.proxyForHttp.port` element. ## Summary | Types | |---| | [Scheme](#type-Scheme) | | [Mode](#type-Mode) | | [ProxyServer](#type-ProxyServer) | | [ProxyRules](#type-ProxyRules) | | [PacScript](#type-PacScript) | | [ProxyConfig](#type-ProxyConfig) | | Properties | | [settings](#property-settings) | | Events | | [onProxyError](#event-onProxyError) | ## Types ### Scheme | Enum | |---| | `\"http\"`, `\"https\"`, `\"quic\"`, `\"socks4\"`, or `\"socks5\"` | ### Mode | Enum | |---| | `\"direct\"`, `\"auto_detect\"`, `\"pac_script\"`, `\"fixed_servers\"`, or `\"system\"` | ### ProxyServer An object encapsulating a single proxy server's specification. | properties | |---| | [Scheme](/extensions/proxy#type-Scheme) | (optional) scheme | The scheme (protocol) of the proxy server itself. Defaults to 'http'. | | string | host | The URI of the proxy server. This must be an ASCII hostname (in Punycode format). IDNA is not supported, yet. | | integer | (optional) port | The port of the proxy server. Defaults to a port that depends on the scheme. | ### ProxyRules An object encapsulating the set of proxy rules for all protocols. Use either 'singleProxy' or (a subset of) 'proxyForHttp', 'proxyForHttps', 'proxyForFtp' and 'fallbackProxy'. | properties | |---| | [ProxyServer](/extensions/proxy#type-ProxyServer) | (optional) singleProxy | The proxy server to be used for all per-URL requests (that is http, https, and ftp). | | [ProxyServer](/extensions/proxy#type-ProxyServer) | (optional) proxyForHttp | The proxy server to be used for HTTP requests. | | [ProxyServer](/extensions/proxy#type-ProxyServer) | (optional) proxyForHttps | The proxy server to be used for HTTPS requests. | | [ProxyServer](/extensions/proxy#type-ProxyServer) | (optional) proxyForFtp | The proxy server to be used for FTP requests. | | [ProxyServer](/extensions/proxy#type-ProxyServer) | (optional) fallbackProxy | The proxy server to be used for everthing else or if any of the specific proxyFor... is not specified. | | array of string | (optional) bypassList | List of servers to connect to without a proxy server. | ### PacScript An object holding proxy auto-config information. Exactly one of the fields should be non-empty. | properties | |---| | string | (optional) url | URL of the PAC file to be used. | | string | (optional) data | A PAC script. | | boolean | (optional) mandatory | If true, an invalid PAC script will prevent the network stack from falling back to direct connections. Defaults to false. | ### ProxyConfig An object encapsulating a complete proxy configuration. | properties | |---| | [ProxyRules](/extensions/proxy#type-ProxyRules) | (optional) rules | The proxy rules describing this configuration. Use this for 'fixed_servers' mode. | | [PacScript](/extensions/proxy#type-PacScript) | (optional) pacScript | The proxy auto-config (PAC) script for this configuration. Use this for 'pac_script' mode. | | [Mode](/extensions/proxy#type-Mode) | mode | 'direct' = Never use a proxy 'auto_detect' = Auto detect proxy settings 'pac_script' = Use specified PAC script 'fixed_servers' = Manually specify proxy servers 'system' = Use system proxy settings | ## Properties | object | `whale.proxy.settings` | Proxy settings to be used. The value of this setting is a ProxyConfig object. | Functions | |---| | --- | | ### get `settings.get(object details, function callback)` Since Chrome 21. Gets the value of a setting. | Parameters | |---| | object | details | Which setting to consider. | boolean | (optional) incognito | |---|---| Whether to return the value that applies to the incognito session (default false). | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| Details of the currently effective value. | any | value | |---|---| The value of the setting. | | enum of `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | levelOfControl | The level of control of the setting. | | boolean | (optional) incognitoSpecific | Whether the effective value is specific to the incognito session. This property will _only_ be present if the incognito property in the details parameter of `get()` was true. | | | | | ### set `settings.set(object details, function callback)` Since Chrome 21. Sets the value of a setting. | Parameters | |---| | object | details | Which setting to change. | any | value | |---|---| The value of the setting. Note that every setting has a specific value type, which is described together with the setting. An extension should _not_ set a value of a different type. | | enum of `\"regular\"`, `\"regular_only\"`, `\"incognito_persistent\"`, or `\"incognito_session_only\"` | (optional) scope | Where to set the setting (default: regular). | | | function | (optional) callback | Called at the completion of the set operation. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | ### clear `settings.clear(object details, function callback)` Since Chrome 21. Clears the setting, restoring any default value. | Parameters | |---| | object | details | Which setting to clear. | enum of `\"regular\"`, `\"regular_only\"`, `\"incognito_persistent\"`, or `\"incognito_session_only\"` | (optional) scope | |---|---| Where to clear the setting (default: regular). | | | function | (optional) callback | Called at the completion of the clear operation. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | ## Events ### onProxyError Notifies about proxy errors. #### addListener `whale.proxy.onProxyError.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | boolean | fatal | |---|---| If true, the error was fatal and the network transaction was aborted. Otherwise, a direct connection is used instead. | | string | error | The error description. | | string | details | Additional details about the error such as a JavaScript runtime error. | | | "},"extensions-declarative-web-request.html":{"url":"extensions-declarative-web-request.html","title":"declarative-web-request","keywords":"","body":"whale.declarativeWebRequest Description: Note: this API is currently on hold, without concrete plans to move to stable. Use the whale.declarativeWebRequest API to intercept, block, or modify requests in-flight. It is significantly faster than the whale.webRequest API because you can register rules that are evaluated in the browser rather than the JavaScript engine with reduces roundtrip latencies and allows higher efficiency. Availability: Beta and Dev channels only. Learn more. Permissions: \"declarativeWebRequest\" host permissions | ## Manifest You must declare the \"declarativeWebRequest\" permission in the [extension manifest](manifest) to use this API, along with [host permissions](declare_permissions). { \"name\": \"My extension\", ... ** \"permissions\": [ \"declarativeWebRequest\", \"*://*/*\" ]**, ... } Note that certain types of non-sensitive actions do not require host permissions: * `CancelRequest` * `IgnoreRules` * `RedirectToEmptyDocument` * `RedirectToTransparentImage` The `SendMessageToExtension` action requires host permissions for any hosts whose network requests you want to trigger a message. All other actions require host permissions to all URLs. As an example, if `\"*://*.google.com/*\"` is the only host permission an extension has, than such an extension may set up a rule to * cancel a request to \"http://www.google.com\" or \"http://anything.else.com\" * send a message when navigating to \"http://www.google.com\" but not to \"http://something.else.com\" The extension cannot set up a rule to redirect \"http://www.google.com\" to \"http://mail.google.com\". ## Rules The Declarative Web Request API follows the concepts of the [Declarative API](events#declarative). You can register rules to the `whale.declarativeWebRequest.onRequest` event object. The Declarative Web Request API supports a single type of match criteria, the `RequestMatcher`. The `RequestMatcher` matches network requests if and only if all listed criteria are met. The following `RequestMatcher` would match a network request when the user enters \"http://www.example.com\" in the URL bar: var matcher = new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com', schemes: ['http'] }, resourceType: ['main_frame'] }); Requests to \"https://www.example.com\" would be rejected by the `RequestMatcher` due to the scheme. Also all requests for an embedded iframe would be rejected due to the `resourceType`. **Note:** All conditions and actions are created via a constructor as shown in the example above. In order to cancel all requests to \"example.com\", you can define a rule as follows: var rule = { conditions: [ new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }) ], actions: [ new whale.declarativeWebRequest.CancelRequest() ]}; In order to cancel all requests to \"example.com\" and \"foobar.com\", you can add a second condition, as each condition is sufficient to trigger all specified actions: var rule2 = { conditions: [ new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }), new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }) ], actions: [ new whale.declarativeWebRequest.CancelRequest() ]}; Register rules as follows: whale.declarativeWebRequest.onRequest.addRules([rule2]); **Note:** You should always register or unregister rules in bulk rather than individually because each of these operations recreates internal data structures. This re-creation is computationally expensive but facilitates a very fast URL matching algorithm for hundreds of thousands of URLs. The [Performance section](events#performance) of the [Events](/extensions/events) API provides further performance tips. ## Evaluation of conditions and actions The Declarative Web Request API follows the [Life cycle model for web requests](webRequest#life_cycle) of the [Web Request API](webRequest). This means that conditions can only be tested at specific stages of a web request and, likewise, actions can also only be executed at specific stages. The following tables list the request stages that are compatible with conditions and actions. | Request stages during which condition attributes can be processed. | |---| | Condition attribute | onBeforeRequest | onBeforeSendHeaders | onHeadersReceived | onAuthRequired | | url | ✓ | ✓ | ✓ | ✓ | | resourceType | ✓ | ✓ | ✓ | ✓ | | contentType | | | ✓ | | | excludeContentType | | | ✓ | | | responseHeaders | | | ✓ | | | excludeResponseHeaders | | | ✓ | | | requestHeaders | | ✓ | | | | excludeRequestHeaders | | ✓ | | | | thirdPartyForCookies | ✓ | ✓ | ✓ | ✓ | | Request stages during which actions can be executed. | | Event | onBeforeRequest | onBeforeSendHeaders | onHeadersReceived | onAuthRequired | | AddRequestCookie | | ✓ | | | | AddResponseCookie | | | ✓ | | | AddResponseHeader | | | ✓ | | | CancelRequest | ✓ | ✓ | ✓ | ✓ | | EditRequestCookie | | ✓ | | | | EditResponseCookie | | | ✓ | | | IgnoreRules | ✓ | ✓ | ✓ | ✓ | | RedirectByRegEx | ✓ | | ✓ | | | RedirectRequest | ✓ | | ✓ | | | RedirectToEmptyDocument | ✓ | | ✓ | | | RedirectToTransparentImage | ✓ | | ✓ | | | RemoveRequestCookie | | ✓ | | | | RemoveRequestHeader | | ✓ | | | | RemoveResponseCookie | | | ✓ | | | RemoveResponseHeader | | | ✓ | | | SendMessageToExtension | ✓ | ✓ | ✓ | ✓ | | SetRequestHeader | | ✓ | | | **Note:** Applicable stages can be further constrained by using the \"stages\" attribute. **Note:** Redirects initiated by a redirect action use the original request method for the redirect, with one exception: If the redirect is initiated at the onHeadersReceived stage, then the redirect will be issued using the GET method. **Example:** It is possible to combine a `new whale.declarativeWebRequest.RequestMatcher({contentType: [\"image/jpeg\"]})` condition with a `new whale.declarativeWebRequest.CancelRequest()` action because both of them can be evaluated in the onHeadersReceived stage. It is, however, impossible to combine the request matcher with a `new whale.declarativeWebRequest.SetRequestHeader()` because request headers cannot be set any more by the time the content type has been terminated. ## Using priorities to override rules Rules can be associated with priorities as described in the [Events API](events#declarative). This mechanism can be used to express exceptions. The following example will block all requests to images named \"evil.jpg\" except on the server \"myserver.com\". var rule1 = { priority: 100, conditions: [ new whale.declarativeWebRequest.RequestMatcher({ url: { pathEquals: 'evil.jpg' } }) ], actions: [ new whale.declarativeWebRequest.CancelRequest() ] }; var rule2 = { priority: 1000, conditions: [ new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: '.myserver.com' } }) ], actions: [ new whale.declarativeWebRequest.IgnoreRules({ lowerPriorityThan: 1000 }) ] }; whale.declarativeWebRequest.onRequest.addRules([rule1, rule2]); It is important to recognize that the `IgnoreRules` action is not persisted across [request stages](#evaluation). All conditions of all rules are evaluated at each stage of a web request. If an `IgnoreRules` action is executed, it applies only to other actions that are executed for the same web request in the same stage. ## Summary | Types | |---| | [Stage](#type-Stage) | | [HeaderFilter](#type-HeaderFilter) | | [RequestMatcher](#type-RequestMatcher) | | [CancelRequest](#type-CancelRequest) | | [RedirectRequest](#type-RedirectRequest) | | [RedirectToTransparentImage](#type-RedirectToTransparentImage) | | [RedirectToEmptyDocument](#type-RedirectToEmptyDocument) | | [RedirectByRegEx](#type-RedirectByRegEx) | | [SetRequestHeader](#type-SetRequestHeader) | | [RemoveRequestHeader](#type-RemoveRequestHeader) | | [AddResponseHeader](#type-AddResponseHeader) | | [RemoveResponseHeader](#type-RemoveResponseHeader) | | [IgnoreRules](#type-IgnoreRules) | | [SendMessageToExtension](#type-SendMessageToExtension) | | [RequestCookie](#type-RequestCookie) | | [ResponseCookie](#type-ResponseCookie) | | [FilterResponseCookie](#type-FilterResponseCookie) | | [AddRequestCookie](#type-AddRequestCookie) | | [AddResponseCookie](#type-AddResponseCookie) | | [EditRequestCookie](#type-EditRequestCookie) | | [EditResponseCookie](#type-EditResponseCookie) | | [RemoveRequestCookie](#type-RemoveRequestCookie) | | [RemoveResponseCookie](#type-RemoveResponseCookie) | | Events | | [onRequest](#event-onRequest) | | [onMessage](#event-onMessage) | ## Types ### Stage | Enum | |---| | `\"onBeforeRequest\"`, `\"onBeforeSendHeaders\"`, `\"onHeadersReceived\"`, or `\"onAuthRequired\"` | ### HeaderFilter Filters request headers for various criteria. Multiple criteria are evaluated as a conjunction. | properties | |---| | string | (optional) namePrefix | Matches if the header name starts with the specified string. | | string | (optional) nameSuffix | Matches if the header name ends with the specified string. | | array of string or string | (optional) nameContains | Matches if the header name contains all of the specified strings. | | string | (optional) nameEquals | Matches if the header name is equal to the specified string. | | string | (optional) valuePrefix | Matches if the header value starts with the specified string. | | string | (optional) valueSuffix | Matches if the header value ends with the specified string. | | array of string or string | (optional) valueContains | Matches if the header value contains all of the specified strings. | | string | (optional) valueEquals | Matches if the header value is equal to the specified string. | ### RequestMatcher Matches network events by various criteria. | properties | |---| | object | (optional) url | Matches if the conditions of the UrlFilter are fulfilled for the URL of the request. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | | | object | (optional) firstPartyForCookiesUrl | Matches if the conditions of the UrlFilter are fulfilled for the 'first party' URL of the request. The 'first party' URL of a request, when present, can be different from the request's target URL, and describes what is considered 'first party' for the sake of third-party checks for cookies. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | | | array of [webRequest.ResourceType](/extensions/webRequest#type-ResourceType) | (optional) resourceType | Matches if the request type of a request is contained in the list. Requests that cannot match any of the types will be filtered out. | | array of string | (optional) contentType | Matches if the MIME media type of a response (from the HTTP Content-Type header) is contained in the list. | | array of string | (optional) excludeContentType | Matches if the MIME media type of a response (from the HTTP Content-Type header) is _not_ contained in the list. | | array of [HeaderFilter](/extensions/declarativeWebRequest#type-HeaderFilter) | (optional) requestHeaders | Matches if some of the request headers is matched by one of the HeaderFilters. | | array of [HeaderFilter](/extensions/declarativeWebRequest#type-HeaderFilter) | (optional) excludeRequestHeaders | Matches if none of the request headers is matched by any of the HeaderFilters. | | array of [HeaderFilter](/extensions/declarativeWebRequest#type-HeaderFilter) | (optional) responseHeaders | Matches if some of the response headers is matched by one of the HeaderFilters. | | array of [HeaderFilter](/extensions/declarativeWebRequest#type-HeaderFilter) | (optional) excludeResponseHeaders | Matches if none of the response headers is matched by any of the HeaderFilters. | | boolean | (optional) thirdPartyForCookies | If set to true, matches requests that are subject to third-party cookie policies. If set to false, matches all other requests. | | array of [Stage](/extensions/declarativeWebRequest#type-Stage) | (optional) stages | Contains a list of strings describing stages. Allowed values are 'onBeforeRequest', 'onBeforeSendHeaders', 'onHeadersReceived', 'onAuthRequired'. If this attribute is present, then it limits the applicable stages to those listed. Note that the whole condition is only applicable in stages compatible with all attributes. | ### CancelRequest Declarative event action that cancels a network request. ### RedirectRequest Declarative event action that redirects a network request. | properties | |---| | string | redirectUrl | Destination to where the request is redirected. | ### RedirectToTransparentImage Declarative event action that redirects a network request to a transparent image. ### RedirectToEmptyDocument Declarative event action that redirects a network request to an empty document. ### RedirectByRegEx Redirects a request by applying a regular expression on the URL. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | properties | |---| | string | from | A match pattern that may contain capture groups. Capture groups are referenced in the Perl syntax ($1, $2, ...) instead of the RE2 syntax (\\1, \\2, ...) in order to be closer to JavaScript Regular Expressions. | | string | to | Destination pattern. | ### SetRequestHeader Sets the request header of the specified name to the specified value. If a header with the specified name did not exist before, a new one is created. Header name comparison is always case-insensitive. Each request header name occurs only once in each request. | properties | |---| | string | name | HTTP request header name. | | string | value | HTTP request header value. | ### RemoveRequestHeader Removes the request header of the specified name. Do not use SetRequestHeader and RemoveRequestHeader with the same header name on the same request. Each request header name occurs only once in each request. | properties | |---| | string | name | HTTP request header name (case-insensitive). | ### AddResponseHeader Adds the response header to the response of this web request. As multiple response headers may share the same name, you need to first remove and then add a new response header in order to replace one. | properties | |---| | string | name | HTTP response header name. | | string | value | HTTP response header value. | ### RemoveResponseHeader Removes all response headers of the specified names and values. | properties | |---| | string | name | HTTP request header name (case-insensitive). | | string | (optional) value | HTTP request header value (case-insensitive). | ### IgnoreRules Masks all rules that match the specified criteria. | properties | |---| | integer | (optional) lowerPriorityThan | If set, rules with a lower priority than the specified value are ignored. This boundary is not persisted, it affects only rules and their actions of the same network request stage. | | string | (optional) hasTag | If set, rules with the specified tag are ignored. This ignoring is not persisted, it affects only rules and their actions of the same network request stage. Note that rules are executed in descending order of their priorities. This action affects rules of lower priority than the current rule. Rules with the same priority may or may not be ignored. | ### SendMessageToExtension Triggers the [declarativeWebRequest.onMessage](/extensions/declarativeWebRequest#event-onMessage) event. | properties | |---| | string | message | The value that will be passed in the `message` attribute of the dictionary that is passed to the event handler. | ### RequestCookie A filter or specification of a cookie in HTTP Requests. | properties | |---| | string | (optional) name | Name of a cookie. | | string | (optional) value | Value of a cookie, may be padded in double-quotes. | ### ResponseCookie A specification of a cookie in HTTP Responses. | properties | |---| | string | (optional) name | Name of a cookie. | | string | (optional) value | Value of a cookie, may be padded in double-quotes. | | string | (optional) expires | Value of the Expires cookie attribute. | | double | (optional) maxAge | Value of the Max-Age cookie attribute | | string | (optional) domain | Value of the Domain cookie attribute. | | string | (optional) path | Value of the Path cookie attribute. | | string | (optional) secure | Existence of the Secure cookie attribute. | | string | (optional) httpOnly | Existence of the HttpOnly cookie attribute. | ### FilterResponseCookie A filter of a cookie in HTTP Responses. | properties | |---| | string | (optional) name | Name of a cookie. | | string | (optional) value | Value of a cookie, may be padded in double-quotes. | | string | (optional) expires | Value of the Expires cookie attribute. | | double | (optional) maxAge | Value of the Max-Age cookie attribute | | string | (optional) domain | Value of the Domain cookie attribute. | | string | (optional) path | Value of the Path cookie attribute. | | string | (optional) secure | Existence of the Secure cookie attribute. | | string | (optional) httpOnly | Existence of the HttpOnly cookie attribute. | | integer | (optional) ageUpperBound | Inclusive upper bound on the cookie lifetime (specified in seconds after current time). Only cookies whose expiration date-time is in the interval [now, now + ageUpperBound] fulfill this criterion. Session cookies and cookies whose expiration date-time is in the past do not meet the criterion of this filter. The cookie lifetime is calculated from either 'max-age' or 'expires' cookie attributes. If both are specified, 'max-age' is used to calculate the cookie lifetime. | | integer | (optional) ageLowerBound | Inclusive lower bound on the cookie lifetime (specified in seconds after current time). Only cookies whose expiration date-time is set to 'now + ageLowerBound' or later fulfill this criterion. Session cookies do not meet the criterion of this filter. The cookie lifetime is calculated from either 'max-age' or 'expires' cookie attributes. If both are specified, 'max-age' is used to calculate the cookie lifetime. | | boolean | (optional) sessionCookie | Filters session cookies. Session cookies have no lifetime specified in any of 'max-age' or 'expires' attributes. | ### AddRequestCookie Adds a cookie to the request or overrides a cookie, in case another cookie of the same name exists already. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.RequestCookie](/extensions/declarativeWebRequest#type-RequestCookie) | cookie | Cookie to be added to the request. No field may be undefined. | ### AddResponseCookie Adds a cookie to the response or overrides a cookie, in case another cookie of the same name exists already. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.ResponseCookie](/extensions/declarativeWebRequest#type-ResponseCookie) | cookie | Cookie to be added to the response. The name and value need to be specified. | ### EditRequestCookie Edits one or more cookies of request. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.RequestCookie](/extensions/declarativeWebRequest#type-RequestCookie) | filter | Filter for cookies that will be modified. All empty entries are ignored. | | [declarativeWebRequest.RequestCookie](/extensions/declarativeWebRequest#type-RequestCookie) | modification | Attributes that shall be overridden in cookies that machted the filter. Attributes that are set to an empty string are removed. | ### EditResponseCookie Edits one or more cookies of response. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.FilterResponseCookie](/extensions/declarativeWebRequest#type-FilterResponseCookie) | filter | Filter for cookies that will be modified. All empty entries are ignored. | | [declarativeWebRequest.ResponseCookie](/extensions/declarativeWebRequest#type-ResponseCookie) | modification | Attributes that shall be overridden in cookies that machted the filter. Attributes that are set to an empty string are removed. | ### RemoveRequestCookie Removes one or more cookies of request. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.RequestCookie](/extensions/declarativeWebRequest#type-RequestCookie) | filter | Filter for cookies that will be removed. All empty entries are ignored. | ### RemoveResponseCookie Removes one or more cookies of response. Note that it is preferred to use the Cookies API because this is computationally less expensive. | properties | |---| | [declarativeWebRequest.FilterResponseCookie](/extensions/declarativeWebRequest#type-FilterResponseCookie) | filter | Filter for cookies that will be removed. All empty entries are ignored. | ## Events ### onRequest Provides the [Declarative Event API](events#declarative) consisting of [addRules](/extensions/events#method-Event-addRules), [removeRules](/extensions/events#method-Event-removeRules), and [getRules](/extensions/events#method-Event-addRules). `whale.declarativeWebRequest.onRequest.addRules(array of [Rule](/extensions/events#type-Rule) rules, function callback)` `whale.declarativeWebRequest.onRequest.removeRules(array of string ruleIdentifiers, function callback)` `whale.declarativeWebRequest.onRequest.getRules(array of string ruleIdentifiers, function callback)` #### Supported conditions * [declarativeWebRequest.RequestMatcher](/extensions/declarativeWebRequest#type-RequestMatcher) #### Supported actions * [declarativeWebRequest.AddRequestCookie](/extensions/declarativeWebRequest#type-AddRequestCookie) * [declarativeWebRequest.AddResponseCookie](/extensions/declarativeWebRequest#type-AddResponseCookie) * [declarativeWebRequest.AddResponseHeader](/extensions/declarativeWebRequest#type-AddResponseHeader) * [declarativeWebRequest.CancelRequest](/extensions/declarativeWebRequest#type-CancelRequest) * [declarativeWebRequest.EditRequestCookie](/extensions/declarativeWebRequest#type-EditRequestCookie) * [declarativeWebRequest.EditResponseCookie](/extensions/declarativeWebRequest#type-EditResponseCookie) * [declarativeWebRequest.RedirectRequest](/extensions/declarativeWebRequest#type-RedirectRequest) * [declarativeWebRequest.RedirectToTransparentImage](/extensions/declarativeWebRequest#type-RedirectToTransparentImage) * [declarativeWebRequest.RedirectToEmptyDocument](/extensions/declarativeWebRequest#type-RedirectToEmptyDocument) * [declarativeWebRequest.RedirectByRegEx](/extensions/declarativeWebRequest#type-RedirectByRegEx) * [declarativeWebRequest.RemoveRequestCookie](/extensions/declarativeWebRequest#type-RemoveRequestCookie) * [declarativeWebRequest.RemoveResponseCookie](/extensions/declarativeWebRequest#type-RemoveResponseCookie) * [declarativeWebRequest.RemoveRequestHeader](/extensions/declarativeWebRequest#type-RemoveRequestHeader) * [declarativeWebRequest.RemoveResponseHeader](/extensions/declarativeWebRequest#type-RemoveResponseHeader) * [declarativeWebRequest.SetRequestHeader](/extensions/declarativeWebRequest#type-SetRequestHeader) * [declarativeWebRequest.SendMessageToExtension](/extensions/declarativeWebRequest#type-SendMessageToExtension) * [declarativeWebRequest.IgnoreRules](/extensions/declarativeWebRequest#type-IgnoreRules) ### onMessage Fired when a message is sent via [declarativeWebRequest.SendMessageToExtension](/extensions/declarativeWebRequest#type-SendMessageToExtension) from an action of the declarative web request API. #### addListener `whale.declarativeWebRequest.onMessage.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | message | |---|---| The message sent by the calling script. | | [Stage](/extensions/declarativeWebRequest#type-Stage) | stage | The stage of the network request during which the event was triggered. | | string | requestId | The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [webRequest.ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | | "},"extensions-runtime.html":{"url":"extensions-runtime.html","title":"runtime","keywords":"","body":"whale.runtime Description: Use the whale.runtime API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs. Availability: Since Chrome 22. Content Scripts: connect , getManifest , getURL , id , onConnect , onMessage and sendMessage are supported. Learn more Learn More: Event Pages ## Summary | Types | |---| | [Port](#type-Port) | | [MessageSender](#type-MessageSender) | | [PlatformOs](#type-PlatformOs) | | [PlatformArch](#type-PlatformArch) | | [PlatformNaclArch](#type-PlatformNaclArch) | | [PlatformInfo](#type-PlatformInfo) | | [RequestUpdateCheckStatus](#type-RequestUpdateCheckStatus) | | [OnInstalledReason](#type-OnInstalledReason) | | [OnRestartRequiredReason](#type-OnRestartRequiredReason) | | Properties | | [lastError](#property-lastError) | | [id](#property-id) | | Methods | | [getBackgroundPage](#method-getBackgroundPage) − `whale.runtime.getBackgroundPage(function callback)` | | [openOptionsPage](#method-openOptionsPage) − `whale.runtime.openOptionsPage(function callback)` | | [getManifest](#method-getManifest) − `object whale.runtime.getManifest()` | | [getURL](#method-getURL) − `string whale.runtime.getURL(string path)` | | [setUninstallURL](#method-setUninstallURL) − `whale.runtime.setUninstallURL(string url, function callback)` | | [reload](#method-reload) − `whale.runtime.reload()` | | [requestUpdateCheck](#method-requestUpdateCheck) − `whale.runtime.requestUpdateCheck(function callback)` | | [restart](#method-restart) − `whale.runtime.restart()` | | [restartAfterDelay](#method-restartAfterDelay) − `whale.runtime.restartAfterDelay(integer seconds, function callback)` | | [connect](#method-connect) − `Port whale.runtime.connect(string extensionId, object connectInfo)` | | [connectNative](#method-connectNative) − `Port whale.runtime.connectNative(string application)` | | [sendMessage](#method-sendMessage) − `whale.runtime.sendMessage(string extensionId, any message, object options, function responseCallback)` | | [sendNativeMessage](#method-sendNativeMessage) − `whale.runtime.sendNativeMessage(string application, object message, function responseCallback)` | | [getPlatformInfo](#method-getPlatformInfo) − `whale.runtime.getPlatformInfo(function callback)` | | [getPackageDirectoryEntry](#method-getPackageDirectoryEntry) − `whale.runtime.getPackageDirectoryEntry(function callback)` | | Events | | [onStartup](#event-onStartup) | | [onInstalled](#event-onInstalled) | | [onSuspend](#event-onSuspend) | | [onSuspendCanceled](#event-onSuspendCanceled) | | [onUpdateAvailable](#event-onUpdateAvailable) | | [onBrowserUpdateAvailable](#event-onBrowserUpdateAvailable) | | [onConnect](#event-onConnect) | | [onConnectExternal](#event-onConnectExternal) | | [onMessage](#event-onMessage) | | [onMessageExternal](#event-onMessageExternal) | | [onRestartRequired](#event-onRestartRequired) | ## Types ### Port Since Chrome 26. An object which allows two way communication with other pages. See [Long-lived connections](messaging#connect) for more information. | properties | |---| | string | name | The name of the port, as specified in the call to [runtime.connect](/extensions/runtime#method-connect). | | function | disconnect | Immediately disconnect the port. Calling `disconnect()` on an already-disconnected port has no effect. When a port is disconnected, no new events will be dispatched to this port. | | object | onDisconnect | Fired when the port is disconnected from the other end(s). [runtime.lastError](/extensions/runtime#property-lastError) may be set if the port was disconnected by an error. If the port is closed via [disconnect](/extensions/runtime#property-Port-disconnect), then this event is _only_ fired on the other end. This event is fired at most once (see also [Port lifetime](messaging#port-lifetime)). The first and only parameter to the event handler is this disconnected port. | | object | onMessage | This event is fired when [postMessage](/extensions/runtime#property-Port-postMessage) is called by the other end of the port. The first parameter is the message, the second parameter is the port that received the message. | | function | postMessage | Send a message to the other end of the port. If the port is disconnected, an error is thrown. | Parameters | |---| | any | message | Since Chrome 52. The message to send. This object should be JSON-ifiable. | | | [MessageSender](/extensions/runtime#type-MessageSender) | (optional) sender | This property will **only** be present on ports passed to [onConnect](/extensions/runtime#event-onConnect) / [onConnectExternal](/extensions/runtime#event-onConnectExternal) listeners. | ### MessageSender Since Chrome 26. An object containing information about the script context that sent a message or request. | properties | |---| | [tabs.Tab](/extensions/tabs#type-Tab) | (optional) tab | The [tabs.Tab](/extensions/tabs#type-Tab) which opened the connection, if any. This property will **only** be present when the connection was opened from a tab (including content scripts), and **only** if the receiver is an extension, not an app. | | integer | (optional) frameId | Since Chrome 41. The [frame](webNavigation#frame_ids) that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when `tab` is set. | | string | (optional) id | The ID of the extension or app that opened the connection, if any. | | string | (optional) url | Since Chrome 28. The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe's URL not the URL of the page which hosts it. | | string | (optional) tlsChannelId | Since Chrome 32. The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available. | ### PlatformOs The operating system chrome is running on. | Enum | |---| | `\"mac\"`, `\"win\"`, `\"android\"`, `\"cros\"`, `\"linux\"`, or `\"openbsd\"` | ### PlatformArch The machine's processor architecture. | Enum | |---| | `\"arm\"`, `\"x86-32\"`, or `\"x86-64\"` | ### PlatformNaclArch The native client architecture. This may be different from arch on some platforms. | Enum | |---| | `\"arm\"`, `\"x86-32\"`, or `\"x86-64\"` | ### PlatformInfo Since Chrome 36. An object containing information about the current platform. | properties | |---| | [PlatformOs](/extensions/runtime#type-PlatformOs) | os | The operating system chrome is running on. | | [PlatformArch](/extensions/runtime#type-PlatformArch) | arch | The machine's processor architecture. | | [PlatformNaclArch](/extensions/runtime#type-PlatformNaclArch) | nacl_arch | The native client architecture. This may be different from arch on some platforms. | ### RequestUpdateCheckStatus Result of the update check. | Enum | |---| | `\"throttled\"`, `\"no_update\"`, or `\"update_available\"` | ### OnInstalledReason The reason that this event is being dispatched. | Enum | |---| | `\"install\"`, `\"update\"`, `\"chrome_update\"`, or `\"shared_module_update\"` | ### OnRestartRequiredReason The reason that the event is being dispatched. 'app_update' is used when the restart is needed because the application is updated to a newer version. 'os_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy. | Enum | |---| | `\"app_update\"`, `\"os_update\"`, or `\"periodic\"` | ## Properties | object | `whale.runtime.lastError` | This will be defined during an API method callback if there was an error | Properties | |---| | --- | | string | (optional) message | Details about the error which occurred. | | | string | `whale.runtime.id` | The ID of the extension/app. | ## Methods ### getBackgroundPage `whale.runtime.getBackgroundPage(function callback)` Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(Window backgroundPage) {...};` | Window | (optional) backgroundPage | |---|---| The JavaScript 'window' object for the background page. | | ### openOptionsPage `whale.runtime.openOptionsPage(function callback)` Since Chrome 42. Open your Extension's options page, if possible. The precise behavior may depend on your manifest's `[options_ui](optionsV2)` or `[options_page](options)` key, or what Chrome happens to support at the time. For example, the page may be opened in a new tab, within chrome://extensions, within an App, or it may just focus an open options page. It will never cause the caller page to reload. If your Extension does not declare an options page, or Chrome failed to create one for some other reason, the callback will set [lastError](/extensions/runtime#property-lastError). | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getManifest `object whale.runtime.getManifest()` Returns details about the app or extension from the manifest. The object returned is a serialization of the full [manifest file](manifest.html). #### Returns The manifest details. ### getURL `string whale.runtime.getURL(string path)` Converts a relative path within an app/extension install directory to a fully-qualified URL. | Parameters | |---| | string | path | A path to a resource within an app/extension expressed relative to its install directory. | ### setUninstallURL `whale.runtime.setUninstallURL(string url, function callback)` Since Chrome 41. Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters. | Parameters | |---| | string | url | Since Chrome 34. URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation. | | function | (optional) callback | Called when the uninstall URL is set. If the given URL is invalid, [runtime.lastError](/extensions/runtime#property-lastError) will be set. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### reload `whale.runtime.reload()` Since Chrome 25. Reloads the app or extension. This method is not supported in kiosk mode. For kiosk mode, use whale.runtime.restart() method. ### requestUpdateCheck `whale.runtime.requestUpdateCheck(function callback)` Since Chrome 25. Requests an immediate update check be done for this app/extension. **Important**: Most extensions/apps should **not** use this method, since chrome already does automatic checks every few hours, and you can listen for the [runtime.onUpdateAvailable](/extensions/runtime#event-onUpdateAvailable) event without needing to call requestUpdateCheck. This method is only appropriate to call in very limited circumstances, such as if your extension/app talks to a backend service, and the backend service has determined that the client extension/app version is very far out of date and you'd like to prompt a user to update. Most other uses of requestUpdateCheck, such as calling it unconditionally based on a repeating timer, probably only serve to waste client, network, and server resources. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [RequestUpdateCheckStatus](/extensions/runtime#type-RequestUpdateCheckStatus) status, object details) {...};` | [RequestUpdateCheckStatus](/extensions/runtime#type-RequestUpdateCheckStatus) | status | |---|---| Result of the update check. | | object | (optional) details | If an update is available, this contains more information about the available update. | string | version | |---|---| The version of the available update. | | | ### restart `whale.runtime.restart()` Since Chrome 32. Restart the ChromeOS device when the app runs in kiosk mode. Otherwise, it's no-op. ### restartAfterDelay `whale.runtime.restartAfterDelay(integer seconds, function callback)` Since Chrome 53. Restart the ChromeOS device when the app runs in kiosk mode after the given seconds. If called again before the time ends, the reboot will be delayed. If called with a value of -1, the reboot will be cancelled. It's a no-op in non-kiosk mode. It's only allowed to be called repeatedly by the first extension to invoke this API. | Parameters | |---| | integer | seconds | Time to wait in seconds before rebooting the device, or -1 to cancel a scheduled reboot. | | function | (optional) callback | A callback to be invoked when a restart request was successfully rescheduled. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### connect `[Port](/extensions/runtime#type-Port) whale.runtime.connect(string extensionId, object connectInfo)` Since Chrome 26. Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and [web messaging](manifest/externally_connectable.html). Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via [tabs.connect](/extensions/tabs#method-connect). | Parameters | |---| | string | (optional) extensionId | The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for [web messaging](manifest/externally_connectable.html). | | object | (optional) connectInfo | | string | (optional) name | |---|---| Will be passed into onConnect for processes that are listening for the connection event. | | boolean | (optional) includeTlsChannelId | Since Chrome 32. Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event. | | ### connectNative `[Port](/extensions/runtime#type-Port) whale.runtime.connectNative(string application)` Since Chrome 28. Connects to a native application in the host machine. See [Native Messaging](nativeMessaging) for more information. | Parameters | |---| | string | application | The name of the registered application to connect to. | ### sendMessage `whale.runtime.sendMessage(string extensionId, any message, object options, function responseCallback)` Since Chrome 26. Sends a single message to event listeners within your extension/app or a different extension/app. Similar to [runtime.connect](/extensions/runtime#method-connect) but only sends a single message, with an optional response. If sending to your extension, the [runtime.onMessage](/extensions/runtime#event-onMessage) event will be fired in every frame of your extension (except for the sender's frame), or [runtime.onMessageExternal](/extensions/runtime#event-onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use [tabs.sendMessage](/extensions/tabs#method-sendMessage). | Parameters | |---| | string | (optional) extensionId | The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for [web messaging](manifest/externally_connectable.html). | | any | message | The message to send. This message should be a JSON-ifiable object. | | object | (optional) options | Since Chrome 32. | boolean | (optional) includeTlsChannelId | |---|---| Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event. | | | function | (optional) responseCallback | If you specify the _responseCallback_ parameter, it should be a function that looks like this: `function(any response) {...};` | any | response | |---|---| The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. | | ### sendNativeMessage `whale.runtime.sendNativeMessage(string application, object message, function responseCallback)` Since Chrome 28. Send a single message to a native application. | Parameters | |---| | string | application | The name of the native messaging host. | | object | message | The message that will be passed to the native messaging host. | | function | (optional) responseCallback | If you specify the _responseCallback_ parameter, it should be a function that looks like this: `function(any response) {...};` | any | response | |---|---| The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. | | ### getPlatformInfo `whale.runtime.getPlatformInfo(function callback)` Since Chrome 29. Returns information about the current platform. | Parameters | |---| | function | callback | Called with results The _callback_ parameter should be a function that looks like this: `function( [PlatformInfo](/extensions/runtime#type-PlatformInfo) platformInfo) {...};` | [PlatformInfo](/extensions/runtime#type-PlatformInfo) | platformInfo | | |---|---|---| | ### getPackageDirectoryEntry `whale.runtime.getPackageDirectoryEntry(function callback)` Since Chrome 29. Returns a DirectoryEntry for the package directory. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(DirectoryEntry directoryEntry) {...};` | DirectoryEntry | directoryEntry | | |---|---|---| | ## Events ### onStartup Since Chrome 23. Fired when a profile that has this extension installed first starts up. This event is not fired when an incognito profile is started, even if this extension is operating in 'split' incognito mode. #### addListener `whale.runtime.onStartup.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onInstalled Fired when the extension is first installed, when the extension is updated to a new version, and when Chrome is updated to a new version. #### addListener `whale.runtime.onInstalled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| Since Chrome 23. | [OnInstalledReason](/extensions/runtime#type-OnInstalledReason) | reason | |---|---| The reason that this event is being dispatched. | | string | (optional) previousVersion | Indicates the previous version of the extension, which has just been updated. This is present only if 'reason' is 'update'. | | string | (optional) id | Since Chrome 29. Indicates the ID of the imported shared module extension which updated. This is present only if 'reason' is 'shared_module_update'. | | | ### onSuspend Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. #### addListener `whale.runtime.onSuspend.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onSuspendCanceled Sent after onSuspend to indicate that the app won't be unloaded after all. #### addListener `whale.runtime.onSuspendCanceled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onUpdateAvailable Since Chrome 25. Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call whale.runtime.reload(). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call whale.runtime.reload() manually in response to this event the update will not get installed until the next time chrome itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if whale.runtime.reload() is called in response to this event. #### addListener `whale.runtime.onUpdateAvailable.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| The manifest details of the available update. | string | version | |---|---| The version number of the available update. | | | ### onBrowserUpdateAvailable **Deprecated** since Chrome 33. Please use [runtime.onRestartRequired](/extensions/runtime#event-onRestartRequired). Fired when a Chrome update is available, but isn't installed immediately because a browser restart is required. #### addListener `whale.runtime.onBrowserUpdateAvailable.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onConnect Since Chrome 26. Fired when a connection is made from either an extension process or a content script (by [runtime.connect](/extensions/runtime#method-connect)). #### addListener `whale.runtime.onConnect.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Port](/extensions/runtime#type-Port) port) {...};` | [Port](/extensions/runtime#type-Port) | port | | |---|---|---| | ### onConnectExternal Since Chrome 26. Fired when a connection is made from another extension (by [runtime.connect](/extensions/runtime#method-connect)). #### addListener `whale.runtime.onConnectExternal.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Port](/extensions/runtime#type-Port) port) {...};` | [Port](/extensions/runtime#type-Port) | port | | |---|---|---| | ### onMessage Since Chrome 26. Fired when a message is sent from either an extension process (by [runtime.sendMessage](/extensions/runtime#method-sendMessage)) or a content script (by [tabs.sendMessage](/extensions/tabs#method-sendMessage)). #### addListener `whale.runtime.onMessage.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(any message, [MessageSender](/extensions/runtime#type-MessageSender) sender, function sendResponse) {...};` | any | (optional) message | |---|---| The message sent by the calling script. | | [MessageSender](/extensions/runtime#type-MessageSender) | sender | | | function | sendResponse | Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one `onMessage` listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, **unless you return true** from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until `sendResponse` is called). The _sendResponse_ parameter should be a function that looks like this: `function() {...};` | | ### onMessageExternal Since Chrome 26. Fired when a message is sent from another extension/app (by [runtime.sendMessage](/extensions/runtime#method-sendMessage)). Cannot be used in a content script. #### addListener `whale.runtime.onMessageExternal.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(any message, [MessageSender](/extensions/runtime#type-MessageSender) sender, function sendResponse) {...};` | any | (optional) message | |---|---| The message sent by the calling script. | | [MessageSender](/extensions/runtime#type-MessageSender) | sender | | | function | sendResponse | Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one `onMessage` listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, **unless you return true** from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until `sendResponse` is called). The _sendResponse_ parameter should be a function that looks like this: `function() {...};` | | ### onRestartRequired Since Chrome 29. Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps. #### addListener `whale.runtime.onRestartRequired.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [OnRestartRequiredReason](/extensions/runtime#type-OnRestartRequiredReason) reason) {...};` | [OnRestartRequiredReason](/extensions/runtime#type-OnRestartRequiredReason) | reason | |---|---| The reason that the event is being dispatched. | | "},"extensions-desktop-capture.html":{"url":"extensions-desktop-capture.html","title":"desktop-capture","keywords":"","body":"whale.desktopCapture Description: Desktop Capture API that can be used to capture content of screen, individual windows or tabs. Availability: Since Chrome 34. Permissions: \"desktopCapture\" ## Summary | Types | |---| | [DesktopCaptureSourceType](#type-DesktopCaptureSourceType) | | Methods | | [chooseDesktopMedia](#method-chooseDesktopMedia) − `integer whale.desktopCapture.chooseDesktopMedia(array of [DesktopCaptureSourceType](/extensions/desktopCapture#type-DesktopCaptureSourceType) sources, tabs.Tab targetTab, function callback)` | | [cancelChooseDesktopMedia](#method-cancelChooseDesktopMedia) − `whale.desktopCapture.cancelChooseDesktopMedia(integer desktopMediaRequestId)` | ## Types ### DesktopCaptureSourceType Enum used to define set of desktop media sources used in chooseDesktopMedia(). | Enum | |---| | `\"screen\"`, `\"window\"`, `\"tab\"`, or `\"audio\"` | ## Methods ### chooseDesktopMedia `integer whale.desktopCapture.chooseDesktopMedia(array of [DesktopCaptureSourceType](/extensions/desktopCapture#type-DesktopCaptureSourceType) sources, [tabs.Tab](/extensions/tabs#type-Tab) targetTab, function callback)` Shows desktop media picker UI with the specified set of sources. | Parameters | |---| | array of [DesktopCaptureSourceType](/extensions/desktopCapture#type-DesktopCaptureSourceType) | sources | Set of sources that should be shown to the user. The sources order in the set decides the tab order in the picker. | | [tabs.Tab](/extensions/tabs#type-Tab) | (optional) targetTab | Optional tab for which the stream is created. If not specified then the resulting stream can be used only by the calling extension. The stream can only be used by frames in the given tab whose security origin matches `tab.url`. The tab's origin must be a secure origin, e.g. HTTPS. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string streamId, object options) {...};` | string | streamId | |---|---| An opaque string that can be passed to `getUserMedia()` API to generate media stream that corresponds to the source selected by the user. If user didn't select any source (i.e. canceled the prompt) then the callback is called with an empty `streamId`. The created `streamId` can be used only once and expires after a few seconds when it is not used. | | object | options | Contains properties that describe the stream. | boolean | canRequestAudioTrack | |---|---| True if \"audio\" is included in parameter sources, and the end user does not uncheck the \"Share audio\" checkbox. Otherwise false, and in this case, one should not ask for audio stream through getUserMedia call. | | | ### cancelChooseDesktopMedia `whale.desktopCapture.cancelChooseDesktopMedia(integer desktopMediaRequestId)` Hides desktop media picker dialog shown by chooseDesktopMedia(). | Parameters | |---| | integer | desktopMediaRequestId | Id returned by chooseDesktopMedia() | "},"extensions-sessions.html":{"url":"extensions-sessions.html","title":"sessions","keywords":"","body":"whale.sessions Description: Use the whale.sessions API to query and restore tabs and windows from a browsing session. Availability: Since Chrome 37. Permissions: \"sessions\" ## Summary | Types | |---| | [Filter](#type-Filter) | | [Session](#type-Session) | | [Device](#type-Device) | | Properties | | [MAX_SESSION_RESULTS](#property-MAX_SESSION_RESULTS) | | Methods | | [getRecentlyClosed](#method-getRecentlyClosed) − `whale.sessions.getRecentlyClosed( Filter filter, function callback)` | | [getDevices](#method-getDevices) − `whale.sessions.getDevices( Filter filter, function callback)` | | [restore](#method-restore) − `whale.sessions.restore(string sessionId, function callback)` | | Events | | [onChanged](#event-onChanged) | ## Types ### Filter | properties | |---| | integer | (optional) maxResults | The maximum number of entries to be fetched in the requested list. Omit this parameter to fetch the maximum number of entries ([sessions.MAX_SESSION_RESULTS](/extensions/sessions#property-MAX_SESSION_RESULTS)). | ### Session | properties | |---| | integer | lastModified | The time when the window or tab was closed or modified, represented in milliseconds since the epoch. | | [tabs.Tab](/extensions/tabs#type-Tab) | (optional) tab | The [tabs.Tab](/extensions/tabs#type-Tab), if this entry describes a tab. Either this or [sessions.Session.window](/extensions/sessions#property-Session-window) will be set. | | [windows.Window](/extensions/windows#type-Window) | (optional) window | The [windows.Window](/extensions/windows#type-Window), if this entry describes a window. Either this or [sessions.Session.tab](/extensions/sessions#property-Session-tab) will be set. | ### Device | properties | |---| | string | deviceName | The name of the foreign device. | | array of [Session](/extensions/sessions#type-Session) | sessions | A list of open window sessions for the foreign device, sorted from most recently to least recently modified session. | ## Properties | `25` | `whale.sessions.MAX_SESSION_RESULTS` | The maximum number of [sessions.Session](/extensions/sessions#type-Session) that will be included in a requested list. | |---|---|---| ## Methods ### getRecentlyClosed `whale.sessions.getRecentlyClosed( [Filter](/extensions/sessions#type-Filter) filter, function callback)` Gets the list of recently closed tabs and/or windows. | Parameters | |---| | [Filter](/extensions/sessions#type-Filter) | (optional) filter | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Session](/extensions/sessions#type-Session) sessions) {...};` | array of [Session](/extensions/sessions#type-Session) | sessions | |---|---| The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index `0`). The entries may contain either tabs or windows. | | ### getDevices `whale.sessions.getDevices( [Filter](/extensions/sessions#type-Filter) filter, function callback)` Retrieves all devices with synced sessions. | Parameters | |---| | [Filter](/extensions/sessions#type-Filter) | (optional) filter | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Device](/extensions/sessions#type-Device) devices) {...};` | array of [Device](/extensions/sessions#type-Device) | devices | |---|---| The list of [sessions.Device](/extensions/sessions#type-Device) objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. [tabs.Tab](/extensions/tabs#type-Tab) objects are sorted by recency in the [windows.Window](/extensions/windows#type-Window) of the [sessions.Session](/extensions/sessions#type-Session) objects. | | ### restore `whale.sessions.restore(string sessionId, function callback)` Reopens a [windows.Window](/extensions/windows#type-Window) or [tabs.Tab](/extensions/tabs#type-Tab), with an optional callback to run when the entry has been restored. | Parameters | |---| | string | (optional) sessionId | The [windows.Window.sessionId](/extensions/windows#property-Window-sessionId), or [tabs.Tab.sessionId](/extensions/tabs#property-Tab-sessionId) to restore. If this parameter is not specified, the most recently closed session is restored. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Session](/extensions/sessions#type-Session) restoredSession) {...};` | [Session](/extensions/sessions#type-Session) | restoredSession | |---|---| A [sessions.Session](/extensions/sessions#type-Session) containing the restored [windows.Window](/extensions/windows#type-Window) or [tabs.Tab](/extensions/tabs#type-Tab) object. | | ## Events ### onChanged Fired when recently closed tabs and/or windows are changed. This event does not monitor synced sessions changes. #### addListener `whale.sessions.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-devtools-inspected-window.html":{"url":"extensions-devtools-inspected-window.html","title":"devtools-inspected-window","keywords":"","body":"whale.devtools.inspectedWindow Description: Use the whale.devtools.inspectedWindow API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page. Availability: Since Chrome 21. Use `whale.devtools.inspectedWindow` to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of inspected window, reload the page, or obtain the list of resources within the page. See [DevTools APIs summary](devtools) for general introduction to using Developer Tools APIs. ## Overview The `[tabId](/extensions/devtools.inspectedWindow#property-tabId)` property provides the tab identifier that you can use with the [`whale.tabs.*`](tabs) API calls. However, please note that `whale.tabs.*` API is not exposed to the Developer Tools extension pages due to security considerations — you will need to pass the tab ID to the background page and invoke the `whale.tabs.*` API functions from there. The `reload` method may be used to reload the inspected page. Additionally, the caller can specify an override for the user agent string, a script that will be injected early upon page load, or an option to force reload of cached resources. Use the `getResources` call and the `onResourceContent` event to obtain the list of resources (documents, stylesheets, scripts, images etc) within the inspected page. The `getContent` and `setContent` methods of the `Resource` class along with the `onResourceContentCommitted` event may be used to support modification of the resource content, for example, by an external editor. ## Executing Code in the Inspected Window The `eval` method provides the ability for extensions to execute JavaScript code in the context of the inspected page. This method is powerful when used in the right context and dangerous when used inappropriately. Use the `[tabs.executeScript](/extensions/tabs#method-executeScript)` method unless you need the specific functionality that the `eval` method provides. Here are the main differences between the `eval` and `tabs.executeScript` methods: * The `eval` method does not use an isolated world for the code being evaluated, so the JavaScript state of the inspected window is accessible to the code. Use this method when access to the JavaScript state of the inspected page is required. * The execution context of the code being evaluated includes the [Developer Tools console API](http://code.google.com/chrome/devtools/docs/console.html). For example, the code can use `inspect` and `$0`. * The evaluated code may return a value that is passed to the extension callback. The returned value has to be a valid JSON object (it may contain only primitive JavaScript types and acyclic references to other JSON objects). _Please observe extra care while processing the data received from the inspected page — the execution context is essentially controlled by the inspected page; a malicious page may affect the data being returned to the extension._ **Important:** Due to the security considerations explained above, the `[tabs.executeScript](/extensions/tabs#method-executeScript)` method is the preferred way for an extension to access DOM data of the inspected page in cases where the access to JavaScript state of the inspected page is not required. Note that a page can include multiple different JavaScript execution contexts. Each frame has its own context, plus an additional context for each extension that has content scripts running in that frame. By default, the `eval` method executes in the context of the main frame of the inspected page. The `eval` method takes an optional second argument that you can use to specify the context in which the code is evaluated. This _options_ object can contain one or more of the following keys: `frameURL` Use to specify a frame other than the inspected page's main frame. `contextSecurityOrigin` Use to select a context within the specified frame according to its [web origin](http://www.ietf.org/rfc/rfc6454.txt). `useContentScriptContext` If true, execute the script in the same context as the extensions's content scripts. (Equivalent to specifying the extensions's own web orgin as the context security origin.) This can be used to exchange data with the content script. ## Examples The following code checks for the version of jQuery used by the inspected page: whale.devtools.inspectedWindow.eval( \"jQuery.fn.jquery\", function(result, isException) { if (isException) console.log(\"the page is not using jQuery\"); else console.log(\"The page is using jQuery v\" + result); } ); You can find more examples that use Developer Tools APIs in [Samples](samples#search:devtools). ## Summary | Types | |---| | [Resource](#type-Resource) | | Properties | | [tabId](#property-tabId) | | Methods | | [eval](#method-eval) − `whale.devtools.inspectedWindow.eval(string expression, object options, function callback)` | | [reload](#method-reload) − `whale.devtools.inspectedWindow.reload(object reloadOptions)` | | [getResources](#method-getResources) − `whale.devtools.inspectedWindow.getResources(function callback)` | | Events | | [onResourceAdded](#event-onResourceAdded) | | [onResourceContentCommitted](#event-onResourceContentCommitted) | ## Types ### Resource A resource within the inspected page, such as a document, a script, or an image. | properties | |---| | string | url | The URL of the resource. | | methods | | #### getContent `Resource.getContent(function callback)` Gets the content of the resource. | Parameters | |---| | function | callback | A function that receives resource content when the request completes. The _callback_ parameter should be a function that looks like this: `function(string content, string encoding) {...};` | string | content | |---|---| Content of the resource (potentially encoded). | | string | encoding | Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported. | | | | #### setContent `Resource.setContent(string content, boolean commit, function callback)` Sets the content of the resource. | Parameters | |---| | string | content | New content of the resource. Only resources with the text type are currently supported. | | boolean | commit | True if the user has finished editing the resource, and the new content of the resource should be persisted; false if this is a minor change sent in progress of the user editing the resource. | | function | (optional) callback | A function called upon request completion. If you specify the _callback_ parameter, it should be a function that looks like this: `function(object error) {...};` | object | (optional) error | |---|---| Set to undefined if the resource content was set successfully; describes error otherwise. | | | ## Properties | integer | `whale.devtools.inspectedWindow.tabId` | The ID of the tab being inspected. This ID may be used with whale.tabs.* API. | |---|---|---| ## Methods ### eval `whale.devtools.inspectedWindow.eval(string expression, object options, function callback)` Evaluates a JavaScript expression in the context of the main frame of the inspected page. The expression must evaluate to a JSON-compliant object, otherwise an exception is thrown. The eval function can report either a DevTools-side error or a JavaScript exception that occurs during evaluation. In either case, the `result` parameter of the callback is `undefined`. In the case of a DevTools-side error, the `isException` parameter is non-null and has `isError` set to true and `code` set to an error code. In the case of a JavaScript error, `isException` is set to true and `value` is set to the string value of thrown object. | Parameters | |---| | string | expression | An expression to evaluate. | | object | (optional) options | Since Chrome 38. The options parameter can contain one or more options. | string | (optional) frameURL | |---|---| If specified, the expression is evaluated on the iframe whose URL matches the one specified. By default, the expression is evaluated in the top frame of the inspected page. | | boolean | (optional) useContentScriptContext | Evaluate the expression in the context of the content script of the calling extension, provided that the content script is already injected into the inspected page. If not, the expression is not evaluated and the callback is invoked with the exception parameter set to an object that has the `isError` field set to true and the `code` field set to `E_NOTFOUND`. | | string | (optional) contextSecurityOrigin | Evaluate the expression in the context of a content script of an extension that matches the specified origin. If given, contextSecurityOrigin overrides the 'true' setting on userContentScriptContext. | | | function | (optional) callback | A function called when evaluation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function(object result, object exceptionInfo) {...};` | object | result | |---|---| The result of evaluation. | | object | exceptionInfo | An object providing details if an exception occurred while evaluating the expression. | boolean | isError | |---|---| Set if the error occurred on the DevTools side before the expression is evaluated. | | string | code | Set if the error occurred on the DevTools side before the expression is evaluated. | | string | description | Set if the error occurred on the DevTools side before the expression is evaluated. | | array of any | details | Set if the error occurred on the DevTools side before the expression is evaluated, contains the array of the values that may be substituted into the description string to provide more information about the cause of the error. | | boolean | isException | Set if the evaluated code produces an unhandled exception. | | string | value | Set if the evaluated code produces an unhandled exception. | | | ### reload `whale.devtools.inspectedWindow.reload(object reloadOptions)` Reloads the inspected page. | Parameters | |---| | object | (optional) reloadOptions | | boolean | (optional) ignoreCache | |---|---| When true, the loader will bypass the cache for all inspected page resources loaded before the `load` event is fired. The effect is similar to pressing Ctrl+Shift+R in the inspected window or within the Developer Tools window. | | string | (optional) userAgent | If specified, the string will override the value of the `User-Agent` HTTP header that's sent while loading the resources of the inspected page. The string will also override the value of the `navigator.userAgent` property that's returned to any scripts that are running within the inspected page. | | string | (optional) injectedScript | If specified, the script will be injected into every frame of the inspected page immediately upon load, before any of the frame's scripts. The script will not be injected after subsequent reloads—for example, if the user presses Ctrl+R. | | ### getResources `whale.devtools.inspectedWindow.getResources(function callback)` Retrieves the list of resources from the inspected page. | Parameters | |---| | function | callback | A function that receives the list of resources when the request completes. The _callback_ parameter should be a function that looks like this: `function(array of [Resource](/extensions/devtools.inspectedWindow#type-Resource) resources) {...};` | array of [Resource](/extensions/devtools.inspectedWindow#type-Resource) | resources | |---|---| The resources within the page. | | ## Events ### onResourceAdded Fired when a new resource is added to the inspected page. #### addListener `whale.devtools.inspectedWindow.onResourceAdded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Resource](/extensions/devtools.inspectedWindow#type-Resource) resource) {...};` | [Resource](/extensions/devtools.inspectedWindow#type-Resource) | resource | | |---|---|---| | ### onResourceContentCommitted Fired when a new revision of the resource is committed (e.g. user saves an edited version of the resource in the Developer Tools). #### addListener `whale.devtools.inspectedWindow.onResourceContentCommitted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Resource](/extensions/devtools.inspectedWindow#type-Resource) resource, string content) {...};` | [Resource](/extensions/devtools.inspectedWindow#type-Resource) | resource | | |---|---|---| | string | content | New content of the resource. | | "},"extensions-signed-in-devices.html":{"url":"extensions-signed-in-devices.html","title":"signed-in-devices","keywords":"","body":"whale.signedInDevices Description: Use the whale.signedInDevices API to get a list of devices signed into chrome with the same account as the current profile. Availability: Dev channel only. Learn more. Permissions: \"signedInDevices\" ## Summary | Types | |---| | [DeviceInfo](#type-DeviceInfo) | | Methods | | [get](#method-get) − `whale.signedInDevices.get(boolean isLocal, function callback)` | | Events | | [onDeviceInfoChange](#event-onDeviceInfoChange) | ## Types ### DeviceInfo | properties | |---| | string | name | Name of the device. This name is usually set by the user when setting up a device. | | string | id | Unique Id for this device. Note: The id is meaningful only in the current device. This id cannot be used to refer to the same device from another device or extension. | | enum of `\"win\"`, `\"mac\"`, `\"linux\"`, `\"chrome_os\"`, `\"android\"`, `\"ios\"`, or `\"unknown\"` | os | The OS of the device. | | enum of `\"desktop_or_laptop\"`, `\"phone\"`, `\"tablet\"`, or `\"unknown\"` | type | Device Type. | | string | chromeVersion | Version of chrome running in this device. | ## Methods ### get `whale.signedInDevices.get(boolean isLocal, function callback)` Gets the array of signed in devices, signed into the same account as the current profile. | Parameters | |---| | boolean | (optional) isLocal | If true only return the information for the local device. If false or omitted return the list of all devices including the local device. | | function | callback | The callback to be invoked with the array of DeviceInfo objects. The _callback_ parameter should be a function that looks like this: `function(array of [DeviceInfo](/extensions/signedInDevices#type-DeviceInfo) devices) {...};` | array of [DeviceInfo](/extensions/signedInDevices#type-DeviceInfo) | devices | | |---|---|---| | ## Events ### onDeviceInfoChange Fired when the DeviceInfo object of any of the signed in devices changes, or when a device is added or removed. #### addListener `whale.signedInDevices.onDeviceInfoChange.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [DeviceInfo](/extensions/signedInDevices#type-DeviceInfo) devices) {...};` | array of [DeviceInfo](/extensions/signedInDevices#type-DeviceInfo) | devices | |---|---| The array of all signed in devices. | | "},"extensions-devtools-network.html":{"url":"extensions-devtools-network.html","title":"devtools-network","keywords":"","body":"whale.devtools.network Description: Use the whale.devtools.network API to retrieve the information about network requests displayed by the Developer Tools in the Network panel. Availability: Since Chrome 21. See [DevTools APIs summary](devtools) for general introduction to using Developer Tools APIs. ## Overview Network requests information is represented in the HTTP Archive format (_HAR_). The description of HAR is outside of scope of this document, please refer to [HAR v1.2 Specification](http://www.softwareishard.com/blog/har-12-spec/). In terms of HAR, the `whale.devtools.network.getHAR()` method returns entire _HAR log_, while `whale.devtools.network.onRequestFinished` event provides _HAR entry_ as an argument to the event callback. Note that request content is not provided as part of HAR for efficieny reasons. You may call request's `getContent()` method to retrieve content. If the Developer Tools window is opened after the page is loaded, some requests may be missing in the array of entries returned by `getHAR()`. Reload the page to get all requests. In general, the list of requests returned by `getHAR()` should match that displayed in the Network panel. ## Examples The following code logs URLs of all images larger than 40KB as they are loaded: whale.devtools.network.onRequestFinished.addListener( function(request) { if (request.response.bodySize > 40*1024) { whale.devtools.inspectedWindow.eval( 'console.log(\"Large image: \" + unescape(\"' + escape(request.request.url) + '\"))'); } }); You can find more examples that use this API in [Samples](samples#search:devtools.network). ## Summary | Types | |---| | [Request](#type-Request) | | Methods | | [getHAR](#method-getHAR) − `whale.devtools.network.getHAR(function callback)` | | Events | | [onRequestFinished](#event-onRequestFinished) | | [onNavigated](#event-onNavigated) | ## Types ### Request Represents a network request for a document resource (script, image and so on). See HAR Specification for reference. | methods | |---| | #### getContent `Request.getContent(function callback)` Returns content of the response body. | Parameters | |---| | function | callback | A function that receives the response body when the request completes. The _callback_ parameter should be a function that looks like this: `function(string content, string encoding) {...};` | string | content | |---|---| Content of the response body (potentially encoded). | | string | encoding | Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported. | | | ## Methods ### getHAR `whale.devtools.network.getHAR(function callback)` Returns HAR log that contains all known network requests. | Parameters | |---| | function | callback | A function that receives the HAR log when the request completes. The _callback_ parameter should be a function that looks like this: `function(object harLog) {...};` | object | harLog | |---|---| A HAR log. See HAR specification for details. | | ## Events ### onRequestFinished Fired when a network request is finished and all request data are available. #### addListener `whale.devtools.network.onRequestFinished.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Request](/extensions/devtools.network#type-Request) request) {...};` | [Request](/extensions/devtools.network#type-Request) | request | |---|---| Description of a network request in the form of a HAR entry. See HAR specification for details. | | ### onNavigated Fired when the inspected window navigates to a new page. #### addListener `whale.devtools.network.onNavigated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string url) {...};` | string | url | |---|---| URL of the new page. | | "},"extensions-storage.html":{"url":"extensions-storage.html","title":"storage","keywords":"","body":"whale.storage Description: Use the whale.storage API to store, retrieve, and track changes to user data. Availability: Since Chrome 20. Permissions: \"storage\" Content Scripts: Fully supported. Learn more Learn More: Chrome Apps Office Hours: Chrome Storage APIs Chrome Apps Office Hours: Storage API Deep Dive | ## Overview This API has been optimized to meet the specific storage needs of extensions. It provides the same storage capabilities as the [localStorage API](https://developer.mozilla.org/en/DOM/Storage#localStorage) with the following key differences: * User data can be automatically synced with Chrome sync (using `storage.sync`). * Your extension's content scripts can directly access user data without the need for a background page. * A user's extension settings can be persisted even when using [split incognito behavior](manifest/incognito). * It's asynchronous with bulk read and write operations, and therefore faster than the blocking and serial `localStorage API`. * User data can be stored as objects (the `localStorage API` stores data in strings). * Enterprise policies configured by the administrator for the extension can be read (using `storage.managed` with a [schema](manifest/storage)). ## Manifest You must declare the \"storage\" permission in the [extension manifest](manifest) to use the storage API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"storage\" ]**, ... } ## Usage To store user data for your extension, you can use either `storage.sync` or `storage.local`. When using `storage.sync`, the stored data will automatically be synced to any Chrome browser that the user is logged into, provided the user has sync enabled. When Chrome is offline, Chrome stores the data locally. The next time the browser is online, Chrome syncs the data. Even if a user disables syncing, `storage.sync` will still work. In this case, it will behave identically to `storage.local`. Confidential user information should not be stored! The storage area isn't encrypted. The `storage.managed` storage is read-only. ## Storage and throttling limits `whale.storage` is not a big truck. It's a series of tubes. And if you don't understand, those tubes can be filled, and if they are filled when you put your message in, it gets in line, and it's going to be delayed by anyone that puts into that tube enormous amounts of material. For details on the current limits of the storage API, and what happens when those limits are exceeded, please see the quota information for [sync](/extensions/storage#property-sync) and [local](/extensions/storage#property-local). ## Examples The following example checks for CSS code saved by a user on a form, and if found, stores it. function saveChanges() { // Get a value saved in a form. var theValue = textarea.value; // Check that there's some code there. if (!theValue) { message('Error: No value specified'); return; } // Save it using the Chrome extension storage API. whale.storage.sync.set({'value': theValue}, function() { // Notify that we saved. message('Settings saved'); }); } If you're interested in tracking changes made to a data object, you can add a listener to its `onChanged` event. Whenever anything changes in storage, that event fires. Here's sample code to listen for saved changes: whale.storage.onChanged.addListener(function(changes, namespace) { for (key in changes) { var storageChange = changes[key]; console.log('Storage key \"%s\" in namespace \"%s\" changed. ' + 'Old value was \"%s\", new value is \"%s\".', key, namespace, storageChange.oldValue, storageChange.newValue); } }); ## Summary | Types | |---| | [StorageChange](#type-StorageChange) | | [StorageArea](#type-StorageArea) | | Properties | | [sync](#property-sync) | | [local](#property-local) | | [managed](#property-managed) | | Events | | [onChanged](#event-onChanged) | ## Types ### StorageChange | properties | |---| | any | (optional) oldValue | The old value of the item, if there was an old value. | | any | (optional) newValue | The new value of the item, if there is a new value. | ### StorageArea | methods | |---| | #### get `StorageArea.get(string or array of string or object keys, function callback)` Gets one or more items from storage. | Parameters | |---| | string or array of string or object | (optional) keys | A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object). An empty list or object will return an empty result object. Pass in `null` to get the entire contents of storage. | | function | callback | Callback with storage items, or on failure (in which case [runtime.lastError](/extensions/runtime#property-lastError) will be set). The _callback_ parameter should be a function that looks like this: `function(object items) {...};` | object | items | |---|---| Object with items in their key-value mappings. | | | | #### getBytesInUse `StorageArea.getBytesInUse(string or array of string keys, function callback)` Gets the amount of space (in bytes) being used by one or more items. | Parameters | |---| | string or array of string | (optional) keys | A single key or list of keys to get the total usage for. An empty list will return 0\\. Pass in `null` to get the total usage of all of storage. | | function | callback | Callback with the amount of space being used by storage, or on failure (in which case [runtime.lastError](/extensions/runtime#property-lastError) will be set). The _callback_ parameter should be a function that looks like this: `function(integer bytesInUse) {...};` | integer | bytesInUse | |---|---| Amount of space being used in storage, in bytes. | | | | #### set `StorageArea.set(object items, function callback)` Sets multiple items. | Parameters | |---| | object | items | An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected. Primitive values such as numbers will serialize as expected. Values with a `typeof` `\"object\"` and `\"function\"` will typically serialize to `{}`, with the exception of `Array` (serializes as expected), `Date`, and `Regex` (serialize using their `String` representation). | | function | (optional) callback | Callback on success, or on failure (in which case [runtime.lastError](/extensions/runtime#property-lastError) will be set). If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### remove `StorageArea.remove(string or array of string keys, function callback)` Removes one or more items from storage. | Parameters | |---| | string or array of string | keys | A single key or a list of keys for items to remove. | | function | (optional) callback | Callback on success, or on failure (in which case [runtime.lastError](/extensions/runtime#property-lastError) will be set). If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### clear `StorageArea.clear(function callback)` Removes all items from storage. | Parameters | |---| | function | (optional) callback | Callback on success, or on failure (in which case [runtime.lastError](/extensions/runtime#property-lastError) will be set). If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | ## Properties | [StorageArea](/extensions/storage#type-StorageArea) | `whale.storage.sync` | Items in the `sync` storage area are synced using Chrome Sync. | Properties | |---| | --- | | `102,400` | QUOTA_BYTES | The maximum total amount (in bytes) of data that can be stored in sync storage, as measured by the JSON stringification of every value plus every key's length. Updates that would cause this limit to be exceeded fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | `8,192` | QUOTA_BYTES_PER_ITEM | The maximum size (in bytes) of each individual item in sync storage, as measured by the JSON stringification of its value plus its key length. Updates containing items larger than this limit will fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | `512` | MAX_ITEMS | The maximum number of items that can be stored in sync storage. Updates that would cause this limit to be exceeded will fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | `1,800` | MAX_WRITE_OPERATIONS_PER_HOUR | The maximum number of `set`, `remove`, or `clear` operations that can be performed each hour. This is 1 every 2 seconds, a lower ceiling than the short term higher writes-per-minute limit. Updates that would cause this limit to be exceeded fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | `120` | MAX_WRITE_OPERATIONS_PER_MINUTE | Since Chrome 40. The maximum number of `set`, `remove`, or `clear` operations that can be performed each minute. This is 2 per second, providing higher throughput than writes-per-hour over a shorter period of time. Updates that would cause this limit to be exceeded fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | `1,000,000` | MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE | **Deprecated** since Chrome 40. The storage.sync API no longer has a sustained write operation quota. | | | [StorageArea](/extensions/storage#type-StorageArea) | `whale.storage.local` | Items in the `local` storage area are local to each machine. | Properties | |---| | --- | | `5,242,880` | QUOTA_BYTES | The maximum amount (in bytes) of data that can be stored in local storage, as measured by the JSON stringification of every value plus every key's length. This value will be ignored if the extension has the `unlimitedStorage` permission. Updates that would cause this limit to be exceeded fail immediately and set [runtime.lastError](/extensions/runtime#property-lastError). | | | [StorageArea](/extensions/storage#type-StorageArea) | `whale.storage.managed` | Since Chrome 33. Items in the `managed` storage area are set by the domain administrator, and are read-only for the extension; trying to modify this namespace results in an error. | ## Events ### onChanged Fired when one or more items change. #### addListener `whale.storage.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object changes, string areaName) {...};` | object | changes | |---|---| Object mapping each key that changed to its corresponding [storage.StorageChange](/extensions/storage#type-StorageChange) for that item. | | string | areaName | Since Chrome 22. The name of the storage area (`\"sync\"`, `\"local\"` or `\"managed\"`) the changes are for. | | "},"extensions-devtools-panels.html":{"url":"extensions-devtools-panels.html","title":"devtools-panels","keywords":"","body":"whale.devtools.panels Description: Use the whale.devtools.panels API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars. Availability: Since Chrome 21. See [DevTools APIs summary](devtools) for general introduction to using Developer Tools APIs. ## Overview Each extension panel and sidebar is displayed as a separate HTML page. All extension pages displayed in the Developer Tools window have access to all modules in `whale.devtools` API, as well as to [whale.extension](extension) API. Other extension APIs are not available to the pages within Developer Tools window, but you may invoke them by sending a request to the background page of your extension, similarly to how it's done in the [content scripts](overview#contentScripts). You can use the `[devtools.panels.setOpenResourceHandler](/extensions/devtools.panels#method-setOpenResourceHandler)` method to install a callback function that handles user requests to open a resource (typically, a click on a resource link in the Developer Tools window). At most one of the installed handlers gets called; users can specify (using the Developer Tools Settings dialog) either the default behavior or an extension to handle resource open requests. If an extension calls `setOpenResourceHandler()` multiple times, only the last handler is retained. ## Examples The following code adds a panel contained in `Panel.html`, represented by `FontPicker.png` on the Developer Tools toolbar and labeled as _Font Picker_: whale.devtools.panels.create(\"Font Picker\", \"FontPicker.png\", \"Panel.html\" function(panel) { ... }); The following code adds a sidebar pane contained in `Sidebar.html` and titled _Font Properties_ to the Elements panel, then sets its height to `8ex`: whale.devtools.panels.elements.createSidebarPane(\"Font Properties\", function(sidebar) { sidebar.setPage(\"Sidebar.html\"); sidebar.setHeight(\"8ex\"); }); This screenshot demonstrates the effect the above examples would have on Developer Tools window: ![Extension icon panel on DevTools toolbar](/static/images/devtools-panels.png) You can find examples that use this API in [Samples](samples#chrome-query). ## Summary | Types | |---| | [ElementsPanel](#type-ElementsPanel) | | [SourcesPanel](#type-SourcesPanel) | | [ExtensionPanel](#type-ExtensionPanel) | | [ExtensionSidebarPane](#type-ExtensionSidebarPane) | | [Button](#type-Button) | | Properties | | [elements](#property-elements) | | [sources](#property-sources) | | [themeName](#property-themeName) | | Methods | | [create](#method-create) − `whale.devtools.panels.create(string title, string iconPath, string pagePath, function callback)` | | [setOpenResourceHandler](#method-setOpenResourceHandler) − `whale.devtools.panels.setOpenResourceHandler(function callback)` | | [openResource](#method-openResource) − `whale.devtools.panels.openResource(string url, integer lineNumber, function callback)` | ## Types ### ElementsPanel Represents the Elements panel. ### onSelectionChanged Fired when an object is selected in the panel. | methods | |---| | #### createSidebarPane `ElementsPanel.createSidebarPane(string title, function callback)` Creates a pane within panel's sidebar. | Parameters | |---| | string | title | Text that is displayed in sidebar caption. | | function | (optional) callback | A callback invoked when the sidebar is created. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionSidebarPane](/extensions/devtools.panels#type-ExtensionSidebarPane) result) {...};` | [ExtensionSidebarPane](/extensions/devtools.panels#type-ExtensionSidebarPane) | result | |---|---| An ExtensionSidebarPane object for created sidebar pane. | | | | events | | #### addListener `onSelectionChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | | ### SourcesPanel Since Chrome 41. Represents the Sources panel. ### onSelectionChanged Fired when an object is selected in the panel. | methods | |---| | #### createSidebarPane `SourcesPanel.createSidebarPane(string title, function callback)` Creates a pane within panel's sidebar. | Parameters | |---| | string | title | Text that is displayed in sidebar caption. | | function | (optional) callback | A callback invoked when the sidebar is created. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionSidebarPane](/extensions/devtools.panels#type-ExtensionSidebarPane) result) {...};` | [ExtensionSidebarPane](/extensions/devtools.panels#type-ExtensionSidebarPane) | result | |---|---| An ExtensionSidebarPane object for created sidebar pane. | | | | events | | #### addListener `onSelectionChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | | ### ExtensionPanel Represents a panel created by extension. ### onSearch Fired upon a search action (start of a new search, search result navigation, or search being canceled). ### onShown Fired when the user switches to the panel. ### onHidden Fired when the user switches away from the panel. | methods | |---| | #### createStatusBarButton `[Button](/extensions/devtools.panels#type-Button) ExtensionPanel.createStatusBarButton(string iconPath, string tooltipText, boolean disabled)` Appends a button to the status bar of the panel. | Parameters | |---| | string | iconPath | Path to the icon of the button. The file should contain a 64x24-pixel image composed of two 32x24 icons. The left icon is used when the button is inactive; the right icon is displayed when the button is pressed. | | string | tooltipText | Text shown as a tooltip when user hovers the mouse over the button. | | boolean | disabled | Whether the button is disabled. | | | events | | #### addListener `onSearch.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string action, string queryString) {...};` | string | action | |---|---| Type of search action being performed. | | string | (optional) queryString | Query string (only for 'performSearch'). | | | | #### addListener `onShown.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(global window) {...};` | global | window | |---|---| The JavaScript `window` object of panel's page. | | | | #### addListener `onHidden.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | | ### ExtensionSidebarPane A sidebar created by the extension. ### onShown Fired when the sidebar pane becomes visible as a result of user switching to the panel that hosts it. ### onHidden Fired when the sidebar pane becomes hidden as a result of the user switching away from the panel that hosts the sidebar pane. | methods | |---| | #### setHeight `ExtensionSidebarPane.setHeight(string height)` Sets the height of the sidebar. | Parameters | |---| | string | height | A CSS-like size specification, such as `'100px'` or `'12ex'`. | | | #### setExpression `ExtensionSidebarPane.setExpression(string expression, string rootTitle, function callback)` Sets an expression that is evaluated within the inspected page. The result is displayed in the sidebar pane. | Parameters | |---| | string | expression | An expression to be evaluated in context of the inspected page. JavaScript objects and DOM nodes are displayed in an expandable tree similar to the console/watch. | | string | (optional) rootTitle | An optional title for the root of the expression tree. | | function | (optional) callback | A callback invoked after the sidebar pane is updated with the expression evaluation results. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### setObject `ExtensionSidebarPane.setObject(string jsonObject, string rootTitle, function callback)` Sets a JSON-compliant object to be displayed in the sidebar pane. | Parameters | |---| | string | jsonObject | An object to be displayed in context of the inspected page. Evaluated in the context of the caller (API client). | | string | (optional) rootTitle | An optional title for the root of the expression tree. | | function | (optional) callback | A callback invoked after the sidebar is updated with the object. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### setPage `ExtensionSidebarPane.setPage(string path)` Sets an HTML page to be displayed in the sidebar pane. | Parameters | |---| | string | path | Relative path of an extension page to display within the sidebar. | | | events | | #### addListener `onShown.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(global window) {...};` | global | window | |---|---| The JavaScript `window` object of the sidebar page, if one was set with the `setPage()` method. | | | | #### addListener `onHidden.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | | ### Button A button created by the extension. ### onClicked Fired when the button is clicked. | methods | |---| | #### update `Button.update(string iconPath, string tooltipText, boolean disabled)` Updates the attributes of the button. If some of the arguments are omitted or `null`, the corresponding attributes are not updated. | Parameters | |---| | string | (optional) iconPath | Path to the new icon of the button. | | string | (optional) tooltipText | Text shown as a tooltip when user hovers the mouse over the button. | | boolean | (optional) disabled | Whether the button is disabled. | | | events | | #### addListener `onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | | ## Properties | [ElementsPanel](/extensions/devtools.panels#type-ElementsPanel) | `whale.devtools.panels.elements` | Elements panel. | |---|---|---| | [SourcesPanel](/extensions/devtools.panels#type-SourcesPanel) | `whale.devtools.panels.sources` | Since Chrome 38. Sources panel. | | string | `whale.devtools.panels.themeName` | Since Chrome 59. The name of the color theme set in user's DevTools settings. Possible values: `default` (the default) and `dark`. | ## Methods ### create `whale.devtools.panels.create(string title, string iconPath, string pagePath, function callback)` Creates an extension panel. | Parameters | |---| | string | title | Title that is displayed next to the extension icon in the Developer Tools toolbar. | | string | iconPath | Path of the panel's icon relative to the extension directory. | | string | pagePath | Path of the panel's HTML page relative to the extension directory. | | function | (optional) callback | A function that is called when the panel is created. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionPanel](/extensions/devtools.panels#type-ExtensionPanel) panel) {...};` | [ExtensionPanel](/extensions/devtools.panels#type-ExtensionPanel) | panel | |---|---| An ExtensionPanel object representing the created panel. | | ### setOpenResourceHandler `whale.devtools.panels.setOpenResourceHandler(function callback)` Specifies the function to be called when the user clicks a resource link in the Developer Tools window. To unset the handler, either call the method with no parameters or pass null as the parameter. | Parameters | |---| | function | (optional) callback | A function that is called when the user clicks on a valid resource link in Developer Tools window. Note that if the user clicks an invalid URL or an XHR, this function is not called. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [devtools.inspectedWindow.Resource](/extensions/devtools.inspectedWindow#type-Resource) resource) {...};` | [devtools.inspectedWindow.Resource](/extensions/devtools.inspectedWindow#type-Resource) | resource | |---|---| A [devtools.inspectedWindow.Resource](/extensions/devtools.inspectedWindow#type-Resource) object for the resource that was clicked. | | ### openResource `whale.devtools.panels.openResource(string url, integer lineNumber, function callback)` Since Chrome 38. Requests DevTools to open a URL in a Developer Tools panel. | Parameters | |---| | string | url | The URL of the resource to open. | | integer | lineNumber | Specifies the line number to scroll to when the resource is loaded. | | function | (optional) callback | A function that is called when the resource has been successfully loaded. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | "},"extensions-downloads.html":{"url":"extensions-downloads.html","title":"downloads","keywords":"","body":"whale.downloads Description: Use the whale.downloads API to programmatically initiate, monitor, manipulate, and search for downloads. Availability: Since Chrome 31. Permissions: \"downloads\" ## Manifest You must declare the `\"downloads\"` permission in the [extension manifest](manifest) to use this API. { \"name\": \"My extension\", ... **\"permissions\": [ \"downloads\" ]**, ... } ## Examples You can find simple examples of using the `whale.downloads` API in the [examples/api/downloads](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/downloads/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [FilenameConflictAction](#type-FilenameConflictAction) | | [InterruptReason](#type-InterruptReason) | | [DangerType](#type-DangerType) | | [State](#type-State) | | [DownloadItem](#type-DownloadItem) | | [StringDelta](#type-StringDelta) | | [DoubleDelta](#type-DoubleDelta) | | [BooleanDelta](#type-BooleanDelta) | | Methods | | [download](#method-download) − `whale.downloads.download(object options, function callback)` | | [search](#method-search) − `whale.downloads.search(object query, function callback)` | | [pause](#method-pause) − `whale.downloads.pause(integer downloadId, function callback)` | | [resume](#method-resume) − `whale.downloads.resume(integer downloadId, function callback)` | | [cancel](#method-cancel) − `whale.downloads.cancel(integer downloadId, function callback)` | | [getFileIcon](#method-getFileIcon) − `whale.downloads.getFileIcon(integer downloadId, object options, function callback)` | | [open](#method-open) − `whale.downloads.open(integer downloadId)` | | [show](#method-show) − `whale.downloads.show(integer downloadId)` | | [showDefaultFolder](#method-showDefaultFolder) − `whale.downloads.showDefaultFolder()` | | [erase](#method-erase) − `whale.downloads.erase(object query, function callback)` | | [removeFile](#method-removeFile) − `whale.downloads.removeFile(integer downloadId, function callback)` | | [acceptDanger](#method-acceptDanger) − `whale.downloads.acceptDanger(integer downloadId, function callback)` | | [drag](#method-drag) − `whale.downloads.drag(integer downloadId)` | | [setShelfEnabled](#method-setShelfEnabled) − `whale.downloads.setShelfEnabled(boolean enabled)` | | Events | | [onCreated](#event-onCreated) | | [onErased](#event-onErased) | | [onChanged](#event-onChanged) | | [onDeterminingFilename](#event-onDeterminingFilename) | ## Types ### FilenameConflictAction uniquify To avoid duplication, the `filename` is changed to include a counter before the filename extension. overwrite The existing file will be overwritten with the new file. prompt The user will be prompted with a file chooser dialog. | Enum | |---| | `\"uniquify\"`, `\"overwrite\"`, or `\"prompt\"` | ### InterruptReason | Enum | |---| | `\"FILE_FAILED\"`, `\"FILE_ACCESS_DENIED\"`, `\"FILE_NO_SPACE\"`, `\"FILE_NAME_TOO_LONG\"`, `\"FILE_TOO_LARGE\"`, `\"FILE_VIRUS_INFECTED\"`, `\"FILE_TRANSIENT_ERROR\"`, `\"FILE_BLOCKED\"`, `\"FILE_SECURITY_CHECK_FAILED\"`, `\"FILE_TOO_SHORT\"`, `\"FILE_HASH_MISMATCH\"`, `\"FILE_SAME_AS_SOURCE\"`, `\"NETWORK_FAILED\"`, `\"NETWORK_TIMEOUT\"`, `\"NETWORK_DISCONNECTED\"`, `\"NETWORK_SERVER_DOWN\"`, `\"NETWORK_INVALID_REQUEST\"`, `\"SERVER_FAILED\"`, `\"SERVER_NO_RANGE\"`, `\"SERVER_BAD_CONTENT\"`, `\"SERVER_UNAUTHORIZED\"`, `\"SERVER_CERT_PROBLEM\"`, `\"SERVER_FORBIDDEN\"`, `\"SERVER_UNREACHABLE\"`, `\"SERVER_CONTENT_LENGTH_MISMATCH\"`, `\"USER_CANCELED\"`, `\"USER_SHUTDOWN\"`, or `\"CRASH\"` | ### DangerType file The download's filename is suspicious. url The download's URL is known to be malicious. content The downloaded file is known to be malicious. uncommon The download's URL is not commonly downloaded and could be dangerous. host The download came from a host known to distribute malicious binaries and is likely dangerous. unwanted The download is potentially unwanted or unsafe. E.g. it could make changes to browser or computer settings. safe The download presents no known danger to the user's computer. accepted The user has accepted the dangerous download. | Enum | |---| | `\"file\"`, `\"url\"`, `\"content\"`, `\"uncommon\"`, `\"host\"`, `\"unwanted\"`, `\"safe\"`, or `\"accepted\"` | ### State in_progress The download is currently receiving data from the server. interrupted An error broke the connection with the file host. complete The download completed successfully. | Enum | |---| | `\"in_progress\"`, `\"interrupted\"`, or `\"complete\"` | ### DownloadItem | properties | |---| | integer | id | An identifier that is persistent across browser sessions. | | string | url | The absolute URL that this download initiated from, before any redirects. | | string | finalUrl | Since Chrome 54. The absolute URL that this download is being made from, after all redirects. | | string | referrer | Absolute URL. | | string | filename | Absolute local path. | | boolean | incognito | False if this download is recorded in the history, true if it is not recorded. | | [DangerType](/extensions/downloads#type-DangerType) | danger | Indication of whether this download is thought to be safe or known to be suspicious. | | string | mime | The file's MIME type. | | string | startTime | The time when the download began in ISO 8601 format. May be passed directly to the Date constructor: `whale.downloads.search({}, function(items){items.forEach(function(item){console.log(new Date(item.startTime))})})` | | string | (optional) endTime | The time when the download ended in ISO 8601 format. May be passed directly to the Date constructor: `whale.downloads.search({}, function(items){items.forEach(function(item){if (item.endTime) console.log(new Date(item.endTime))})})` | | string | (optional) estimatedEndTime | Estimated time when the download will complete in ISO 8601 format. May be passed directly to the Date constructor: `whale.downloads.search({}, function(items){items.forEach(function(item){if (item.estimatedEndTime) console.log(new Date(item.estimatedEndTime))})})` | | [State](/extensions/downloads#type-State) | state | Indicates whether the download is progressing, interrupted, or complete. | | boolean | paused | True if the download has stopped reading data from the host, but kept the connection open. | | boolean | canResume | True if the download is in progress and paused, or else if it is interrupted and can be resumed starting from where it was interrupted. | | [InterruptReason](/extensions/downloads#type-InterruptReason) | (optional) error | Why the download was interrupted. Several kinds of HTTP errors may be grouped under one of the errors beginning with `SERVER_`. Errors relating to the network begin with `NETWORK_`, errors relating to the process of writing the file to the file system begin with `FILE_`, and interruptions initiated by the user begin with `USER_`. | | double | bytesReceived | Number of bytes received so far from the host, without considering file compression. | | double | totalBytes | Number of bytes in the whole file, without considering file compression, or -1 if unknown. | | double | fileSize | Number of bytes in the whole file post-decompression, or -1 if unknown. | | boolean | exists | Whether the downloaded file still exists. This information may be out of date because Chrome does not automatically watch for file removal. Call [search](/extensions/downloads#method-search)() in order to trigger the check for file existence. When the existence check completes, if the file has been deleted, then an [onChanged](/extensions/downloads#event-onChanged) event will fire. Note that [search](/extensions/downloads#method-search)() does not wait for the existence check to finish before returning, so results from [search](/extensions/downloads#method-search)() may not accurately reflect the file system. Also, [search](/extensions/downloads#method-search)() may be called as often as necessary, but will not check for file existence any more frequently than once every 10 seconds. | | string | (optional) byExtensionId | The identifier for the extension that initiated this download if this download was initiated by an extension. Does not change once it is set. | | string | (optional) byExtensionName | The localized name of the extension that initiated this download if this download was initiated by an extension. May change if the extension changes its name or if the user changes their locale. | ### StringDelta | properties | |---| | string | (optional) previous | | | string | (optional) current | | ### DoubleDelta Since Chrome 34. | properties | |---| | double | (optional) previous | | | double | (optional) current | | ### BooleanDelta | properties | |---| | boolean | (optional) previous | | | boolean | (optional) current | | ## Methods ### download `whale.downloads.download(object options, function callback)` Download a URL. If the URL uses the HTTP[S] protocol, then the request will include all cookies currently set for its hostname. If both `filename` and `saveAs` are specified, then the Save As dialog will be displayed, pre-populated with the specified `filename`. If the download started successfully, `callback` will be called with the new [DownloadItem](/extensions/downloads#type-DownloadItem)'s `downloadId`. If there was an error starting the download, then `callback` will be called with `downloadId=undefined` and [runtime.lastError](/extensions/runtime#property-lastError) will contain a descriptive string. The error strings are not guaranteed to remain backwards compatible between releases. Extensions must not parse it. | Parameters | |---| | object | options | What to download and how. | string | url | |---|---| The URL to download. | | string | (optional) filename | A file path relative to the Downloads directory to contain the downloaded file, possibly containing subdirectories. Absolute paths, empty paths, and paths containing back-references \"..\" will cause an error. [onDeterminingFilename](/extensions/downloads#event-onDeterminingFilename) allows suggesting a filename after the file's MIME type and a tentative filename have been determined. | | [FilenameConflictAction](/extensions/downloads#type-FilenameConflictAction) | (optional) conflictAction | The action to take if `filename` already exists. | | boolean | (optional) saveAs | Use a file-chooser to allow the user to select a filename regardless of whether `filename` is set or already exists. | | enum of `\"GET\"`, or `\"POST\"` | (optional) method | The HTTP method to use if the URL uses the HTTP[S] protocol. | | array of object | (optional) headers | Extra HTTP headers to send with the request if the URL uses the HTTP[s] protocol. Each header is represented as a dictionary containing the keys `name` and either `value` or `binaryValue`, restricted to those allowed by XMLHttpRequest. #### Properties of each object | string | name | |---|---| Name of the HTTP header. | | string | value | Value of the HTTP header. | | | string | (optional) body | Post body. | | | function | (optional) callback | Called with the id of the new [DownloadItem](/extensions/downloads#type-DownloadItem). If you specify the _callback_ parameter, it should be a function that looks like this: `function(integer downloadId) {...};` | integer | downloadId | | |---|---|---| | ### search `whale.downloads.search(object query, function callback)` Find [DownloadItem](/extensions/downloads#type-DownloadItem). Set `query` to the empty object to get all [DownloadItem](/extensions/downloads#type-DownloadItem). To get a specific [DownloadItem](/extensions/downloads#type-DownloadItem), set only the `id` field. To page through a large number of items, set `orderBy: ['-startTime']`, set `limit` to the number of items per page, and set `startedAfter` to the `startTime` of the last item from the last page. | Parameters | |---| | object | query | | array of string | (optional) query | |---|---| This array of search terms limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `filename` or `url` or `finalUrl` contain all of the search terms that do not begin with a dash '-' and none of the search terms that do begin with a dash. | | string | (optional) startedBefore | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that started before the given ms since the epoch. | | string | (optional) startedAfter | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that started after the given ms since the epoch. | | string | (optional) endedBefore | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that ended before the given ms since the epoch. | | string | (optional) endedAfter | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that ended after the given ms since the epoch. | | double | (optional) totalBytesGreater | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `totalBytes` is greater than the given integer. | | double | (optional) totalBytesLess | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `totalBytes` is less than the given integer. | | string | (optional) filenameRegex | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `filename` matches the given regular expression. | | string | (optional) urlRegex | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `url` matches the given regular expression. | | string | (optional) finalUrlRegex | Since Chrome 54. Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `finalUrl` matches the given regular expression. | | integer | (optional) limit | The maximum number of matching [DownloadItem](/extensions/downloads#type-DownloadItem) returned. Defaults to 1000\\. Set to 0 in order to return all matching [DownloadItem](/extensions/downloads#type-DownloadItem). See [search](/extensions/downloads#method-search) for how to page through results. | | array of string | (optional) orderBy | Set elements of this array to [DownloadItem](/extensions/downloads#type-DownloadItem) properties in order to sort search results. For example, setting `orderBy=['startTime']` sorts the [DownloadItem](/extensions/downloads#type-DownloadItem) by their start time in ascending order. To specify descending order, prefix with a hyphen: '-startTime'. | | integer | (optional) id | The `id` of the [DownloadItem](/extensions/downloads#type-DownloadItem) to query. | | string | (optional) url | The absolute URL that this download initiated from, before any redirects. | | string | (optional) finalUrl | Since Chrome 54. The absolute URL that this download is being made from, after all redirects. | | string | (optional) filename | Absolute local path. | | [DangerType](/extensions/downloads#type-DangerType) | (optional) danger | Indication of whether this download is thought to be safe or known to be suspicious. | | string | (optional) mime | The file's MIME type. | | string | (optional) startTime | The time when the download began in ISO 8601 format. | | string | (optional) endTime | The time when the download ended in ISO 8601 format. | | [State](/extensions/downloads#type-State) | (optional) state | Indicates whether the download is progressing, interrupted, or complete. | | boolean | (optional) paused | True if the download has stopped reading data from the host, but kept the connection open. | | [InterruptReason](/extensions/downloads#type-InterruptReason) | (optional) error | Why a download was interrupted. | | double | (optional) bytesReceived | Number of bytes received so far from the host, without considering file compression. | | double | (optional) totalBytes | Number of bytes in the whole file, without considering file compression, or -1 if unknown. | | double | (optional) fileSize | Number of bytes in the whole file post-decompression, or -1 if unknown. | | boolean | (optional) exists | Whether the downloaded file exists; | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [DownloadItem](/extensions/downloads#type-DownloadItem) results) {...};` | array of [DownloadItem](/extensions/downloads#type-DownloadItem) | results | | |---|---|---| | ### pause `whale.downloads.pause(integer downloadId, function callback)` Pause the download. If the request was successful the download is in a paused state. Otherwise [runtime.lastError](/extensions/runtime#property-lastError) contains an error message. The request will fail if the download is not active. | Parameters | |---| | integer | downloadId | The id of the download to pause. | | function | (optional) callback | Called when the pause request is completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### resume `whale.downloads.resume(integer downloadId, function callback)` Resume a paused download. If the request was successful the download is in progress and unpaused. Otherwise [runtime.lastError](/extensions/runtime#property-lastError) contains an error message. The request will fail if the download is not active. | Parameters | |---| | integer | downloadId | The id of the download to resume. | | function | (optional) callback | Called when the resume request is completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### cancel `whale.downloads.cancel(integer downloadId, function callback)` Cancel a download. When `callback` is run, the download is cancelled, completed, interrupted or doesn't exist anymore. | Parameters | |---| | integer | downloadId | The id of the download to cancel. | | function | (optional) callback | Called when the cancel request is completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getFileIcon `whale.downloads.getFileIcon(integer downloadId, object options, function callback)` Retrieve an icon for the specified download. For new downloads, file icons are available after the [onCreated](/extensions/downloads#event-onCreated) event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, [runtime.lastError](/extensions/runtime#property-lastError) will contain an error message. | Parameters | |---| | integer | downloadId | The identifier for the download. | | object | (optional) options | | integer | (optional) size | |---|---| The size of the returned icon. The icon will be square with dimensions size * size pixels. The default and largest size for the icon is 32x32 pixels. The only supported sizes are 16 and 32\\. It is an error to specify any other size. | | | function | callback | A URL to an image that represents the download. The _callback_ parameter should be a function that looks like this: `function(string iconURL) {...};` | string | (optional) iconURL | | |---|---|---| | ### open `whale.downloads.open(integer downloadId)` Open the downloaded file now if the [DownloadItem](/extensions/downloads#type-DownloadItem) is complete; otherwise returns an error through [runtime.lastError](/extensions/runtime#property-lastError). Requires the `\"downloads.open\"` permission in addition to the `\"downloads\"` permission. An [onChanged](/extensions/downloads#event-onChanged) event will fire when the item is opened for the first time. | Parameters | |---| | integer | downloadId | The identifier for the downloaded file. | ### show `whale.downloads.show(integer downloadId)` Show the downloaded file in its folder in a file manager. | Parameters | |---| | integer | downloadId | The identifier for the downloaded file. | ### showDefaultFolder `whale.downloads.showDefaultFolder()` Show the default Downloads folder in a file manager. ### erase `whale.downloads.erase(object query, function callback)` Erase matching [DownloadItem](/extensions/downloads#type-DownloadItem) from history without deleting the downloaded file. An [onErased](/extensions/downloads#event-onErased) event will fire for each [DownloadItem](/extensions/downloads#type-DownloadItem) that matches `query`, then `callback` will be called. | Parameters | |---| | object | query | | array of string | (optional) query | |---|---| This array of search terms limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `filename` or `url` or `finalUrl` contain all of the search terms that do not begin with a dash '-' and none of the search terms that do begin with a dash. | | string | (optional) startedBefore | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that started before the given ms since the epoch. | | string | (optional) startedAfter | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that started after the given ms since the epoch. | | string | (optional) endedBefore | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that ended before the given ms since the epoch. | | string | (optional) endedAfter | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) that ended after the given ms since the epoch. | | double | (optional) totalBytesGreater | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `totalBytes` is greater than the given integer. | | double | (optional) totalBytesLess | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `totalBytes` is less than the given integer. | | string | (optional) filenameRegex | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `filename` matches the given regular expression. | | string | (optional) urlRegex | Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `url` matches the given regular expression. | | string | (optional) finalUrlRegex | Since Chrome 54. Limits results to [DownloadItem](/extensions/downloads#type-DownloadItem) whose `finalUrl` matches the given regular expression. | | integer | (optional) limit | The maximum number of matching [DownloadItem](/extensions/downloads#type-DownloadItem) returned. Defaults to 1000\\. Set to 0 in order to return all matching [DownloadItem](/extensions/downloads#type-DownloadItem). See [search](/extensions/downloads#method-search) for how to page through results. | | array of string | (optional) orderBy | Set elements of this array to [DownloadItem](/extensions/downloads#type-DownloadItem) properties in order to sort search results. For example, setting `orderBy=['startTime']` sorts the [DownloadItem](/extensions/downloads#type-DownloadItem) by their start time in ascending order. To specify descending order, prefix with a hyphen: '-startTime'. | | integer | (optional) id | The `id` of the [DownloadItem](/extensions/downloads#type-DownloadItem) to query. | | string | (optional) url | The absolute URL that this download initiated from, before any redirects. | | string | (optional) finalUrl | Since Chrome 54. The absolute URL that this download is being made from, after all redirects. | | string | (optional) filename | Absolute local path. | | [DangerType](/extensions/downloads#type-DangerType) | (optional) danger | Indication of whether this download is thought to be safe or known to be suspicious. | | string | (optional) mime | The file's MIME type. | | string | (optional) startTime | The time when the download began in ISO 8601 format. | | string | (optional) endTime | The time when the download ended in ISO 8601 format. | | [State](/extensions/downloads#type-State) | (optional) state | Indicates whether the download is progressing, interrupted, or complete. | | boolean | (optional) paused | True if the download has stopped reading data from the host, but kept the connection open. | | [InterruptReason](/extensions/downloads#type-InterruptReason) | (optional) error | Why a download was interrupted. | | double | (optional) bytesReceived | Number of bytes received so far from the host, without considering file compression. | | double | (optional) totalBytes | Number of bytes in the whole file, without considering file compression, or -1 if unknown. | | double | (optional) fileSize | Number of bytes in the whole file post-decompression, or -1 if unknown. | | boolean | (optional) exists | Whether the downloaded file exists; | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of integer erasedIds) {...};` | array of integer | erasedIds | | |---|---|---| | ### removeFile `whale.downloads.removeFile(integer downloadId, function callback)` Remove the downloaded file if it exists and the [DownloadItem](/extensions/downloads#type-DownloadItem) is complete; otherwise return an error through [runtime.lastError](/extensions/runtime#property-lastError). | Parameters | |---| | integer | downloadId | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### acceptDanger `whale.downloads.acceptDanger(integer downloadId, function callback)` Prompt the user to accept a dangerous download. Can only be called from a visible context (tab, window, or page/browser action popup). Does not automatically accept dangerous downloads. If the download is accepted, then an [onChanged](/extensions/downloads#event-onChanged) event will fire, otherwise nothing will happen. When all the data is fetched into a temporary file and either the download is not dangerous or the danger has been accepted, then the temporary file is renamed to the target filename, the |state| changes to 'complete', and [onChanged](/extensions/downloads#event-onChanged) fires. | Parameters | |---| | integer | downloadId | The identifier for the [DownloadItem](/extensions/downloads#type-DownloadItem). | | function | (optional) callback | Called when the danger prompt dialog closes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### drag `whale.downloads.drag(integer downloadId)` Initiate dragging the downloaded file to another application. Call in a javascript `ondragstart` handler. | Parameters | |---| | integer | downloadId | | ### setShelfEnabled `whale.downloads.setShelfEnabled(boolean enabled)` Enable or disable the gray shelf at the bottom of every window associated with the current browser profile. The shelf will be disabled as long as at least one extension has disabled it. Enabling the shelf while at least one other extension has disabled it will return an error through [runtime.lastError](/extensions/runtime#property-lastError). Requires the `\"downloads.shelf\"` permission in addition to the `\"downloads\"` permission. | Parameters | |---| | boolean | enabled | | ## Events ### onCreated This event fires with the [DownloadItem](/extensions/downloads#type-DownloadItem) object when a download begins. #### addListener `whale.downloads.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [DownloadItem](/extensions/downloads#type-DownloadItem) downloadItem) {...};` | [DownloadItem](/extensions/downloads#type-DownloadItem) | downloadItem | | |---|---|---| | ### onErased Fires with the `downloadId` when a download is erased from history. #### addListener `whale.downloads.onErased.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer downloadId) {...};` | integer | downloadId | |---|---| The `id` of the [DownloadItem](/extensions/downloads#type-DownloadItem) that was erased. | | ### onChanged When any of a [DownloadItem](/extensions/downloads#type-DownloadItem)'s properties except `bytesReceived` and `estimatedEndTime` changes, this event fires with the `downloadId` and an object containing the properties that changed. #### addListener `whale.downloads.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object downloadDelta) {...};` | object | downloadDelta | |---|---| | integer | id | |---|---| The `id` of the [DownloadItem](/extensions/downloads#type-DownloadItem) that changed. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) url | The change in `url`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) finalUrl | Since Chrome 54. The change in `finalUrl`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) filename | The change in `filename`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) danger | The change in `danger`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) mime | The change in `mime`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) startTime | The change in `startTime`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) endTime | The change in `endTime`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) state | The change in `state`, if any. | | [BooleanDelta](/extensions/downloads#type-BooleanDelta) | (optional) canResume | The change in `canResume`, if any. | | [BooleanDelta](/extensions/downloads#type-BooleanDelta) | (optional) paused | The change in `paused`, if any. | | [StringDelta](/extensions/downloads#type-StringDelta) | (optional) error | The change in `error`, if any. | | [DoubleDelta](/extensions/downloads#type-DoubleDelta) | (optional) totalBytes | The change in `totalBytes`, if any. | | [DoubleDelta](/extensions/downloads#type-DoubleDelta) | (optional) fileSize | The change in `fileSize`, if any. | | [BooleanDelta](/extensions/downloads#type-BooleanDelta) | (optional) exists | The change in `exists`, if any. | | | ### onDeterminingFilename During the filename determination process, extensions will be given the opportunity to override the target [DownloadItem.filename](/extensions/downloads#property-DownloadItem-filename). Each extension may not register more than one listener for this event. Each listener must call `suggest` exactly once, either synchronously or asynchronously. If the listener calls `suggest` asynchronously, then it must return `true`. If the listener neither calls `suggest` synchronously nor returns `true`, then `suggest` will be called automatically. The [DownloadItem](/extensions/downloads#type-DownloadItem) will not complete until all listeners have called `suggest`. Listeners may call `suggest` without any arguments in order to allow the download to use `downloadItem.filename` for its filename, or pass a `suggestion` object to `suggest` in order to override the target filename. If more than one extension overrides the filename, then the last extension installed whose listener passes a `suggestion` object to `suggest` wins. In order to avoid confusion regarding which extension will win, users should not install extensions that may conflict. If the download is initiated by [download](/extensions/downloads#method-download) and the target filename is known before the MIME type and tentative filename have been determined, pass `filename` to [download](/extensions/downloads#method-download) instead. #### addListener `whale.downloads.onDeterminingFilename.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [DownloadItem](/extensions/downloads#type-DownloadItem) downloadItem, function suggest) {...};` | [DownloadItem](/extensions/downloads#type-DownloadItem) | downloadItem | | |---|---|---| | function | suggest | The _suggest_ parameter should be a function that looks like this: `function(object suggestion) {...};` | object | (optional) suggestion | |---|---| | string | filename | |---|---| The [DownloadItem](/extensions/downloads#type-DownloadItem)'s new target [DownloadItem.filename](/extensions/downloads#property-DownloadItem-filename), as a path relative to the user's default Downloads directory, possibly containing subdirectories. Absolute paths, empty paths, and paths containing back-references \"..\" will be ignored. | | [FilenameConflictAction](/extensions/downloads#type-FilenameConflictAction) | (optional) conflictAction | The action to take if `filename` already exists. | | | | "},"extensions-events.html":{"url":"extensions-events.html","title":"events","keywords":"","body":"whale.events Description: The whale.events namespace contains common types used by APIs dispatching events to notify you when something interesting happens. Availability: Since Chrome 21. An `Event` is an object that allows you to be notified when something interesting happens. Here's an example of using the `whale.alarms.onAlarm` event to be notified whenever an alarm has elapsed: whale.alarms.onAlarm.**addListener(function(**alarm**) {** appendToLog('alarms.onAlarm --' + ' name: ' + alarm.name + ' scheduledTime: ' + alarm.scheduledTime); **});** As the example shows, you register for notification using `addListener()`. The argument to `addListener()` is always a function that you define to handle the event, but the parameters to the function depend on which event you're handling. Checking the documentation for [alarms.onAlarm](/extensions/alarms#event-onAlarm), you can see that the function has a single parameter: an [alarms.Alarm](/extensions/alarms#type-Alarm) object that has details about the elapsed alarm. Example APIs using Events: [alarms](/extensions/alarms), [i18n](/extensions/i18n), [identity](/extensions/identity), [runtime](/extensions/runtime). Most [chrome APIs](api_index) do. ## Declarative Event Handlers The declarative event handlers provide a means to define rules consisting of declarative conditions and actions. Conditions are evaluated in the browser rather than the JavaScript engine which reduces roundtrip latencies and allows for very high efficiency. Declarative event handlers are used for example in the [Declarative Web Request API](declarativeWebRequest) and [Declarative Content API](declarativeContent). This page describes the underlying concepts of all declarative event handlers. ### Rules The simplest possible rule consists of one or more conditions and one or more actions: var rule = { conditions: [ /* my conditions */ ], actions: [ /* my actions */ ] }; If any of the conditions is fulfilled, all actions are executed. In addition to conditions and actions you may give each rule an identifier, which simplifies unregistering previously registered rules, and a priority to define precedences among rules. Priorities are only considered if rules conflict each other or need to be executed in a specific order. Actions are executed in descending order of the priority of their rules. var rule = { id: \"my rule\", // optional, will be generated if not set. priority: 100, // optional, defaults to 100. conditions: [ /* my conditions */ ], actions: [ /* my actions */ ] }; ### Event objects [Event objects](events) may support rules. These event objects don't call a callback function when events happen but test whether any registered rule has at least one fulfilled condition and execute the actions associated with this rule. Event objects supporting the declarative API have three relevant methods: [events.Event.addRules](/extensions/events#method-Event-addRules), [events.Event.removeRules](/extensions/events#method-Event-removeRules), and [events.Event.getRules](/extensions/events#method-Event-getRules). ### Adding rules To add rules call the `addRules()` function of the event object. It takes an array of rule instances as its first parameter and a callback function that is called on completion. var rule_list = [rule1, rule2, ...]; function addRules(rule_list, function callback(details) {...}); If the rules were inserted successfully, the `details` parameter contains an array of inserted rules appearing in the same order as in the passed `rule_list` where the optional parameters `id` and `priority` were filled with the generated values. If any rule is invalid, e.g., because it contained an invalid condition or action, none of the rules are added and the [runtime.lastError](/extensions/runtime#property-lastError) variable is set when the callback function is called. Each rule in `rule_list` must contain a unique identifier that is not currently used by another rule or an empty identifier. **Note:** Rules are persistent across browsing sessions. Therefore, you should install rules during extension installation time using the `[runtime.onInstalled](/extensions/runtime#event-onInstalled)` event. Note that this event is also triggered when an extension is updated. Therefore, you should first clear previously installed rules and then register new rules. ### Removing rules To remove rules call the `removeRules()` function. It accepts an optional array of rule identifiers as its first parameter and a callback function as its second parameter. var rule_ids = [\"id1\", \"id2\", ...]; function removeRules(rule_ids, function callback() {...}); If `rule_ids` is an array of identifiers, all rules having identifiers listed in the array are removed. If `rule_ids` lists an identifier, that is unknown, this identifier is silently ignored. If `rule_ids` is `undefined`, all registered rules of this extension are removed. The `callback()` function is called when the rules were removed. ### Retrieving rules To retrieve a list of currently registered rules, call the `getRules()` function. It accepts an optional array of rule identifiers with the same semantics as `removeRules` and a callback function. var rule_ids = [\"id1\", \"id2\", ...]; function getRules(rule_ids, function callback(details) {...}); The `details` parameter passed to the `callback()` function refers to an array of rules including filled optional parameters. ### Performance To achieve maximum performance, you should keep the following guidelines in mind: * Register and unregister rules in bulk. After each registration or unregistration, Chrome needs to update internal data structures. This update is an expensive operation. Instead of var rule1 = {...}; var rule2 = {...}; whale.declarativeWebRequest.onRequest.addRules([rule1]); whale.declarativeWebRequest.onRequest.addRules([rule2]); prefer to write var rule1 = {...}; var rule2 = {...}; whale.declarativeWebRequest.onRequest.addRules([rule1, rule2]); * Prefer substring matching over matching using regular expressions in a [events.UrlFilter](/extensions/events#type-UrlFilter). Substring based matching is extremely fast. Instead of var match = new whale.declarativeWebRequest.RequestMatcher({ url: {urlMatches: \"example.com/[^?]*foo\" } }); prefer to write var match = new whale.declarativeWebRequest.RequestMatcher({ url: {hostSuffix: \"example.com\", pathContains: \"foo\"} }); * If you have many rules that all share the same actions, you may merge the rules into one because rules trigger their actions as soon as a single condition is fulfilled. This speeds up the matching and reduces memory consumption for duplicate action sets. Instead of var condition1 = new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }); var condition2 = new whale.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }); var rule1 = { conditions: [condition1], actions: [new whale.declarativeWebRequest.CancelRequest()]}; var rule2 = { conditions: [condition2], actions: [new whale.declarativeWebRequest.CancelRequest()]}; whale.declarativeWebRequest.onRequest.addRules([rule1, rule2]); prefer to write var rule = { conditions: [condition1, condition2], actions: [new whale.declarativeWebRequest.CancelRequest()]}; whale.declarativeWebRequest.onRequest.addRules([rule]); ## Filtered events Filtered events are a mechanism that allows listeners to specify a subset of events that they are interested in. A listener that makes use of a filter won't be invoked for events that don't pass the filter, which makes the listening code more declarative and efficient - an [event page](event_pages) page need not be woken up to handle events it doesn't care about. Filtered events are intended to allow a transition from manual filtering code like this: whale.webNavigation.onCommitted.addListener(function(e) { if (hasHostSuffix(e.url, 'google.com') || hasHostSuffix(e.url, 'google.com.au')) { // ... } }); into this: whale.webNavigation.onCommitted.addListener(function(e) { // ... }, {url: [{hostSuffix: 'google.com'}, {hostSuffix: 'google.com.au'}]}); Events support specific filters that are meaningful to that event. The list of filters that an event supports will be listed in the documentation for that event in the \"filters\" section. When matching URLs (as in the example above), event filters support the same URL matching capabilities as expressible with a [events.UrlFilter](/extensions/events#type-UrlFilter), except for scheme and port matching. ## Summary | Types | |---| | [Rule](#type-Rule) | | [Event](#type-Event) | | [UrlFilter](#type-UrlFilter) | ## Types ### Rule Description of a declarative rule for handling events. | properties | |---| | string | (optional) id | Optional identifier that allows referencing this rule. | | array of string | (optional) tags | Since Chrome 28. Tags can be used to annotate rules and perform operations on sets of rules. | | array of any | conditions | List of conditions that can trigger the actions. | | array of any | actions | List of actions that are triggered if one of the conditions is fulfilled. | | integer | (optional) priority | Optional priority of this rule. Defaults to 100. | ### Event An object which allows the addition and removal of listeners for a Chrome event. | methods | |---| | #### addListener `Event.addListener(function callback)` Registers an event listener _callback_ to an event. | Parameters | |---| | function | callback | Called when an event occurs. The parameters of this function depend on the type of event. The _callback_ parameter should be a function that looks like this: `function() {...};` | | | #### removeListener `Event.removeListener(function callback)` Deregisters an event listener _callback_ from an event. | Parameters | |---| | function | callback | Listener that shall be unregistered. The _callback_ parameter should be a function that looks like this: `function() {...};` | | | #### hasListener `boolean Event.hasListener(function callback)` | Parameters | |---| | function | callback | Listener whose registration status shall be tested. The _callback_ parameter should be a function that looks like this: `function() {...};` | | | #### hasListeners `boolean Event.hasListeners()` | | #### addRules `Event.addRules(array of [Rule](/extensions/events#type-Rule) rules, function callback)` Registers rules to handle events. | Parameters | |---| | array of [Rule](/extensions/events#type-Rule) | rules | Rules to be registered. These do not replace previously registered rules. | | function | (optional) callback | Called with registered rules. If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of [Rule](/extensions/events#type-Rule) rules) {...};` | array of [Rule](/extensions/events#type-Rule) | rules | |---|---| Rules that were registered, the optional parameters are filled with values. | | | | #### getRules `Event.getRules(array of string ruleIdentifiers, function callback)` Returns currently registered rules. | Parameters | |---| | array of string | (optional) ruleIdentifiers | If an array is passed, only rules with identifiers contained in this array are returned. | | function | callback | Called with registered rules. The _callback_ parameter should be a function that looks like this: `function(array of [Rule](/extensions/events#type-Rule) rules) {...};` | array of [Rule](/extensions/events#type-Rule) | rules | |---|---| Rules that were registered, the optional parameters are filled with values. | | | | #### removeRules `Event.removeRules(array of string ruleIdentifiers, function callback)` Unregisters currently registered rules. | Parameters | |---| | array of string | (optional) ruleIdentifiers | If an array is passed, only rules with identifiers contained in this array are unregistered. | | function | (optional) callback | Called when rules were unregistered. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | ### UrlFilter Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | properties | |---| | string | (optional) hostContains | Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Since Chrome 23. Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Since Chrome 28. Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | "},"extensions-experimental.html":{"url":"extensions-experimental.html","title":"experimental","keywords":"","body":"whale.experimental.* APIs List of APIs We'd like your feedback on the following experimental APIs: Name Description experimental.devtools.audits Use the whale.experimental.devtools.audits API to add new audit categories to the Developer Tools' Audit panel. Pay special attention to the following APIs, which we expect to finalize soon: devtools, permissions, For examples of using the experimental APIs, see Samples. Caution: Don't depend on these experimental APIs. They might disappear, and they will change. Also, the Chrome Web Store doesn't allow you to upload items that use experimental APIs. How to use experimental APIs Make sure you're using either Canary (which you can use at the same time as other Chrome channels) or the Dev channel. Although the experimental APIs might work in other versions, we need your feedback on the latest incarnation of the APIs, which you can find in Canary and on the Dev channel. Specify the \"experimental\" permission in your manifest, like this: \"permissions\": [ **\"experimental\"**, ... ], Enable the experimental API in your browser. You can do this in either of two ways: Go to chrome://flags, find \"Experimental Extension APIs\", click its \"Enable\" link, and restart Chrome. From now on, unless you return to that page and disable experimental APIs, you'll be able to run extensions and apps that use experimental APIs. Specify the --enable-experimental-extension-apis flag each time you launch the browser. On Windows, you can do this by modifying the properties of the shortcut that you use to launch Google Chrome. For example: _path_to_whale.exe_ **--enable-experimental-extension-apis** Give us feedback! Your comments and suggestions help us improve the APIs and decide which ones should move from experimental to supported. More APIs For information on the standard APIs, see whale.* APIs and Other APIs. Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-tab-capture.html":{"url":"extensions-tab-capture.html","title":"tab-capture","keywords":"","body":"whale.tabCapture Description: Use the whale.tabCapture API to interact with tab media streams. Availability: Since Chrome 31. Permissions: \"tabCapture\" ## Summary | Types | |---| | [CaptureInfo](#type-CaptureInfo) | | [MediaStreamConstraint](#type-MediaStreamConstraint) | | [CaptureOptions](#type-CaptureOptions) | | Methods | | [capture](#method-capture) − `whale.tabCapture.capture( CaptureOptions options, function callback)` | | [getCapturedTabs](#method-getCapturedTabs) − `whale.tabCapture.getCapturedTabs(function callback)` | | [captureOffscreenTab](#method-captureOffscreenTab) − `whale.tabCapture.captureOffscreenTab(string startUrl, CaptureOptions options, function callback)` | | Events | | [onStatusChanged](#event-onStatusChanged) | ## Types ### CaptureInfo | properties | |---| | integer | tabId | The id of the tab whose status changed. | | enum of `\"pending\"`, `\"active\"`, `\"stopped\"`, or `\"error\"` | status | The new capture status of the tab. | | boolean | fullscreen | Whether an element in the tab being captured is in fullscreen mode. | ### MediaStreamConstraint | properties | |---| | object | mandatory | | | object | (optional) optional | Since Chrome 32. | ### CaptureOptions | properties | |---| | boolean | (optional) audio | | | boolean | (optional) video | | | [MediaStreamConstraint](/extensions/tabCapture#type-MediaStreamConstraint) | (optional) audioConstraints | | | [MediaStreamConstraint](/extensions/tabCapture#type-MediaStreamConstraint) | (optional) videoConstraints | | ## Methods ### capture `whale.tabCapture.capture( [CaptureOptions](/extensions/tabCapture#type-CaptureOptions) options, function callback)` Captures the visible area of the currently active tab. Capture can only be started on the currently active tab after the extension has been _invoked_, similar to the way that [activeTab](activeTab#invoking-activeTab) works. Capture is maintained across page navigations within the tab, and stops when the tab is closed, or the media stream is closed by the extension. | Parameters | |---| | [CaptureOptions](/extensions/tabCapture#type-CaptureOptions) | options | Configures the returned media stream. | | function | callback | Callback with either the tab capture MediaStream or `null`. `null` indicates an error has occurred and the client may query whale.runtime.lastError to access the error details. The _callback_ parameter should be a function that looks like this: `function(LocalMediaStream stream) {...};` | LocalMediaStream | stream | | |---|---|---| | ### getCapturedTabs `whale.tabCapture.getCapturedTabs(function callback)` Returns a list of tabs that have requested capture or are being captured, i.e. status != stopped and status != error. This allows extensions to inform the user that there is an existing tab capture that would prevent a new tab capture from succeeding (or to prevent redundant requests for the same tab). | Parameters | |---| | function | callback | Callback invoked with CaptureInfo[] for captured tabs. The _callback_ parameter should be a function that looks like this: `function(array of [CaptureInfo](/extensions/tabCapture#type-CaptureInfo) result) {...};` | array of [CaptureInfo](/extensions/tabCapture#type-CaptureInfo) | result | | |---|---|---| | ### captureOffscreenTab `whale.tabCapture.captureOffscreenTab(string startUrl, [CaptureOptions](/extensions/tabCapture#type-CaptureOptions) options, function callback)` Since Chrome 47. Creates an off-screen tab and navigates it to the given |startUrl|. Then, capture is started and a MediaStream is returned via |callback|. Off-screen tabs are isolated from the user's normal browser experience. They do not show up in the browser window or tab strip, nor are they visible to extensions (e.g., via the whale.tabs.* APIs). An off-screen tab remains alive until one of three events occurs: 1\\. All MediaStreams providing its captured content are closed; 2\\. the page self-closes (e.g., via window.close()); 3\\. the extension that called captureOffscreenTab() is unloaded. Sandboxing: The off-screen tab does not have any access whatsoever to the local user profile (including cookies, HTTP auth, etc.). Instead, it is provided its own sandboxed profile. Also, it cannot access any interactive resources such as keyboard/mouse input, media recording devices (e.g., web cams), copy/paste to/from the system clipboard, etc. Note: This is a new API, currently only available in Canary/Dev channel, and may change without notice. | Parameters | |---| | string | startUrl | | | [CaptureOptions](/extensions/tabCapture#type-CaptureOptions) | options | Constraints for the capture and returned MediaStream. | | function | callback | Callback with either the tab capture MediaStream or `null`. `null` indicates an error has occurred and the client may query whale.runtime.lastError to access the error details. The _callback_ parameter should be a function that looks like this: `function(LocalMediaStream stream) {...};` | LocalMediaStream | stream | | |---|---|---| | ## Events ### onStatusChanged Event fired when the capture status of a tab changes. This allows extension authors to keep track of the capture status of tabs to keep UI elements like page actions in sync. #### addListener `whale.tabCapture.onStatusChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [CaptureInfo](/extensions/tabCapture#type-CaptureInfo) info) {...};` | [CaptureInfo](/extensions/tabCapture#type-CaptureInfo) | info | |---|---| CaptureInfo with new capture status for the tab. | | "},"extensions-extension-types.html":{"url":"extensions-extension-types.html","title":"extension-types","keywords":"","body":"whale.extensionTypes Description: The whale.extensionTypes API contains type declarations for Chrome extensions. Availability: Since Chrome 39. ## Summary | Types | |---| | [ImageFormat](#type-ImageFormat) | | [ImageDetails](#type-ImageDetails) | | [RunAt](#type-RunAt) | | [InjectDetails](#type-InjectDetails) | ## Types ### ImageFormat The format of an image. | Enum | |---| | `\"jpeg\"`, or `\"png\"` | ### ImageDetails Details about the format and quality of an image. | properties | |---| | enum of `\"jpeg\"`, or `\"png\"` | (optional) format | The format of the resulting image. Default is `\"jpeg\"`. | | integer | (optional) quality | When format is `\"jpeg\"`, controls the quality of the resulting image. This value is ignored for PNG images. As quality is decreased, the resulting image will have more visual artifacts, and the number of bytes needed to store it will decrease. | ### RunAt The soonest that the JavaScript or CSS will be injected into the tab. | Enum | |---| | `\"document_start\"`, `\"document_end\"`, or `\"document_idle\"` | ### InjectDetails Details of the script or CSS to inject. Either the code or the file property must be set, but both may not be set at the same time. | properties | |---| | string | (optional) code | JavaScript or CSS code to inject. **Warning:** Be careful using the `code` parameter. Incorrect use of it may open your extension to [cross site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks. | | string | (optional) file | JavaScript or CSS file to inject. | | boolean | (optional) allFrames | If allFrames is `true`, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's `false` and is only injected into the top frame. If `true` and `frameId` is set, then the code is inserted in the selected frame and all of its child frames. | | integer | (optional) frameId | Since Chrome 50. The [frame](webNavigation#frame_ids) where the script or CSS should be injected. Defaults to 0 (the top-level frame). | | boolean | (optional) matchAboutBlank | If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is `false`. | | enum of `\"document_start\"`, `\"document_end\"`, or `\"document_idle\"` | (optional) runAt | The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\". | "},"extensions-tabs.html":{"url":"extensions-tabs.html","title":"tabs","keywords":"","body":"whale.tabs Description: Use the whale.tabs API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser. Availability: Since Chrome 20. Permissions: The majority of the whale.tabs API can be used without declaring any permission. However, the \"tabs\" permission is required in order to populate the [url](#property-Tab-url), [title](#property-Tab-title), and [favIconUrl](#property-Tab-favIconUrl) properties of [Tab](#type-Tab). ## Manifest You can use most `whale.tabs` methods and events without declaring any permissions in the extension's [manifest](manifest) file. However, if you require access to the `[url](/extensions/tabs#property-Tab-url)`, `[title](/extensions/tabs#property-Tab-title)`, or `[favIconUrl](/extensions/tabs#property-Tab-favIconUrl)` properties of `[tabs.Tab](/extensions/tabs#type-Tab)`, you must declare the `\"tabs\"` permission in the manifest, as shown below: { \"name\": \"My extension\", ... **\"permissions\": [ \"tabs\" ]**, ... } ## Examples ![Two tabs in a window](/static/images/tabs.png) You can find simple examples of manipulating tabs with the `whale.tabs` API in the [examples/api/tabs](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/tabs/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [MutedInfoReason](#type-MutedInfoReason) | | [MutedInfo](#type-MutedInfo) | | [Tab](#type-Tab) | | [ZoomSettingsMode](#type-ZoomSettingsMode) | | [ZoomSettingsScope](#type-ZoomSettingsScope) | | [ZoomSettings](#type-ZoomSettings) | | [TabStatus](#type-TabStatus) | | [WindowType](#type-WindowType) | | Properties | | [TAB_ID_NONE](#property-TAB_ID_NONE) | | Methods | | [get](#method-get) − `whale.tabs.get(integer tabId, function callback)` | | [getCurrent](#method-getCurrent) − `whale.tabs.getCurrent(function callback)` | | [connect](#method-connect) − `runtime.Port whale.tabs.connect(integer tabId, object connectInfo)` | | [sendRequest](#method-sendRequest) − `whale.tabs.sendRequest(integer tabId, any request, function responseCallback)` | | [sendMessage](#method-sendMessage) − `whale.tabs.sendMessage(integer tabId, any message, object options, function responseCallback)` | | [getSelected](#method-getSelected) − `whale.tabs.getSelected(integer windowId, function callback)` | | [getAllInWindow](#method-getAllInWindow) − `whale.tabs.getAllInWindow(integer windowId, function callback)` | | [create](#method-create) − `whale.tabs.create(object createProperties, function callback)` | | [duplicate](#method-duplicate) − `whale.tabs.duplicate(integer tabId, function callback)` | | [query](#method-query) − `whale.tabs.query(object queryInfo, function callback)` | | [highlight](#method-highlight) − `whale.tabs.highlight(object highlightInfo, function callback)` | | [update](#method-update) − `whale.tabs.update(integer tabId, object updateProperties, function callback)` | | [move](#method-move) − `whale.tabs.move(integer or array of integer tabIds, object moveProperties, function callback)` | | [reload](#method-reload) − `whale.tabs.reload(integer tabId, object reloadProperties, function callback)` | | [remove](#method-remove) − `whale.tabs.remove(integer or array of integer tabIds, function callback)` | | [detectLanguage](#method-detectLanguage) − `whale.tabs.detectLanguage(integer tabId, function callback)` | | [captureVisibleTab](#method-captureVisibleTab) − `whale.tabs.captureVisibleTab(integer windowId, object options, function callback)` | | [executeScript](#method-executeScript) − `whale.tabs.executeScript(integer tabId, object details, function callback)` | | [insertCSS](#method-insertCSS) − `whale.tabs.insertCSS(integer tabId, object details, function callback)` | | [setZoom](#method-setZoom) − `whale.tabs.setZoom(integer tabId, double zoomFactor, function callback)` | | [getZoom](#method-getZoom) − `whale.tabs.getZoom(integer tabId, function callback)` | | [setZoomSettings](#method-setZoomSettings) − `whale.tabs.setZoomSettings(integer tabId, ZoomSettings zoomSettings, function callback)` | | [getZoomSettings](#method-getZoomSettings) − `whale.tabs.getZoomSettings(integer tabId, function callback)` | | [discard](#method-discard) − `whale.tabs.discard(integer tabId, function callback)` | | Events | | [onCreated](#event-onCreated) | | [onUpdated](#event-onUpdated) | | [onMoved](#event-onMoved) | | [onSelectionChanged](#event-onSelectionChanged) | | [onActiveChanged](#event-onActiveChanged) | | [onActivated](#event-onActivated) | | [onHighlightChanged](#event-onHighlightChanged) | | [onHighlighted](#event-onHighlighted) | | [onDetached](#event-onDetached) | | [onAttached](#event-onAttached) | | [onRemoved](#event-onRemoved) | | [onReplaced](#event-onReplaced) | | [onZoomChange](#event-onZoomChange) | ## Types ### MutedInfoReason An event that caused a muted state change. | Enum | |---| | `\"user\"` A user input action has set/overridden the muted state. `\"capture\"` Tab capture started, forcing a muted state change. `\"extension\"` An extension, identified by the extensionId field, set the muted state. | ### MutedInfo Since Chrome 46. Tab muted state and the reason for the last state change. | properties | |---| | boolean | muted | Whether the tab is prevented from playing sound (but hasn't necessarily recently produced sound). Equivalent to whether the muted audio indicator is showing. | | [MutedInfoReason](/extensions/tabs#type-MutedInfoReason) | (optional) reason | The reason the tab was muted or unmuted. Not set if the tab's mute state has never been changed. | | string | (optional) extensionId | The ID of the extension that changed the muted state. Not set if an extension was not the reason the muted state last changed. | ### Tab | properties | |---| | integer | (optional) id | The ID of the tab. Tab IDs are unique within a browser session. Under some circumstances a Tab may not be assigned an ID, for example when querying foreign tabs using the [sessions](/extensions/sessions) API, in which case a session ID may be present. Tab ID can also be set to whale.tabs.TAB_ID_NONE for apps and devtools windows. | | integer | index | The zero-based index of the tab within its window. | | integer | windowId | The ID of the window the tab is contained within. | | integer | (optional) openerTabId | The ID of the tab that opened this tab, if any. This property is only present if the opener tab still exists. | | boolean | selected | **Deprecated** since Chrome 33. Please use [tabs.Tab.highlighted](/extensions/tabs#property-Tab-highlighted). Whether the tab is selected. | | boolean | highlighted | Whether the tab is highlighted. | | boolean | active | Whether the tab is active in its window. (Does not necessarily mean the window is focused.) | | boolean | pinned | Whether the tab is pinned. | | boolean | (optional) audible | Since Chrome 45. Whether the tab has produced sound over the past couple of seconds (but it might not be heard if also muted). Equivalent to whether the speaker audio indicator is showing. | | boolean | discarded | Since Chrome 54. Whether the tab is discarded. A discarded tab is one whose content has been unloaded from memory, but is still visible in the tab strip. Its content gets reloaded the next time it's activated. | | boolean | autoDiscardable | Since Chrome 54. Whether the tab can be discarded automatically by the browser when resources are low. | | [MutedInfo](/extensions/tabs#type-MutedInfo) | (optional) mutedInfo | Since Chrome 46. Current tab muted state and the reason for the last state change. | | string | (optional) url | The URL the tab is displaying. This property is only present if the extension's manifest includes the `\"tabs\"` permission. | | string | (optional) title | The title of the tab. This property is only present if the extension's manifest includes the `\"tabs\"` permission. | | string | (optional) favIconUrl | The URL of the tab's favicon. This property is only present if the extension's manifest includes the `\"tabs\"` permission. It may also be an empty string if the tab is loading. | | string | (optional) status | Either _loading_ or _complete_. | | boolean | incognito | Whether the tab is in an incognito window. | | integer | (optional) width | Since Chrome 31. The width of the tab in pixels. | | integer | (optional) height | Since Chrome 31. The height of the tab in pixels. | | string | (optional) sessionId | Since Chrome 31. The session ID used to uniquely identify a Tab obtained from the [sessions](/extensions/sessions) API. | ### ZoomSettingsMode Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to `automatic`. | Enum | |---| | `\"automatic\"` Zoom changes are handled automatically by the browser. `\"manual\"` Overrides the automatic handling of zoom changes. The `onZoomChange` event will still be dispatched, and it is the responsibility of the extension to listen for this event and manually scale the page. This mode does not support `per-origin` zooming, and will thus ignore the `scope` zoom setting and assume `per-tab`. `\"disabled\"` Disables all zooming in the tab. The tab will revert to the default zoom level, and all attempted zoom changes will be ignored. | ### ZoomSettingsScope Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to `per-origin` when in `automatic` mode, and `per-tab` otherwise. | Enum | |---| | `\"per-origin\"` Zoom changes will persist in the zoomed page's origin, i.e. all other tabs navigated to that same origin will be zoomed as well. Moreover, `per-origin` zoom changes are saved with the origin, meaning that when navigating to other pages in the same origin, they will all be zoomed to the same zoom factor. The `per-origin` scope is only available in the `automatic` mode. `\"per-tab\"` Zoom changes only take effect in this tab, and zoom changes in other tabs will not affect the zooming of this tab. Also, `per-tab` zoom changes are reset on navigation; navigating a tab will always load pages with their `per-origin` zoom factors. | ### ZoomSettings Since Chrome 38. Defines how zoom changes in a tab are handled and at what scope. | properties | |---| | [ZoomSettingsMode](/extensions/tabs#type-ZoomSettingsMode) | (optional) mode | Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to `automatic`. | | [ZoomSettingsScope](/extensions/tabs#type-ZoomSettingsScope) | (optional) scope | Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to `per-origin` when in `automatic` mode, and `per-tab` otherwise. | | double | (optional) defaultZoomFactor | Since Chrome 43. Used to return the default zoom level for the current tab in calls to tabs.getZoomSettings. | ### TabStatus Whether the tabs have completed loading. | Enum | |---| | `\"loading\"`, or `\"complete\"` | ### WindowType The type of window. | Enum | |---| | `\"normal\"`, `\"popup\"`, `\"panel\"`, `\"app\"`, or `\"devtools\"` | ## Properties | `-1` | `whale.tabs.TAB_ID_NONE` | |---|---| Since Chrome 46. An ID which represents the absence of a browser tab. | ## Methods ### get `whale.tabs.get(integer tabId, function callback)` Retrieves details about the specified tab. | Parameters | |---| | integer | tabId | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | ### getCurrent `whale.tabs.getCurrent(function callback)` Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view). | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | (optional) tab | | |---|---|---| | ### connect `[runtime.Port](/extensions/runtime#type-Port) whale.tabs.connect(integer tabId, object connectInfo)` Connects to the content script(s) in the specified tab. The [runtime.onConnect](/extensions/runtime#event-onConnect) event is fired in each content script running in the specified tab for the current extension. For more details, see [Content Script Messaging](messaging). | Parameters | |---| | integer | tabId | | | object | (optional) connectInfo | | string | (optional) name | |---|---| Will be passed into onConnect for content scripts that are listening for the connection event. | | integer | (optional) frameId | Since Chrome 41. Open a port to a specific [frame](webNavigation#frame_ids) identified by `frameId` instead of all frames in the tab. | | ### sendRequest `whale.tabs.sendRequest(integer tabId, any request, function responseCallback)` **Deprecated** since Chrome 33. Please use [runtime.sendMessage](/extensions/runtime#method-sendMessage). Sends a single request to the content script(s) in the specified tab, with an optional callback to run when a response is sent back. The [extension.onRequest](/extensions/extension#event-onRequest) event is fired in each content script running in the specified tab for the current extension. | Parameters | |---| | integer | tabId | | | any | request | | | function | (optional) responseCallback | If you specify the _responseCallback_ parameter, it should be a function that looks like this: `function(any response) {...};` | any | response | |---|---| The JSON response object sent by the handler of the request. If an error occurs while connecting to the specified tab, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. | | ### sendMessage `whale.tabs.sendMessage(integer tabId, any message, object options, function responseCallback)` Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back. The [runtime.onMessage](/extensions/runtime#event-onMessage) event is fired in each content script running in the specified tab for the current extension. | Parameters | |---| | integer | tabId | | | any | message | The message to send. This message should be a JSON-ifiable object. | | object | (optional) options | Since Chrome 41. | integer | (optional) frameId | |---|---| Send a message to a specific [frame](webNavigation#frame_ids) identified by `frameId` instead of all frames in the tab. | | | function | (optional) responseCallback | If you specify the _responseCallback_ parameter, it should be a function that looks like this: `function(any response) {...};` | any | response | |---|---| The JSON response object sent by the handler of the message. If an error occurs while connecting to the specified tab, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. | | ### getSelected `whale.tabs.getSelected(integer windowId, function callback)` **Deprecated** since Chrome 33. Please use [tabs.query](/extensions/tabs#method-query) `{active: true}`. Gets the tab that is selected in the specified window. | Parameters | |---| | integer | (optional) windowId | Defaults to the [current window](windows#current-window). | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | ### getAllInWindow `whale.tabs.getAllInWindow(integer windowId, function callback)` **Deprecated** since Chrome 33. Please use [tabs.query](/extensions/tabs#method-query) `{windowId: windowId}`. Gets details about all tabs in the specified window. | Parameters | |---| | integer | (optional) windowId | Defaults to the [current window](windows#current-window). | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Tab](/extensions/tabs#type-Tab) tabs) {...};` | array of [Tab](/extensions/tabs#type-Tab) | tabs | | |---|---|---| | ### create `whale.tabs.create(object createProperties, function callback)` Creates a new tab. | Parameters | |---| | object | createProperties | | integer | (optional) windowId | |---|---| The window to create the new tab in. Defaults to the [current window](windows#current-window). | | integer | (optional) index | The position the tab should take in the window. The provided value will be clamped to between zero and the number of tabs in the window. | | string | (optional) url | The URL to navigate the tab to initially. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page. | | boolean | (optional) active | Whether the tab should become the active tab in the window. Does not affect whether the window is focused (see [windows.update](/extensions/windows#method-update)). Defaults to true. | | boolean | (optional) selected | **Deprecated** since Chrome 33. Please use _active_. Whether the tab should become the selected tab in the window. Defaults to true | | boolean | (optional) pinned | Whether the tab should be pinned. Defaults to false | | integer | (optional) openerTabId | The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as the newly created tab. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | tab | |---|---| Details about the created tab. Will contain the ID of the new tab. | | ### duplicate `whale.tabs.duplicate(integer tabId, function callback)` Since Chrome 23. Duplicates a tab. | Parameters | |---| | integer | tabId | The ID of the tab which is to be duplicated. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | (optional) tab | |---|---| Details about the duplicated tab. The [tabs.Tab](/extensions/tabs#type-Tab) object doesn't contain `url`, `title` and `favIconUrl` if the `\"tabs\"` permission has not been requested. | | ### query `whale.tabs.query(object queryInfo, function callback)` Gets all tabs that have the specified properties, or all tabs if no properties are specified. | Parameters | |---| | object | queryInfo | | boolean | (optional) active | |---|---| Whether the tabs are active in their windows. | | boolean | (optional) pinned | Whether the tabs are pinned. | | boolean | (optional) audible | Since Chrome 45. Whether the tabs are audible. | | boolean | (optional) muted | Since Chrome 45. Whether the tabs are muted. | | boolean | (optional) highlighted | Whether the tabs are highlighted. | | boolean | (optional) discarded | Since Chrome 54. Whether the tabs are discarded. A discarded tab is one whose content has been unloaded from memory, but is still visible in the tab strip. Its content gets reloaded the next time it's activated. | | boolean | (optional) autoDiscardable | Since Chrome 54. Whether the tabs can be discarded automatically by the browser when resources are low. | | boolean | (optional) currentWindow | Whether the tabs are in the [current window](windows#current-window). | | boolean | (optional) lastFocusedWindow | Whether the tabs are in the last focused window. | | [TabStatus](/extensions/tabs#type-TabStatus) | (optional) status | Whether the tabs have completed loading. | | string | (optional) title | Match page titles against a pattern. Note that this property is ignored if the extension doesn't have the `\"tabs\"` permission. | | string or array of string | (optional) url | Match tabs against one or more [URL patterns](match_patterns). Note that fragment identifiers are not matched. Note that this property is ignored if the extension doesn't have the `\"tabs\"` permission. | | integer | (optional) windowId | The ID of the parent window, or [windows.WINDOW_ID_CURRENT](/extensions/windows#property-WINDOW_ID_CURRENT) for the [current window](windows#current-window). | | [WindowType](/extensions/tabs#type-WindowType) | (optional) windowType | The type of window the tabs are in. | | integer | (optional) index | The position of the tabs within their windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Tab](/extensions/tabs#type-Tab) result) {...};` | array of [Tab](/extensions/tabs#type-Tab) | result | | |---|---|---| | ### highlight `whale.tabs.highlight(object highlightInfo, function callback)` Highlights the given tabs. | Parameters | |---| | object | highlightInfo | | integer | (optional) windowId | |---|---| The window that contains the tabs. | | array of integer or integer | tabs | One or more tab indices to highlight. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [windows.Window](/extensions/windows#type-Window) window) {...};` | [windows.Window](/extensions/windows#type-Window) | window | |---|---| Contains details about the window whose tabs were highlighted. | | ### update `whale.tabs.update(integer tabId, object updateProperties, function callback)` Modifies the properties of a tab. Properties that are not specified in updateProperties are not modified. | Parameters | |---| | integer | (optional) tabId | Defaults to the selected tab of the [current window](windows#current-window). | | object | updateProperties | | string | (optional) url | |---|---| A URL to navigate the tab to. | | boolean | (optional) active | Whether the tab should be active. Does not affect whether the window is focused (see [windows.update](/extensions/windows#method-update)). | | boolean | (optional) highlighted | Adds or removes the tab from the current selection. | | boolean | (optional) selected | **Deprecated** since Chrome 33. Please use _highlighted_. Whether the tab should be selected. | | boolean | (optional) pinned | Whether the tab should be pinned. | | boolean | (optional) muted | Since Chrome 45. Whether the tab should be muted. | | integer | (optional) openerTabId | The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab. | | boolean | (optional) autoDiscardable | Since Chrome 54. Whether the tab should be discarded automatically by the browser when resources are low. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | (optional) tab | |---|---| Details about the updated tab. The [tabs.Tab](/extensions/tabs#type-Tab) object doesn't contain `url`, `title` and `favIconUrl` if the `\"tabs\"` permission has not been requested. | | ### move `whale.tabs.move(integer or array of integer tabIds, object moveProperties, function callback)` Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === \"normal\") windows. | Parameters | |---| | integer or array of integer | tabIds | The tab or list of tabs to move. | | object | moveProperties | | integer | (optional) windowId | |---|---| Defaults to the window the tab is currently in. | | integer | index | The position to move the window to. -1 will place the tab at the end of the window. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) or array of [Tab](/extensions/tabs#type-Tab) tabs) {...};` | [Tab](/extensions/tabs#type-Tab) or array of [Tab](/extensions/tabs#type-Tab) | tabs | |---|---| Details about the moved tabs. | | ### reload `whale.tabs.reload(integer tabId, object reloadProperties, function callback)` Reload a tab. | Parameters | |---| | integer | (optional) tabId | The ID of the tab to reload; defaults to the selected tab of the current window. | | object | (optional) reloadProperties | | boolean | (optional) bypassCache | |---|---| Whether using any local cache. Default is false. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### remove `whale.tabs.remove(integer or array of integer tabIds, function callback)` Closes one or more tabs. | Parameters | |---| | integer or array of integer | tabIds | The tab or list of tabs to close. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### detectLanguage `whale.tabs.detectLanguage(integer tabId, function callback)` Detects the primary language of the content in a tab. | Parameters | |---| | integer | (optional) tabId | Defaults to the active tab of the [current window](windows#current-window). | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string language) {...};` | string | language | |---|---| An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). The 2nd to 4th columns will be checked and the first non-NULL value will be returned except for Simplified Chinese for which zh-CN will be returned. For an unknown language, `und` will be returned. | | ### captureVisibleTab `whale.tabs.captureVisibleTab(integer windowId, object options, function callback)` Captures the visible area of the currently active tab in the specified window. You must have [](declare_permissions) permission to use this method. | Parameters | |---| | integer | (optional) windowId | The target window. Defaults to the [current window](windows#current-window). | | object | (optional) options | Details about the format and quality of an image. | enum of `\"jpeg\"`, or `\"png\"` | (optional) format | |---|---| The format of the resulting image. Default is `\"jpeg\"`. | | integer | (optional) quality | When format is `\"jpeg\"`, controls the quality of the resulting image. This value is ignored for PNG images. As quality is decreased, the resulting image will have more visual artifacts, and the number of bytes needed to store it will decrease. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string dataUrl) {...};` | string | dataUrl | |---|---| A data URL which encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML Image element for display. | | ### executeScript `whale.tabs.executeScript(integer tabId, object details, function callback)` Injects JavaScript code into a page. For details, see the [programmatic injection](content_scripts#pi) section of the content scripts doc. | Parameters | |---| | integer | (optional) tabId | The ID of the tab in which to run the script; defaults to the active tab of the current window. | | object | details | Details of the script to run. Either the code or the file property must be set, but both may not be set at the same time. | string | (optional) code | |---|---| JavaScript or CSS code to inject. **Warning:** Be careful using the `code` parameter. Incorrect use of it may open your extension to [cross site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks. | | string | (optional) file | JavaScript or CSS file to inject. | | boolean | (optional) allFrames | If allFrames is `true`, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's `false` and is only injected into the top frame. If `true` and `frameId` is set, then the code is inserted in the selected frame and all of its child frames. | | integer | (optional) frameId | Since Chrome 39. The [frame](webNavigation#frame_ids) where the script or CSS should be injected. Defaults to 0 (the top-level frame). | | boolean | (optional) matchAboutBlank | Since Chrome 39. If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is `false`. | | enum of `\"document_start\"`, `\"document_end\"`, or `\"document_idle\"` | (optional) runAt | The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\". | | | function | (optional) callback | Called after all the JavaScript has been executed. If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of any result) {...};` | array of any | (optional) result | |---|---| The result of the script in every injected frame. | | ### insertCSS `whale.tabs.insertCSS(integer tabId, object details, function callback)` Injects CSS into a page. For details, see the [programmatic injection](content_scripts#pi) section of the content scripts doc. | Parameters | |---| | integer | (optional) tabId | The ID of the tab in which to insert the CSS; defaults to the active tab of the current window. | | object | details | Details of the CSS text to insert. Either the code or the file property must be set, but both may not be set at the same time. | string | (optional) code | |---|---| JavaScript or CSS code to inject. **Warning:** Be careful using the `code` parameter. Incorrect use of it may open your extension to [cross site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks. | | string | (optional) file | JavaScript or CSS file to inject. | | boolean | (optional) allFrames | If allFrames is `true`, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's `false` and is only injected into the top frame. If `true` and `frameId` is set, then the code is inserted in the selected frame and all of its child frames. | | integer | (optional) frameId | Since Chrome 39. The [frame](webNavigation#frame_ids) where the script or CSS should be injected. Defaults to 0 (the top-level frame). | | boolean | (optional) matchAboutBlank | Since Chrome 39. If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is `false`. | | enum of `\"document_start\"`, `\"document_end\"`, or `\"document_idle\"` | (optional) runAt | The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\". | | | function | (optional) callback | Called when all the CSS has been inserted. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setZoom `whale.tabs.setZoom(integer tabId, double zoomFactor, function callback)` Since Chrome 42. Zooms a specified tab. | Parameters | |---| | integer | (optional) tabId | Since Chrome 38. The ID of the tab to zoom; defaults to the active tab of the current window. | | double | zoomFactor | Since Chrome 38. The new zoom factor. Use a value of 0 here to set the tab to its current default zoom factor. Values greater than zero specify a (possibly non-default) zoom factor for the tab. | | function | (optional) callback | Called after the zoom factor has been changed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getZoom `whale.tabs.getZoom(integer tabId, function callback)` Since Chrome 42. Gets the current zoom factor of a specified tab. | Parameters | |---| | integer | (optional) tabId | Since Chrome 38. The ID of the tab to get the current zoom factor from; defaults to the active tab of the current window. | | function | callback | Called with the tab's current zoom factor after it has been fetched. The _callback_ parameter should be a function that looks like this: `function(double zoomFactor) {...};` | double | zoomFactor | |---|---| The tab's current zoom factor. | | ### setZoomSettings `whale.tabs.setZoomSettings(integer tabId, [ZoomSettings](/extensions/tabs#type-ZoomSettings) zoomSettings, function callback)` Since Chrome 42. Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab. | Parameters | |---| | integer | (optional) tabId | Since Chrome 38. The ID of the tab to change the zoom settings for; defaults to the active tab of the current window. | | [ZoomSettings](/extensions/tabs#type-ZoomSettings) | zoomSettings | Since Chrome 38. Defines how zoom changes are handled and at what scope. | | function | (optional) callback | Called after the zoom settings have been changed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getZoomSettings `whale.tabs.getZoomSettings(integer tabId, function callback)` Since Chrome 42. Gets the current zoom settings of a specified tab. | Parameters | |---| | integer | (optional) tabId | Since Chrome 38. The ID of the tab to get the current zoom settings from; defaults to the active tab of the current window. | | function | callback | Called with the tab's current zoom settings. The _callback_ parameter should be a function that looks like this: `function( [ZoomSettings](/extensions/tabs#type-ZoomSettings) zoomSettings) {...};` | [ZoomSettings](/extensions/tabs#type-ZoomSettings) | zoomSettings | |---|---| The tab's current zoom settings. | | ### discard `whale.tabs.discard(integer tabId, function callback)` Since Chrome 54. Discards a tab from memory. Discarded tabs are still visible on the tab strip and are reloaded when activated. | Parameters | |---| | integer | (optional) tabId | The ID of the tab to be discarded. If specified, the tab will be discarded unless it's active or already discarded. If omitted, the browser will discard the least important tab. This can fail if no discardable tabs exist. | | function | (optional) callback | Called after the operation is completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | (optional) tab | |---|---| Discarded tab if it was successfully discarded. Undefined otherwise. | | ## Events ### onCreated Fired when a tab is created. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set. #### addListener `whale.tabs.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Tab](/extensions/tabs#type-Tab) tab) {...};` | [Tab](/extensions/tabs#type-Tab) | tab | |---|---| Details of the tab that was created. | | ### onUpdated Fired when a tab is updated. #### addListener `whale.tabs.onUpdated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object changeInfo, [Tab](/extensions/tabs#type-Tab) tab) {...};` | integer | tabId | | |---|---|---| | object | changeInfo | Lists the changes to the state of the tab that was updated. | string | (optional) status | |---|---| The status of the tab. Can be either _loading_ or _complete_. | | string | (optional) url | The tab's URL if it has changed. | | boolean | (optional) pinned | The tab's new pinned state. | | boolean | (optional) audible | Since Chrome 45. The tab's new audible state. | | boolean | (optional) discarded | Since Chrome 54. The tab's new discarded state. | | boolean | (optional) autoDiscardable | Since Chrome 54. The tab's new auto-discardable state. | | [MutedInfo](/extensions/tabs#type-MutedInfo) | (optional) mutedInfo | Since Chrome 46. The tab's new muted state and the reason for the change. | | string | (optional) favIconUrl | Since Chrome 27. The tab's new favicon URL. | | string | (optional) title | Since Chrome 48. The tab's new title. | | | [Tab](/extensions/tabs#type-Tab) | tab | Gives the state of the tab that was updated. | | ### onMoved Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response. This event is not fired when a tab is moved between windows. For that, see [tabs.onDetached](/extensions/tabs#event-onDetached). #### addListener `whale.tabs.onMoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object moveInfo) {...};` | integer | tabId | | |---|---|---| | object | moveInfo | | integer | windowId | | |---|---|---| | integer | fromIndex | | | integer | toIndex | | | | ### onSelectionChanged **Deprecated** since Chrome 33. Please use [tabs.onActivated](/extensions/tabs#event-onActivated). Fires when the selected tab in a window changes. #### addListener `whale.tabs.onSelectionChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object selectInfo) {...};` | integer | tabId | |---|---| The ID of the tab that has become active. | | object | selectInfo | | integer | windowId | |---|---| The ID of the window the selected tab changed inside of. | | | ### onActiveChanged **Deprecated** since Chrome 33. Please use [tabs.onActivated](/extensions/tabs#event-onActivated). Fires when the selected tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to [tabs.onUpdated](/extensions/tabs#event-onUpdated) events to be notified when a URL is set. #### addListener `whale.tabs.onActiveChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object selectInfo) {...};` | integer | tabId | |---|---| The ID of the tab that has become active. | | object | selectInfo | | integer | windowId | |---|---| The ID of the window the selected tab changed inside of. | | | ### onActivated Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set. #### addListener `whale.tabs.onActivated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object activeInfo) {...};` | object | activeInfo | |---|---| | integer | tabId | |---|---| The ID of the tab that has become active. | | integer | windowId | The ID of the window the active tab changed inside of. | | | ### onHighlightChanged **Deprecated** since Chrome 33. Please use [tabs.onHighlighted](/extensions/tabs#event-onHighlighted). Fired when the highlighted or selected tabs in a window changes. #### addListener `whale.tabs.onHighlightChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object selectInfo) {...};` | object | selectInfo | |---|---| | integer | windowId | |---|---| The window whose tabs changed. | | array of integer | tabIds | All highlighted tabs in the window. | | | ### onHighlighted Fired when the highlighted or selected tabs in a window changes. #### addListener `whale.tabs.onHighlighted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object highlightInfo) {...};` | object | highlightInfo | |---|---| | integer | windowId | |---|---| The window whose tabs changed. | | array of integer | tabIds | All highlighted tabs in the window. | | | ### onDetached Fired when a tab is detached from a window, for example because it is being moved between windows. #### addListener `whale.tabs.onDetached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object detachInfo) {...};` | integer | tabId | | |---|---|---| | object | detachInfo | | integer | oldWindowId | | |---|---|---| | integer | oldPosition | | | | ### onAttached Fired when a tab is attached to a window, for example because it was moved between windows. #### addListener `whale.tabs.onAttached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object attachInfo) {...};` | integer | tabId | | |---|---|---| | object | attachInfo | | integer | newWindowId | | |---|---|---| | integer | newPosition | | | | ### onRemoved Fired when a tab is closed. #### addListener `whale.tabs.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer tabId, object removeInfo) {...};` | integer | tabId | | |---|---|---| | object | removeInfo | | integer | windowId | |---|---| Since Chrome 25. The window whose tab is closed. | | boolean | isWindowClosing | True when the tab is being closed because its window is being closed. | | | ### onReplaced Since Chrome 26. Fired when a tab is replaced with another tab due to prerendering or instant. #### addListener `whale.tabs.onReplaced.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer addedTabId, integer removedTabId) {...};` | integer | addedTabId | | |---|---|---| | integer | removedTabId | | | ### onZoomChange Since Chrome 38. Fired when a tab is zoomed. #### addListener `whale.tabs.onZoomChange.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object ZoomChangeInfo) {...};` | object | ZoomChangeInfo | |---|---| | integer | tabId | | |---|---|---| | double | oldZoomFactor | | | double | newZoomFactor | | | [ZoomSettings](/extensions/tabs#type-ZoomSettings) | zoomSettings | | | | "},"extensions-extension.html":{"url":"extensions-extension.html","title":"extension","keywords":"","body":"whale.extension Description: The whale.extension API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in Message Passing. Availability: Since Chrome 20. Content Scripts: getURL , inIncognitoContext , lastError , onRequest and sendRequest are supported. Learn more ## Summary | Types | |---| | [ViewType](#type-ViewType) | | Properties | | [lastError](#property-lastError) | | [inIncognitoContext](#property-inIncognitoContext) | | Methods | | [sendRequest](#method-sendRequest) − `whale.extension.sendRequest(string extensionId, any request, function responseCallback)` | | [getURL](#method-getURL) − `string whale.extension.getURL(string path)` | | [getViews](#method-getViews) − `array of Window whale.extension.getViews(object fetchProperties)` | | [getBackgroundPage](#method-getBackgroundPage) − `Window whale.extension.getBackgroundPage()` | | [getExtensionTabs](#method-getExtensionTabs) − `array of Window whale.extension.getExtensionTabs(integer windowId)` | | [isAllowedIncognitoAccess](#method-isAllowedIncognitoAccess) − `whale.extension.isAllowedIncognitoAccess(function callback)` | | [isAllowedFileSchemeAccess](#method-isAllowedFileSchemeAccess) − `whale.extension.isAllowedFileSchemeAccess(function callback)` | | [setUpdateUrlData](#method-setUpdateUrlData) − `whale.extension.setUpdateUrlData(string data)` | | Events | | [onRequest](#event-onRequest) | | [onRequestExternal](#event-onRequestExternal) | ## Types ### ViewType The type of extension view. | Enum | |---| | `\"tab\"`, or `\"popup\"` | ## Properties | object | `whale.extension.lastError` | |---|---| **Deprecated** since Chrome 58. Please use [runtime.lastError](/extensions/runtime#property-lastError). Set for the lifetime of a callback if an ansychronous extension api has resulted in an error. If no error has occured lastError will be undefined. | Properties | |---| | --- | | string | message | Description of the error that has taken place. | | | boolean | `whale.extension.inIncognitoContext` | True for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. The latter only applies to extensions with 'split' incognito_behavior. | ## Methods ### sendRequest `whale.extension.sendRequest(string extensionId, any request, function responseCallback)` **Deprecated** since Chrome 33. Please use [runtime.sendMessage](/extensions/runtime#method-sendMessage). Sends a single request to other listeners within the extension. Similar to [runtime.connect](/extensions/runtime#method-connect), but only sends a single request with an optional response. The [extension.onRequest](/extensions/extension#event-onRequest) event is fired in each page of the extension. | Parameters | |---| | string | (optional) extensionId | Since Chrome 33. The extension ID of the extension you want to connect to. If omitted, default is your own extension. | | any | request | Since Chrome 33. | | function | (optional) responseCallback | If you specify the _responseCallback_ parameter, it should be a function that looks like this: `function(any response) {...};` | any | response | |---|---| The JSON response object sent by the handler of the request. If an error occurs while connecting to the extension, the callback will be called with no arguments and [runtime.lastError](/extensions/runtime#property-lastError) will be set to the error message. | | ### getURL `string whale.extension.getURL(string path)` **Deprecated** since Chrome 58. Please use [runtime.getURL](/extensions/runtime#method-getURL). Converts a relative path within an extension install directory to a fully-qualified URL. | Parameters | |---| | string | path | A path to a resource within an extension expressed relative to its install directory. | ### getViews `array of Window whale.extension.getViews(object fetchProperties)` Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension. | Parameters | |---| | object | (optional) fetchProperties | | [ViewType](/extensions/extension#type-ViewType) | (optional) type | |---|---| The type of view to get. If omitted, returns all views (including background pages and tabs). Valid values: 'tab', 'notification', 'popup'. | | integer | (optional) windowId | The window to restrict the search to. If omitted, returns all views. | | integer | (optional) tabId | Since Chrome 54. Find a view according to a tab id. If this field is omitted, returns all views. | | ### getBackgroundPage `Window whale.extension.getBackgroundPage()` Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page. #### Returns ### getExtensionTabs `array of Window whale.extension.getExtensionTabs(integer windowId)` **Deprecated** since Chrome 33. Please use [extension.getViews](/extensions/extension#method-getViews) `{type: \"tab\"}`. Returns an array of the JavaScript 'window' objects for each of the tabs running inside the current extension. If `windowId` is specified, returns only the 'window' objects of tabs attached to the specified window. | Parameters | |---| | integer | (optional) windowId | | ### isAllowedIncognitoAccess `whale.extension.isAllowedIncognitoAccess(function callback)` Retrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(boolean isAllowedAccess) {...};` | boolean | isAllowedAccess | |---|---| True if the extension has access to Incognito mode, false otherwise. | | ### isAllowedFileSchemeAccess `whale.extension.isAllowedFileSchemeAccess(function callback)` Retrieves the state of the extension's access to the 'file://' scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(boolean isAllowedAccess) {...};` | boolean | isAllowedAccess | |---|---| True if the extension can access the 'file://' scheme, false otherwise. | | ### setUpdateUrlData `whale.extension.setUpdateUrlData(string data)` Sets the value of the ap CGI parameter used in the extension's update URL. This value is ignored for extensions that are hosted in the Chrome Extension Gallery. | Parameters | |---| | string | data | | ## Events ### onRequest **Deprecated** since Chrome 33. Please use [runtime.onMessage](/extensions/runtime#event-onMessage). Fired when a request is sent from either an extension process or a content script. #### addListener `whale.extension.onRequest.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(any request, [runtime.MessageSender](/extensions/runtime#type-MessageSender) sender, function sendResponse) {...};` | any | (optional) request | |---|---| Since Chrome 33. The request sent by the calling script. | | [runtime.MessageSender](/extensions/runtime#type-MessageSender) | sender | Since Chrome 33. | | function | sendResponse | Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response. If you have more than one `onRequest` listener in the same document, then only one may send a response. The _sendResponse_ parameter should be a function that looks like this: `function() {...};` | | ### onRequestExternal **Deprecated** since Chrome 33. Please use [runtime.onMessageExternal](/extensions/runtime#event-onMessageExternal). Fired when a request is sent from another extension. #### addListener `whale.extension.onRequestExternal.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(any request, [runtime.MessageSender](/extensions/runtime#type-MessageSender) sender, function sendResponse) {...};` | any | (optional) request | |---|---| The request sent by the calling script. | | [runtime.MessageSender](/extensions/runtime#type-MessageSender) | sender | | | function | sendResponse | Function to call when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response. The _sendResponse_ parameter should be a function that looks like this: `function() {...};` | | "},"extensions-top-sites.html":{"url":"extensions-top-sites.html","title":"top-sites","keywords":"","body":"whale.topSites Description: Use the whale.topSites API to access the top sites that are displayed on the new tab page. Availability: Since Chrome 19. Permissions: \"topSites\" ## Manifest You must declare the \"topSites\" permission in your extension's manifest to use this API. { \"name\": \"My extension\", ... ** \"permissions\": [ \"topSites\", ]**, ... } ## Examples You can find samples of this API in [Samples](samples#search:topsites). ## Summary | Types | |---| | [MostVisitedURL](#type-MostVisitedURL) | | Methods | | [get](#method-get) − `whale.topSites.get(function callback)` | ## Types ### MostVisitedURL An object encapsulating a most visited URL, such as the URLs on the new tab page. | properties | |---| | string | url | The most visited URL. | | string | title | The title of the page | ## Methods ### get `whale.topSites.get(function callback)` Gets a list of top sites. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [MostVisitedURL](/extensions/topSites#type-MostVisitedURL) data) {...};` | array of [MostVisitedURL](/extensions/topSites#type-MostVisitedURL) | data | | |---|---|---| | "},"extensions-font-settings.html":{"url":"extensions-font-settings.html","title":"font-settings","keywords":"","body":"whale.fontSettings Description: Use the whale.fontSettings API to manage Chrome's font settings. Availability: Since Chrome 22. Permissions: \"fontSettings\" ## Manifest To use the Font Settings API, you must declare the \"fontSettings\" permission in the [extension manifest](manifest). For example: { \"name\": \"My Font Settings Extension\", \"description\": \"Customize your fonts\", \"version\": \"0.2\", **\"permissions\": [ \"fontSettings\" ]**, ... } ## Generic Font Families and Scripts Chrome allows for some font settings to depend on certain generic font families and language scripts. For example, the font used for sans-serif Simplified Chinese may be different than the font used for serif Japanese. The generic font families supported by Chrome are based on [CSS generic font families](http://www.w3.org/TR/CSS21/fonts.html#generic-font-families) and are listed in the API reference below. When a webpage specifies a generic font family, Chrome selects the font based on the corresponding setting. If no generic font family is specified, Chrome uses the setting for the \"standard\" generic font family. When a webpage specifies a language, Chrome selects the font based on the setting for the corresponding language script. If no language is specified, Chrome uses the setting for the default, or global, script. The supported language scripts are specified by ISO 15924 script code and listed in the API reference below. Technically, Chrome settings are not strictly per-script but also depend on language. For example, Chrome chooses the font for Cyrillic (ISO 15924 script code \"Cyrl\") when a webpage specifies the Russian language, and uses this font not just for Cyrillic script but for everything the font covers, such as Latin. ## Examples The following code gets the standard font for Arabic. whale.fontSettings.getFont( { genericFamily: 'standard', script: 'Arab' }, function(details) { console.log(details.fontId); } ); The next snippet sets the sans-serif font for Japanese. whale.fontSettings.setFont( { genericFamily: 'sansserif', script: 'Jpan', fontId: 'MS PGothic' } ); You can find a sample extension using the Font Settings API in the [examples/api/fontSettings](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/fontSettings/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [FontName](#type-FontName) | | [ScriptCode](#type-ScriptCode) | | [GenericFamily](#type-GenericFamily) | | [LevelOfControl](#type-LevelOfControl) | | Methods | | [clearFont](#method-clearFont) − `whale.fontSettings.clearFont(object details, function callback)` | | [getFont](#method-getFont) − `whale.fontSettings.getFont(object details, function callback)` | | [setFont](#method-setFont) − `whale.fontSettings.setFont(object details, function callback)` | | [getFontList](#method-getFontList) − `whale.fontSettings.getFontList(function callback)` | | [clearDefaultFontSize](#method-clearDefaultFontSize) − `whale.fontSettings.clearDefaultFontSize(object details, function callback)` | | [getDefaultFontSize](#method-getDefaultFontSize) − `whale.fontSettings.getDefaultFontSize(object details, function callback)` | | [setDefaultFontSize](#method-setDefaultFontSize) − `whale.fontSettings.setDefaultFontSize(object details, function callback)` | | [clearDefaultFixedFontSize](#method-clearDefaultFixedFontSize) − `whale.fontSettings.clearDefaultFixedFontSize(object details, function callback)` | | [getDefaultFixedFontSize](#method-getDefaultFixedFontSize) − `whale.fontSettings.getDefaultFixedFontSize(object details, function callback)` | | [setDefaultFixedFontSize](#method-setDefaultFixedFontSize) − `whale.fontSettings.setDefaultFixedFontSize(object details, function callback)` | | [clearMinimumFontSize](#method-clearMinimumFontSize) − `whale.fontSettings.clearMinimumFontSize(object details, function callback)` | | [getMinimumFontSize](#method-getMinimumFontSize) − `whale.fontSettings.getMinimumFontSize(object details, function callback)` | | [setMinimumFontSize](#method-setMinimumFontSize) − `whale.fontSettings.setMinimumFontSize(object details, function callback)` | | Events | | [onFontChanged](#event-onFontChanged) | | [onDefaultFontSizeChanged](#event-onDefaultFontSizeChanged) | | [onDefaultFixedFontSizeChanged](#event-onDefaultFixedFontSizeChanged) | | [onMinimumFontSizeChanged](#event-onMinimumFontSizeChanged) | ## Types ### FontName Represents a font name. | properties | |---| | string | fontId | The font ID. | | string | displayName | The display name of the font. | ### ScriptCode An ISO 15924 script code. The default, or global, script is represented by script code \"Zyyy\". | Enum | |---| | `\"Afak\"`, `\"Arab\"`, `\"Armi\"`, `\"Armn\"`, `\"Avst\"`, `\"Bali\"`, `\"Bamu\"`, `\"Bass\"`, `\"Batk\"`, `\"Beng\"`, `\"Blis\"`, `\"Bopo\"`, `\"Brah\"`, `\"Brai\"`, `\"Bugi\"`, `\"Buhd\"`, `\"Cakm\"`, `\"Cans\"`, `\"Cari\"`, `\"Cham\"`, `\"Cher\"`, `\"Cirt\"`, `\"Copt\"`, `\"Cprt\"`, `\"Cyrl\"`, `\"Cyrs\"`, `\"Deva\"`, `\"Dsrt\"`, `\"Dupl\"`, `\"Egyd\"`, `\"Egyh\"`, `\"Egyp\"`, `\"Elba\"`, `\"Ethi\"`, `\"Geor\"`, `\"Geok\"`, `\"Glag\"`, `\"Goth\"`, `\"Gran\"`, `\"Grek\"`, `\"Gujr\"`, `\"Guru\"`, `\"Hang\"`, `\"Hani\"`, `\"Hano\"`, `\"Hans\"`, `\"Hant\"`, `\"Hebr\"`, `\"Hluw\"`, `\"Hmng\"`, `\"Hung\"`, `\"Inds\"`, `\"Ital\"`, `\"Java\"`, `\"Jpan\"`, `\"Jurc\"`, `\"Kali\"`, `\"Khar\"`, `\"Khmr\"`, `\"Khoj\"`, `\"Knda\"`, `\"Kpel\"`, `\"Kthi\"`, `\"Lana\"`, `\"Laoo\"`, `\"Latf\"`, `\"Latg\"`, `\"Latn\"`, `\"Lepc\"`, `\"Limb\"`, `\"Lina\"`, `\"Linb\"`, `\"Lisu\"`, `\"Loma\"`, `\"Lyci\"`, `\"Lydi\"`, `\"Mand\"`, `\"Mani\"`, `\"Maya\"`, `\"Mend\"`, `\"Merc\"`, `\"Mero\"`, `\"Mlym\"`, `\"Moon\"`, `\"Mong\"`, `\"Mroo\"`, `\"Mtei\"`, `\"Mymr\"`, `\"Narb\"`, `\"Nbat\"`, `\"Nkgb\"`, `\"Nkoo\"`, `\"Nshu\"`, `\"Ogam\"`, `\"Olck\"`, `\"Orkh\"`, `\"Orya\"`, `\"Osma\"`, `\"Palm\"`, `\"Perm\"`, `\"Phag\"`, `\"Phli\"`, `\"Phlp\"`, `\"Phlv\"`, `\"Phnx\"`, `\"Plrd\"`, `\"Prti\"`, `\"Rjng\"`, `\"Roro\"`, `\"Runr\"`, `\"Samr\"`, `\"Sara\"`, `\"Sarb\"`, `\"Saur\"`, `\"Sgnw\"`, `\"Shaw\"`, `\"Shrd\"`, `\"Sind\"`, `\"Sinh\"`, `\"Sora\"`, `\"Sund\"`, `\"Sylo\"`, `\"Syrc\"`, `\"Syre\"`, `\"Syrj\"`, `\"Syrn\"`, `\"Tagb\"`, `\"Takr\"`, `\"Tale\"`, `\"Talu\"`, `\"Taml\"`, `\"Tang\"`, `\"Tavt\"`, `\"Telu\"`, `\"Teng\"`, `\"Tfng\"`, `\"Tglg\"`, `\"Thaa\"`, `\"Thai\"`, `\"Tibt\"`, `\"Tirh\"`, `\"Ugar\"`, `\"Vaii\"`, `\"Visp\"`, `\"Wara\"`, `\"Wole\"`, `\"Xpeo\"`, `\"Xsux\"`, `\"Yiii\"`, `\"Zmth\"`, `\"Zsym\"`, or `\"Zyyy\"` | ### GenericFamily A CSS generic font family. | Enum | |---| | `\"standard\"`, `\"sansserif\"`, `\"serif\"`, `\"fixed\"`, `\"cursive\"`, or `\"fantasy\"` | ### LevelOfControl One of not_controllable: cannot be controlled by any extension controlled_by_other_extensions: controlled by extensions with higher precedence controllable_by_this_extension: can be controlled by this extension controlled_by_this_extension: controlled by this extension | Enum | |---| | `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | ## Methods ### clearFont `whale.fontSettings.clearFont(object details, function callback)` Clears the font set by this extension, if any. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script for which the font should be cleared. If omitted, the global script font setting is cleared. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be cleared. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getFont `whale.fontSettings.getFont(object details, function callback)` Gets the font for a given script and generic font family. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script for which the font should be retrieved. If omitted, the font setting for the global script (script code \"Zyyy\") is retrieved. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be retrieved. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | fontId | |---|---| The font ID. Rather than the literal font ID preference value, this may be the ID of the font that the system resolves the preference value to. So, fontId can differ from the font passed to `setFont`, if, for example, the font is not available on the system. The empty string signifies fallback to the global script font setting. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setFont `whale.fontSettings.setFont(object details, function callback)` Sets the font for a given script and generic font family. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script code which the font should be set. If omitted, the font setting for the global script (script code \"Zyyy\") is set. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be set. | | string | fontId | The font ID. The empty string means to fallback to the global script font setting. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getFontList `whale.fontSettings.getFontList(function callback)` Gets a list of fonts on the system. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [FontName](/extensions/fontSettings#type-FontName) results) {...};` | array of [FontName](/extensions/fontSettings#type-FontName) | results | | |---|---|---| | ### clearDefaultFontSize `whale.fontSettings.clearDefaultFontSize(object details, function callback)` Clears the default font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getDefaultFontSize `whale.fontSettings.getDefaultFontSize(object details, function callback)` Gets the default font size. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setDefaultFontSize `whale.fontSettings.setDefaultFontSize(object details, function callback)` Sets the default font size. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### clearDefaultFixedFontSize `whale.fontSettings.clearDefaultFixedFontSize(object details, function callback)` Clears the default fixed font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getDefaultFixedFontSize `whale.fontSettings.getDefaultFixedFontSize(object details, function callback)` Gets the default size for fixed width fonts. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setDefaultFixedFontSize `whale.fontSettings.setDefaultFixedFontSize(object details, function callback)` Sets the default size for fixed width fonts. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### clearMinimumFontSize `whale.fontSettings.clearMinimumFontSize(object details, function callback)` Clears the minimum font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getMinimumFontSize `whale.fontSettings.getMinimumFontSize(object details, function callback)` Gets the minimum font size. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setMinimumFontSize `whale.fontSettings.setMinimumFontSize(object details, function callback)` Sets the minimum font size. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onFontChanged Fired when a font setting changes. #### addListener `whale.fontSettings.onFontChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | fontId | |---|---| The font ID. See the description in `getFont`. | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | The script code for which the font setting has changed. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font setting has changed. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onDefaultFontSizeChanged Fired when the default font size setting changes. #### addListener `whale.fontSettings.onDefaultFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onDefaultFixedFontSizeChanged Fired when the default fixed font size setting changes. #### addListener `whale.fontSettings.onDefaultFixedFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onMinimumFontSizeChanged Fired when the minimum font size setting changes. #### addListener `whale.fontSettings.onMinimumFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | "},"extensions-tts-engine.html":{"url":"extensions-tts-engine.html","title":"tts-engine","keywords":"","body":"whale.ttsEngine Description: Use the whale.ttsEngine API to implement a text-to-speech(TTS) engine using an extension. If your extension registers using this API, it will receive events containing an utterance to be spoken and other parameters when any extension or Chrome App uses the tts API to generate speech. Your extension can then use any available web technology to synthesize and output the speech, and send events back to the calling function to report the status. Availability: Since Chrome 19. Permissions: \"ttsEngine\" ## Overview An extension can register itself as a speech engine. By doing so, it can intercept some or all calls to functions such as [tts.speak](/extensions/tts#method-speak) and [tts.stop](/extensions/tts#method-stop) and provide an alternate implementation. Extensions are free to use any available web technology to provide speech, including streaming audio from a server, HTML5 audio, Native Client, or Flash. An extension could even do something different with the utterances, like display closed captions in a pop-up window or send them as log messages to a remote server. ## Manifest To implement a TTS engine, an extension must declare the \"ttsEngine\" permission and then declare all voices it provides in the extension manifest, like this: { \"name\": \"My TTS Engine\", \"version\": \"1.0\", **\"permissions\": [\"ttsEngine\"], \"tts_engine\": { \"voices\": [ { \"voice_name\": \"Alice\", \"lang\": \"en-US\", \"gender\": \"female\", \"event_types\": [\"start\", \"marker\", \"end\"] }, { \"voice_name\": \"Pat\", \"lang\": \"en-US\", \"event_types\": [\"end\"] } ] },** \"background\": { \"page\": \"background.html\", \"persistent\": false } } An extension can specify any number of voices. The `voice_name` parameter is required. The name should be descriptive enough that it identifies the name of the voice and the engine used. In the unlikely event that two extensions register voices with the same name, a client can specify the ID of the extension that should do the synthesis. The `gender` parameter is optional. If your voice corresponds to a male or female voice, you can use this parameter to help clients choose the most appropriate voice for their application. The `lang` parameter is optional, but highly recommended. Almost always, a voice can synthesize speech in just a single language. When an engine supports more than one language, it can easily register a separate voice for each language. Under rare circumstances where a single voice can handle more than one language, it's easiest to just list two separate voices and handle them using the same logic internally. However, if you want to create a voice that will handle utterances in any language, leave out the `lang` parameter from your extension's manifest. Finally, the `event_types` parameter is required if the engine can send events to update the client on the progress of speech synthesis. At a minimum, supporting the `'end'` event type to indicate when speech is finished is highly recommended, otherwise Chrome cannot schedule queued utterances. **Note:** If your TTS engine does not support the `'end'` event type, Chrome cannot queue utterances because it has no way of knowing when your utterance has finished. To help mitigate this, Chrome passes an additional boolean `enqueue` option to your engine's onSpeak handler, giving you the option of implementing your own queueing. This is discouraged because then clients are unable to queue utterances that should get spoken by different speech engines. The possible event types that you can send correspond to the event types that the `speak()` method receives: * `'start'`: The engine has started speaking the utterance. * `'word'`: A word boundary was reached. Use `event.charIndex` to determine the current speech position. * `'sentence'`: A sentence boundary was reached. Use `event.charIndex` to determine the current speech position. * `'marker'`: An SSML marker was reached. Use `event.charIndex` to determine the current speech position. * `'end'`: The engine has finished speaking the utterance. * `'error'`: An engine-specific error occurred and this utterance cannot be spoken. Pass more information in `event.errorMessage`. The `'interrupted'` and `'cancelled'` events are not sent by the speech engine; they are generated automatically by Chrome. Text-to-speech clients can get the voice information from your extension's manifest by calling [tts.getVoices](/extensions/tts#method-getVoices), assuming you've registered speech event listeners as described below. ## Handling speech events To generate speech at the request of clients, your extension must register listeners for both `onSpeak` and `onStop`, like this: var speakListener = function(utterance, options, sendTtsEvent) { sendTtsEvent({'event_type': 'start', 'charIndex': 0}) // (start speaking) sendTtsEvent({'event_type': 'end', 'charIndex': utterance.length}) }; var stopListener = function() { // (stop all speech) }; whale.ttsEngine.onSpeak.addListener(speakListener); whale.ttsEngine.onStop.addListener(stopListener); **Important:** If your extension does not register listeners for both `onSpeak` and `onStop`, it will not intercept any speech calls, regardless of what is in the manifest. The decision of whether or not to send a given speech request to an extension is based solely on whether the extension supports the given voice parameters in its manifest and has registered listeners for `onSpeak` and `onStop`. In other words, there's no way for an extension to receive a speech request and dynamically decide whether to handle it. ## Summary | Types | |---| | [VoiceGender](#type-VoiceGender) | | Events | | [onSpeak](#event-onSpeak) | | [onStop](#event-onStop) | | [onPause](#event-onPause) | | [onResume](#event-onResume) | ## Types ### VoiceGender | Enum | |---| | `\"male\"`, or `\"female\"` | ## Events ### onSpeak Called when the user makes a call to tts.speak() and one of the voices from this extension's manifest is the first to match the options object. #### addListener `whale.ttsEngine.onSpeak.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string utterance, object options, function sendTtsEvent) {...};` | string | utterance | |---|---| The text to speak, specified as either plain text or an SSML document. If your engine does not support SSML, you should strip out all XML markup and synthesize only the underlying text content. The value of this parameter is guaranteed to be no more than 32,768 characters. If this engine does not support speaking that many characters at a time, the utterance should be split into smaller chunks and queued internally without returning an error. | | object | options | Options specified to the tts.speak() method. | string | (optional) voiceName | |---|---| The name of the voice to use for synthesis. | | string | (optional) lang | The language to be used for synthesis, in the form _language_-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. | | [VoiceGender](/extensions/ttsEngine#type-VoiceGender) | (optional) gender | Gender of voice for synthesized speech. | | double | (optional) rate | Speaking rate relative to the default rate for this voice. 1.0 is the default rate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and 0.5 is half as fast. This value is guaranteed to be between 0.1 and 10.0, inclusive. When a voice does not support this full range of rates, don't return an error. Instead, clip the rate to the range the voice supports. | | double | (optional) pitch | Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being highest. 1.0 corresponds to this voice's default pitch. | | double | (optional) volume | Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being highest, with a default of 1.0. | | | function | sendTtsEvent | Call this function with events that occur in the process of speaking the utterance. The _sendTtsEvent_ parameter should be a function that looks like this: `function( [tts.TtsEvent](/extensions/tts#type-TtsEvent) event) {...};` | [tts.TtsEvent](/extensions/tts#type-TtsEvent) | event | |---|---| The event from the text-to-speech engine indicating the status of this utterance. | | | ### onStop Fired when a call is made to tts.stop and this extension may be in the middle of speaking. If an extension receives a call to onStop and speech is already stopped, it should do nothing (not raise an error). If speech is in the paused state, this should cancel the paused state. #### addListener `whale.ttsEngine.onStop.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onPause Since Chrome 29. Optional: if an engine supports the pause event, it should pause the current utterance being spoken, if any, until it receives a resume event or stop event. Note that a stop event should also clear the paused state. #### addListener `whale.ttsEngine.onPause.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onResume Since Chrome 29. Optional: if an engine supports the pause event, it should also support the resume event, to continue speaking the current utterance, if any. Note that a stop event should also clear the paused state. #### addListener `whale.ttsEngine.onResume.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-gcm.html":{"url":"extensions-gcm.html","title":"gcm","keywords":"","body":"whale.gcm Description: Use whale.gcm to enable apps and extensions to send and receive messages through the Google Cloud Messaging Service. Availability: Since Chrome 35. Permissions: \"gcm\" Learn More: Implementing GCM Client on Chrome ## Summary | Properties | |---| | [MAX_MESSAGE_SIZE](#property-MAX_MESSAGE_SIZE) | | Methods | | [register](#method-register) − `whale.gcm.register(array of string senderIds, function callback)` | | [unregister](#method-unregister) − `whale.gcm.unregister(function callback)` | | [send](#method-send) − `whale.gcm.send(object message, function callback)` | | Events | | [onMessage](#event-onMessage) | | [onMessagesDeleted](#event-onMessagesDeleted) | | [onSendError](#event-onSendError) | ## Properties | `4,096` | `whale.gcm.MAX_MESSAGE_SIZE` | The maximum size (in bytes) of all key/value pairs in a message. | |---|---|---| ## Methods ### register `whale.gcm.register(array of string senderIds, function callback)` Registers the application with GCM. The registration ID will be returned by the `callback`. If `register` is called again with the same list of `senderIds`, the same registration ID will be returned. | Parameters | |---| | array of string | senderIds | A list of server IDs that are allowed to send messages to the application. It should contain at least one and no more than 100 sender IDs. | | function | callback | Function called when registration completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when `registrationId` is empty. The _callback_ parameter should be a function that looks like this: `function(string registrationId) {...};` | string | registrationId | |---|---| A registration ID assigned to the application by the GCM. | | ### unregister `whale.gcm.unregister(function callback)` Unregisters the application from GCM. | Parameters | |---| | function | callback | A function called after the unregistration completes. Unregistration was successful if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ### send `whale.gcm.send(object message, function callback)` Sends a message according to its contents. | Parameters | |---| | object | message | A message to send to the other party via GCM. | string | destinationId | |---|---| The ID of the server to send the message to as assigned by [Google API Console](https://code.google.com/apis/console). | | string | messageId | The ID of the message. It must be unique for each message in scope of the applications. See the [Cloud Messaging documentation](cloudMessaging#send_messages) for advice for picking and handling an ID. | | integer | (optional) timeToLive | Time-to-live of the message in seconds. If it is not possible to send the message within that time, an onSendError event will be raised. A time-to-live of 0 indicates that the message should be sent immediately or fail if it's not possible. The maximum and a default value of time-to-live is 86400 seconds (1 day). | | object | data | Message data to send to the server. Case-insensitive `goog.` and `google`, as well as case-sensitive `collapse_key` are disallowed as key prefixes. Sum of all key/value pairs should not exceed [gcm.MAX_MESSAGE_SIZE](/extensions/gcm#property-MAX_MESSAGE_SIZE). | | | function | callback | A function called after the message is successfully queued for sending. [runtime.lastError](/extensions/runtime#property-lastError) should be checked, to ensure a message was sent without problems. The _callback_ parameter should be a function that looks like this: `function(string messageId) {...};` | string | messageId | |---|---| The ID of the message that the callback was issued for. | | ## Events ### onMessage Fired when a message is received through GCM. #### addListener `whale.gcm.onMessage.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object message) {...};` | object | message | |---|---| A message received from another party via GCM. | object | data | |---|---| The message data. | | string | (optional) from | Since Chrome 41. The sender who issued the message. | | string | (optional) collapseKey | The collapse key of a message. See [Collapsible Messages](cloudMessaging#collapsible_messages) section of Cloud Messaging documentation for details. | | | ### onMessagesDeleted Fired when a GCM server had to delete messages sent by an app server to the application. See [Messages deleted event](cloudMessaging#messages_deleted_event) section of Cloud Messaging documentation for details on handling this event. #### addListener `whale.gcm.onMessagesDeleted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onSendError Fired when it was not possible to send a message to the GCM server. #### addListener `whale.gcm.onSendError.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object error) {...};` | object | error | |---|---| An error that occured while trying to send the message either in Chrome or on the GCM server. Application can retry sending the message with a reasonable backoff and possibly longer time-to-live. | string | errorMessage | |---|---| The error message describing the problem. | | string | (optional) messageId | The ID of the message with this error, if error is related to a specific message. | | object | details | Additional details related to the error, when available. | | | "},"extensions-tts.html":{"url":"extensions-tts.html","title":"tts","keywords":"","body":"whale.tts Description: Use the whale.tts API to play synthesized text-to-speech (TTS). See also the related ttsEngine API, which allows an extension to implement a speech engine. Availability: Since Chrome 20. Permissions: \"tts\" Learn More: Chrome Office Hours: Text to Speech API ## Overview Chrome provides native support for speech on Windows (using SAPI 5), Mac OS X, and Chrome OS, using speech synthesis capabilities provided by the operating system. On all platforms, the user can install extensions that register themselves as alternative speech engines. ## Generating speech Call `speak()` from your extension or Chrome App to speak. For example: whale.tts.speak('Hello, world.'); To stop speaking immediately, just call `stop()`: whale.tts.stop(); You can provide options that control various properties of the speech, such as its rate, pitch, and more. For example: whale.tts.speak('Hello, world.', {'rate': 2.0}); It's also a good idea to specify the language so that a synthesizer supporting that language (and regional dialect, if applicable) is chosen. whale.tts.speak( 'Hello, world.', {'lang': 'en-US', 'rate': 2.0}); By default, each call to `speak()` interrupts any ongoing speech and speaks immediately. To determine if a call would be interrupting anything, you can call `isSpeaking()`. In addition, you can use the `enqueue` option to cause this utterance to be added to a queue of utterances that will be spoken when the current utterance has finished. whale.tts.speak( 'Speak this first.'); whale.tts.speak( 'Speak this next, when the first sentence is done.', {'enqueue': true}); A complete description of all options can be found in the [tts.speak](/extensions/tts#method-speak) below. Not all speech engines will support all options. To catch errors and make sure you're calling `speak()` correctly, pass a callback function that takes no arguments. Inside the callback, check [runtime.lastError](/extensions/runtime#property-lastError) to see if there were any errors. whale.tts.speak( utterance, options, function() { if (whale.runtime.lastError) { console.log('Error: ' + whale.runtime.lastError.message); } }); The callback returns right away, before the engine has started generating speech. The purpose of the callback is to alert you to syntax errors in your use of the TTS API, not to catch all possible errors that might occur in the process of synthesizing and outputting speech. To catch these errors too, you need to use an event listener, described below. ## Listening to events To get more real-time information about the status of synthesized speech, pass an event listener in the options to `speak()`, like this: whale.tts.speak( utterance, { onEvent: function(event) { console.log('Event ' + event.type ' at position ' + event.charIndex); if (event.type == 'error') { console.log('Error: ' + event.errorMessage); } } }, callback); Each event includes an event type, the character index of the current speech relative to the utterance, and for error events, an optional error message. The event types are: * `'start'`: The engine has started speaking the utterance. * `'word'`: A word boundary was reached. Use `event.charIndex` to determine the current speech position. * `'sentence'`: A sentence boundary was reached. Use `event.charIndex` to determine the current speech position. * `'marker'`: An SSML marker was reached. Use `event.charIndex` to determine the current speech position. * `'end'`: The engine has finished speaking the utterance. * `'interrupted'`: This utterance was interrupted by another call to `speak()` or `stop()` and did not finish. * `'cancelled'`: This utterance was queued, but then cancelled by another call to `speak()` or `stop()` and never began to speak at all. * `'error'`: An engine-specific error occurred and this utterance cannot be spoken. Check `event.errorMessage` for details. Four of the event types—`'end'`, `'interrupted'`, `'cancelled'`, and `'error'`—are _final_. After one of those events is received, this utterance will no longer speak and no new events from this utterance will be received. Some voices may not support all event types, and some voices may not send any events at all. If you do not want to use a voice unless it sends certain events, pass the events you require in the `requiredEventTypes` member of the options object, or use `getVoices()` to choose a voice that meets your requirements. Both are documented below. ## SSML markup Utterances used in this API may include markup using the [Speech Synthesis Markup Language (SSML)](http://www.w3.org/TR/speech-synthesis). If you use SSML, the first argument to `speak()` should be a complete SSML document with an XML header and a top-level `` tag, not a document fragment. For example: whale.tts.speak( '' + '' + ' The second ' + ' word of this sentence was emphasized.' + ''); Not all speech engines will support all SSML tags, and some may not support SSML at all, but all engines are required to ignore any SSML they don't support and to still speak the underlying text. ## Choosing a voice By default, Chrome chooses the most appropriate voice for each utterance you want to speak, based on the language and gender. On most Windows, Mac OS X, and Chrome OS systems, speech synthesis provided by the operating system should be able to speak any text in at least one language. Some users may have a variety of voices available, though, from their operating system and from speech engines implemented by other Chrome extensions. In those cases, you can implement custom code to choose the appropriate voice, or to present the user with a list of choices. To get a list of all voices, call `getVoices()` and pass it a function that receives an array of `TtsVoice` objects as its argument: whale.tts.getVoices( function(voices) { for (var i = 0; i ## Summary | Types | |---| | [EventType](#type-EventType) | | [VoiceGender](#type-VoiceGender) | | [TtsEvent](#type-TtsEvent) | | [TtsVoice](#type-TtsVoice) | | Methods | | [speak](#method-speak) − `whale.tts.speak(string utterance, object options, function callback)` | | [stop](#method-stop) − `whale.tts.stop()` | | [pause](#method-pause) − `whale.tts.pause()` | | [resume](#method-resume) − `whale.tts.resume()` | | [isSpeaking](#method-isSpeaking) − `whale.tts.isSpeaking(function callback)` | | [getVoices](#method-getVoices) − `whale.tts.getVoices(function callback)` | ## Types ### EventType | Enum | |---| | `\"start\"`, `\"end\"`, `\"word\"`, `\"sentence\"`, `\"marker\"`, `\"interrupted\"`, `\"cancelled\"`, `\"error\"`, `\"pause\"`, or `\"resume\"` | ### VoiceGender | Enum | |---| | `\"male\"`, or `\"female\"` | ### TtsEvent An event from the TTS engine to communicate the status of an utterance. | properties | |---| | [EventType](/extensions/tts#type-EventType) | type | The type can be 'start' as soon as speech has started, 'word' when a word boundary is reached, 'sentence' when a sentence boundary is reached, 'marker' when an SSML mark element is reached, 'end' when the end of the utterance is reached, 'interrupted' when the utterance is stopped or interrupted before reaching the end, 'cancelled' when it's removed from the queue before ever being synthesized, or 'error' when any other error occurs. When pausing speech, a 'pause' event is fired if a particular utterance is paused in the middle, and 'resume' if an utterance resumes speech. Note that pause and resume events may not fire if speech is paused in-between utterances. | | integer | (optional) charIndex | The index of the current character in the utterance. | | string | (optional) errorMessage | The error description, if the event type is 'error'. | ### TtsVoice A description of a voice available for speech synthesis. | properties | |---| | string | (optional) voiceName | The name of the voice. | | string | (optional) lang | The language that this voice supports, in the form _language_-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. | | [VoiceGender](/extensions/tts#type-VoiceGender) | (optional) gender | This voice's gender. | | boolean | (optional) remote | Since Chrome 33. If true, the synthesis engine is a remote network resource. It may be higher latency and may incur bandwidth costs. | | string | (optional) extensionId | The ID of the extension providing this voice. | | array of string | (optional) eventTypes | All of the callback event types that this voice is capable of sending. | ## Methods ### speak `whale.tts.speak(string utterance, object options, function callback)` Speaks text using a text-to-speech engine. | Parameters | |---| | string | utterance | The text to speak, either plain text or a complete, well-formed SSML document. Speech engines that do not support SSML will strip away the tags and speak the text. The maximum length of the text is 32,768 characters. | | object | (optional) options | The speech options. | boolean | (optional) enqueue | |---|---| If true, enqueues this utterance if TTS is already in progress. If false (the default), interrupts any current speech and flushes the speech queue before speaking this new utterance. | | string | (optional) voiceName | The name of the voice to use for synthesis. If empty, uses any available voice. | | string | (optional) extensionId | The extension ID of the speech engine to use, if known. | | string | (optional) lang | The language to be used for synthesis, in the form _language_-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. | | [VoiceGender](/extensions/tts#type-VoiceGender) | (optional) gender | Gender of voice for synthesized speech. | | double | (optional) rate | Speaking rate relative to the default rate for this voice. 1.0 is the default rate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and 0.5 is half as fast. Values below 0.1 or above 10.0 are strictly disallowed, but many voices will constrain the minimum and maximum rates further—for example a particular voice may not actually speak faster than 3 times normal even if you specify a value larger than 3.0. | | double | (optional) pitch | Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being highest. 1.0 corresponds to a voice's default pitch. | | double | (optional) volume | Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being highest, with a default of 1.0. | | array of string | (optional) requiredEventTypes | The TTS event types the voice must support. | | array of string | (optional) desiredEventTypes | The TTS event types that you are interested in listening to. If missing, all event types may be sent. | | function | (optional) onEvent | This function is called with events that occur in the process of speaking the utterance. | Parameters | |---| | [TtsEvent](/extensions/tts#type-TtsEvent) | event | The update event from the text-to-speech engine indicating the status of this utterance. | | | | function | (optional) callback | Called right away, before speech finishes. Check whale.runtime.lastError to make sure there were no errors. Use options.onEvent to get more detailed feedback. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### stop `whale.tts.stop()` Stops any current speech and flushes the queue of any pending utterances. In addition, if speech was paused, it will now be un-paused for the next call to speak. ### pause `whale.tts.pause()` Since Chrome 29. Pauses speech synthesis, potentially in the middle of an utterance. A call to resume or stop will un-pause speech. ### resume `whale.tts.resume()` Since Chrome 29. If speech was paused, resumes speaking where it left off. ### isSpeaking `whale.tts.isSpeaking(function callback)` Checks whether the engine is currently speaking. On Mac OS X, the result is true whenever the system speech engine is speaking, even if the speech wasn't initiated by Chrome. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean speaking) {...};` | boolean | speaking | |---|---| True if speaking, false otherwise. | | ### getVoices `whale.tts.getVoices(function callback)` Gets an array of all available voices. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of [TtsVoice](/extensions/tts#type-TtsVoice) voices) {...};` | array of [TtsVoice](/extensions/tts#type-TtsVoice) | voices | |---|---| Array of [tts.TtsVoice](/extensions/tts#type-TtsVoice) objects representing the available voices for speech synthesis. | | "},"extensions-history.html":{"url":"extensions-history.html","title":"history","keywords":"","body":"whale.history Description: Use the whale.history API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see Override Pages. Availability: Since Chrome 20. Permissions: \"history\" ## Manifest You must declare the \"history\" permission in the [extension manifest](manifest) to use the history API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"history\" ]**, ... } ## Transition types The history API uses a _transition type_ to describe how the browser navigated to a particular URL on a particular visit. For example, if a user visits a page by clicking a link on another page, the transition type is \"link\". The following table describes each transition type. | Transition type | Description | |---|---| | \"link\" | The user got to this page by clicking a link on another page. | | \"typed\" | The user got this page by typing the URL in the address bar. Also used for other explicit navigation actions. See also [generated](#tt_generated), which is used for cases where the user selected a choice that didn't look at all like a URL. | | \"auto_bookmark\" | The user got to this page through a suggestion in the UI — for example, through a menu item. | | \"auto_subframe\" | Subframe navigation. This is any content that is automatically loaded in a non-top-level frame. For example, if a page consists of several frames containing ads, those ad URLs have this transition type. The user may not even realize the content in these pages is a separate frame, and so may not care about the URL (see also [manual_subframe](#tt_manual_subframe)). | | \"manual_subframe\" | For subframe navigations that are explicitly requested by the user and generate new navigation entries in the back/forward list. An explicitly requested frame is probably more important than an automatically loaded frame because the user probably cares about the fact that the requested frame was loaded. | | \"generated\" | The user got to this page by typing in the address bar and selecting an entry that did not look like a URL. For example, a match might have the URL of a Google search result page, but it might appear to the user as \"Search Google for ...\". These are not quite the same as [typed](#tt_typed) navigations because the user didn't type or see the destination URL. See also [keyword](#tt_keyword). | | \"auto_toplevel\" | The page was specified in the command line or is the start page. | | \"form_submit\" | The user filled out values in a form and submitted it. Note that in some situations — such as when a form uses script to submit contents — submitting a form does not result in this transition type. | | \"reload\" | The user reloaded the page, either by clicking the reload button or by pressing Enter in the address bar. Session restore and Reopen closed tab use this transition type, too. | | \"keyword\" | The URL was generated from a replaceable keyword other than the default search provider. See also [keyword_generated](#tt_keyword_generated). | | \"keyword_generated\" | Corresponds to a visit generated for a keyword. See also [keyword](#tt_keyword). | ## Examples For examples of using this API, see the [history sample directory](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/history/) and the [history API test directory](https://chromium.googlesource.com/chromium/src/+/master/chrome/test/data/extensions/api_test/history/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [TransitionType](#type-TransitionType) | | [HistoryItem](#type-HistoryItem) | | [VisitItem](#type-VisitItem) | | Methods | | [search](#method-search) − `whale.history.search(object query, function callback)` | | [getVisits](#method-getVisits) − `whale.history.getVisits(object details, function callback)` | | [addUrl](#method-addUrl) − `whale.history.addUrl(object details, function callback)` | | [deleteUrl](#method-deleteUrl) − `whale.history.deleteUrl(object details, function callback)` | | [deleteRange](#method-deleteRange) − `whale.history.deleteRange(object range, function callback)` | | [deleteAll](#method-deleteAll) − `whale.history.deleteAll(function callback)` | | Events | | [onVisited](#event-onVisited) | | [onVisitRemoved](#event-onVisitRemoved) | ## Types ### TransitionType The [transition type](#transition_types) for this visit from its referrer. | Enum | |---| | `\"link\"`, `\"typed\"`, `\"auto_bookmark\"`, `\"auto_subframe\"`, `\"manual_subframe\"`, `\"generated\"`, `\"auto_toplevel\"`, `\"form_submit\"`, `\"reload\"`, `\"keyword\"`, or `\"keyword_generated\"` | ### HistoryItem An object encapsulating one result of a history query. | properties | |---| | string | id | The unique identifier for the item. | | string | (optional) url | The URL navigated to by a user. | | string | (optional) title | The title of the page when it was last loaded. | | double | (optional) lastVisitTime | When this page was last loaded, represented in milliseconds since the epoch. | | integer | (optional) visitCount | The number of times the user has navigated to this page. | | integer | (optional) typedCount | The number of times the user has navigated to this page by typing in the address. | ### VisitItem An object encapsulating one visit to a URL. | properties | |---| | string | id | The unique identifier for the item. | | string | visitId | The unique identifier for this visit. | | double | (optional) visitTime | When this visit occurred, represented in milliseconds since the epoch. | | string | referringVisitId | The visit ID of the referrer. | | [TransitionType](/extensions/history#type-TransitionType) | transition | The [transition type](#transition_types) for this visit from its referrer. | ## Methods ### search `whale.history.search(object query, function callback)` Searches the history for the last visit time of each page matching the query. | Parameters | |---| | object | query | | string | text | |---|---| A free-text query to the history service. Leave empty to retrieve all pages. | | double | (optional) startTime | Limit results to those visited after this date, represented in milliseconds since the epoch. If not specified, this defaults to 24 hours in the past. | | double | (optional) endTime | Limit results to those visited before this date, represented in milliseconds since the epoch. | | integer | (optional) maxResults | The maximum number of results to retrieve. Defaults to 100. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [HistoryItem](/extensions/history#type-HistoryItem) results) {...};` | array of [HistoryItem](/extensions/history#type-HistoryItem) | results | | |---|---|---| | ### getVisits `whale.history.getVisits(object details, function callback)` Retrieves information about visits to a URL. | Parameters | |---| | object | details | | string | url | |---|---| The URL for which to retrieve visit information. It must be in the format as returned from a call to history.search. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [VisitItem](/extensions/history#type-VisitItem) results) {...};` | array of [VisitItem](/extensions/history#type-VisitItem) | results | | |---|---|---| | ### addUrl `whale.history.addUrl(object details, function callback)` Adds a URL to the history at the current time with a [transition type](#transition_types) of \"link\". | Parameters | |---| | object | details | | string | url | |---|---| The URL to add. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteUrl `whale.history.deleteUrl(object details, function callback)` Removes all occurrences of the given URL from the history. | Parameters | |---| | object | details | | string | url | |---|---| The URL to remove. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteRange `whale.history.deleteRange(object range, function callback)` Removes all items within the specified date range from the history. Pages will not be removed from the history unless all visits fall within the range. | Parameters | |---| | object | range | | double | startTime | |---|---| Items added to history after this date, represented in milliseconds since the epoch. | | double | endTime | Items added to history before this date, represented in milliseconds since the epoch. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### deleteAll `whale.history.deleteAll(function callback)` Deletes all items from the history. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ## Events ### onVisited Fired when a URL is visited, providing the HistoryItem data for that URL. This event fires before the page has loaded. #### addListener `whale.history.onVisited.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [HistoryItem](/extensions/history#type-HistoryItem) result) {...};` | [HistoryItem](/extensions/history#type-HistoryItem) | result | | |---|---|---| | ### onVisitRemoved Fired when one or more URLs are removed from the history service. When all visits have been removed the URL is purged from history. #### addListener `whale.history.onVisitRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object removed) {...};` | object | removed | |---|---| | boolean | allHistory | |---|---| True if all history was removed. If true, then urls will be empty. | | array of string | (optional) urls | | | | "},"extensions-types.html":{"url":"extensions-types.html","title":"types","keywords":"","body":"whale.types Description: The whale.types API contains type declarations for Chrome. Availability: Since Chrome 20. ## Chrome settings The `ChromeSetting` prototype provides a common set of functions (`get()`, `set()`, and `clear()`) as well as an event publisher (`onChange`) for settings of the Chrome browser. The [proxy settings examples](proxy#overview-examples) demonstrate how these functions are intended to be used. ### Scope and life cycle Chrome distinguishes between three different scopes of browser settings: `regular` Settings set in the `regular` scope apply to regular browser windows and are inherited by incognito windows if they are not overwritten. These settings are stored to disk and remain in place until they are cleared by the governing extension, or the governing extension is disabled or uninstalled. `incognito_persistent` Settings set in the `incognito_persistent` scope apply only to incognito windows. For these, they override `regular` settings. These settings are stored to disk and remain in place until they are cleared by the governing extension, or the governing extension is disabled or uninstalled. `incognito_session_only` Settings set in the `incognito_session_only` scope apply only to incognito windows. For these, they override `regular` and `incognito_persistent` settings. These settings are not stored to disk and are cleared when the last incognito window is closed. They can only be set when at least one incognito window is open. ### Precedence Chrome manages settings on different layers. The following list describes the layers that may influence the effective settings, in increasing order of precedence. 1. System settings provided by the operating system 2. Command-line parameters 3. Settings provided by extensions 4. Policies As the list implies, policies might overrule any changes that you specify with your extension. You can use the `get()` function to determine whether your extension is capable of providing a setting or whether this setting would be overridden. As discussed above, Chrome allows using different settings for regular windows and incognito windows. The following example illustrates the behavior. Assume that no policy overrides the settings and that an extension can set settings for regular windows **(R)** and settings for incognito windows **(I)**. * If only **(R)** is set, these settings are effective for both regular and incognito windows. * If only **(I)** is set, these settings are effective for only incognito windows. Regular windows use the settings determined by the lower layers (command-line options and system settings). * If both **(R)** and **(I)** are set, the respective settings are used for regular and incognito windows. If two or more extensions want to set the same setting to different values, the extension installed most recently takes precedence over the other extensions. If the most recently installed extension sets only **(I)**, the settings of regular windows can be defined by previously installed extensions. The _effective_ value of a setting is the one that results from considering the precedence rules. It is used by Chrome. ## Summary | Types | |---| | [ChromeSettingScope](#type-ChromeSettingScope) | | [LevelOfControl](#type-LevelOfControl) | | [ChromeSetting](#type-ChromeSetting) | ## Types ### ChromeSettingScope The scope of the ChromeSetting. One of * regular: setting for the regular profile (which is inherited by the incognito profile if not overridden elsewhere), * regular_only: setting for the regular profile only (not inherited by the incognito profile), * incognito_persistent: setting for the incognito profile that survives browser restarts (overrides regular preferences), * incognito_session_only: setting for the incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular and incognito_persistent preferences). | Enum | |---| | `\"regular\"`, `\"regular_only\"`, `\"incognito_persistent\"`, or `\"incognito_session_only\"` | ### LevelOfControl One of * not_controllable: cannot be controlled by any extension * controlled_by_other_extensions: controlled by extensions with higher precedence * controllable_by_this_extension: can be controlled by this extension * controlled_by_this_extension: controlled by this extension | Enum | |---| | `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | ### ChromeSetting An interface that allows access to a Chrome browser setting. See [accessibilityFeatures](/extensions/accessibilityFeatures) for an example. ### onChange Fired after the setting changes. | methods | |---| | #### get `ChromeSetting.get(object details, function callback)` Gets the value of a setting. | Parameters | |---| | object | details | Which setting to consider. | boolean | (optional) incognito | |---|---| Whether to return the value that applies to the incognito session (default false). | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| Details of the currently effective value. | any | value | |---|---| The value of the setting. | | enum of `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | levelOfControl | The level of control of the setting. | | boolean | (optional) incognitoSpecific | Whether the effective value is specific to the incognito session. This property will _only_ be present if the incognito property in the details parameter of `get()` was true. | | | | | #### set `ChromeSetting.set(object details, function callback)` Sets the value of a setting. | Parameters | |---| | object | details | Which setting to change. | any | value | |---|---| The value of the setting. Note that every setting has a specific value type, which is described together with the setting. An extension should _not_ set a value of a different type. | | enum of `\"regular\"`, `\"regular_only\"`, `\"incognito_persistent\"`, or `\"incognito_session_only\"` | (optional) scope | Where to set the setting (default: regular). | | | function | (optional) callback | Called at the completion of the set operation. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | #### clear `ChromeSetting.clear(object details, function callback)` Clears the setting, restoring any default value. | Parameters | |---| | object | details | Which setting to clear. | enum of `\"regular\"`, `\"regular_only\"`, `\"incognito_persistent\"`, or `\"incognito_session_only\"` | (optional) scope | |---|---| Where to clear the setting (default: regular). | | | function | (optional) callback | Called at the completion of the clear operation. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | | | events | | #### addListener `onChange.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | any | value | |---|---| The value of the setting after the change. | | enum of `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | levelOfControl | The level of control of the setting. | | boolean | (optional) incognitoSpecific | Whether the value that has changed is specific to the incognito session. This property will _only_ be present if the user has enabled the extension in incognito mode. | | | | "},"extensions-i-18-n.html":{"url":"extensions-i-18-n.html","title":"i-18-n","keywords":"","body":"whale.i18n Description: Use the whale.i18n infrastructure to implement internationalization across your whole app or extension. Availability: Since Chrome 20. Content Scripts: Fully supported. Learn more You need to put all of its user-visible strings into a file named [`messages.json`](i18n-messages). Each time you add a new locale, you add a messages file under a directory named `_locales/_localeCode_`, where _localeCode_ is a code such as `en` for English. Here's the file hierarchy for an internationalized extension that supports English (`en`), Spanish (`es`), and Korean (`ko`): ![In the extension directory: manifest.json, *.html, *.js, _locales directory. In the _locales directory: en, es, and ko directories, each with a messages.json file.](/static/images/i18n-hierarchy.gif) ## How to support multiple languages Say you have an extension with the files shown in the following figure: ![A manifest.json file and a file with JavaScript. The .json file has \"name\": \"Hello World\". The JavaScript file has title = \"Hello World\";](/static/images/i18n-before.gif) To internationalize this extension, you name each user-visible string and put it into a messages file. The extension's manifest, CSS files, and JavaScript code use each string's name to get its localized version. Here's what the extension looks like when it's internationalized (note that it still has only English strings): ![In the manifest.json file, \"Hello World\" has been changed to \"__MSG_extName__\", and a new \"default_locale\" item has the value \"en\". In the JavaScript file, \"Hello World\" has been changed to whale.i18n.getMessage(\"extName\"). A new file named _locales/en/messages.json defines \"extName\".](/static/images/i18n-after-1.gif) **Important:** If an extension has a `_locales` directory, the [manifest](manifest) **must** define \"default_locale\". Some notes about internationalizing: * You can use any of the [supported locales](#overview-locales). If you use an unsupported locale, Google Chrome ignores it. * In `manifest.json` and CSS files, refer to a string named _messagename_ like this: __MSG__messagename___ * In your extension or app's JavaScript code, refer to a string named _messagename_ like this: whale.i18n.getMessage(\"_messagename_\") * In each call to `getMessage()`, you can supply up to 9 strings to be included in the message. See [Examples: getMessage](#examples-getMessage) for details. * Some messages, such as `@@bidi_dir` and `@@ui_locale`, are provided by the internationalization system. See the [Predefined messages](#overview-predefined) section for a full list of predefined message names. * In `messages.json`, each user-visible string has a name, a \"message\" item, and an optional \"description\" item. The name is a key such as \"extName\" or \"search_string\" that identifies the string. The \"message\" specifies the value of the string in this locale. The optional \"description\" provides help to translators, who might not be able to see how the string is used in your extension. For example: { \"search_string\": { \"message\": \"hello%20world\", \"description\": \"The string we search for. Put %20 between words that go together.\" }, ... } For more information, see [Formats: Locale-Specific Messages](i18n-messages). Once an extension or app is internationalized, translating it is simple. You copy `messages.json`, translate it, and put the copy into a new directory under `_locales`. For example, to support Spanish, just put a translated copy of `messages.json` under `_locales/es`. The following figure shows the previous extension with a new Spanish translation. ![This looks the same as the previous figure, but with a new file at _locales/es/messages.json that contains a Spanish translation of the messages.](/static/images/i18n-after-2.gif) ## Predefined messages The internationalization system provides a few predefined messages to help you localize. These include `@@ui_locale`, so you can detect the current UI locale, and a few `@@bidi_...` messages that let you detect the text direction. The latter messages have similar names to constants in the [gadgets BIDI (bi-directional) API](http://code.google.com/apis/gadgets/docs/i18n.html#BIDI). The special message `@@extension_id` can be used in the CSS and JavaScript files, whether or not the extension or app is localized. This message doesn't work in manifest files. The following table describes each predefined message. | Message name | Description | |---|---| | `@@extension_id` | The extension or app ID; you might use this string to construct URLs for resources inside the extension. Even unlocalized extensions can use this message. **Note:** You can't use this message in a manifest file. | | `@@ui_locale` | The current locale; you might use this string to construct locale-specific URLs. | | `@@bidi_dir` | The text direction for the current locale, either \"ltr\" for left-to-right languages such as English or \"rtl\" for right-to-left languages such as Japanese. | | `@@bidi_reversed_dir` | If the `@@bidi_dir` is \"ltr\", then this is \"rtl\"; otherwise, it's \"ltr\". | | `@@bidi_start_edge` | If the `@@bidi_dir` is \"ltr\", then this is \"left\"; otherwise, it's \"right\". | | `@@bidi_end_edge` | If the `@@bidi_dir` is \"ltr\", then this is \"right\"; otherwise, it's \"left\". | Here's an example of using `@@extension_id` in a CSS file to construct a URL: body { **background-image:url('chrome-extension://__MSG_@@extension_id__/background.png');** } If the extension ID is abcdefghijklmnopqrstuvwxyzabcdef, then the bold line in the previous code snippet becomes: background-image:url('chrome-extension://abcdefghijklmnopqrstuvwxyzabcdef/background.png'); Here's an example of using `@@bidi_*` messages in a CSS file: body { **direction: __MSG_@@bidi_dir__;** } div#header { margin-bottom: 1.05em; overflow: hidden; padding-bottom: 1.5em; **padding-__MSG_@@bidi_start_edge__: 0;** **padding-__MSG_@@bidi_end_edge__: 1.5em;** position: relative; } For left-to-right languages such as English, the bold lines become: dir: ltr; padding-left: 0; padding-right: 1.5em; ## Locales You can choose from many locales, including some (such as `en`) that let a single translation support multiple variations of a language (such as `en_GB` and `en_US`). ### Supported locales You can use any of the [locales that the Chrome Web Store supports](http://code.google.com/chrome/webstore/docs/i18n.html#localeTable). ### Searching for messages You don't have to define every string for every supported locale. As long as the default locale's `messages.json` file has a value for every string, your extension or app will run no matter how sparse a translation is. Here's how the extension system searches for a message: 1. Search the messages file (if any) for the user's preferred locale. For example, when Google Chrome's locale is set to British English (`en_GB`), the system first looks for the message in `_locales/en_GB/messages.json`. If that file exists and the message is there, the system looks no further. 2. If the user's preferred locale has a region (that is, the locale has an underscore: _), search the locale without that region. For example, if the `en_GB` messages file doesn't exist or doesn't contain the message, the system looks in the `en` messages file. If that file exists and the message is there, the system looks no further. 3. Search the messages file for the default locale. For example, if the extension's \"default_locale\" is set to \"es\", and neither `_locales/en_GB/messages.json` nor `_locales/en/messages.json` contains the message, the extension uses the message from `_locales/es/messages.json`. In the following figure, the message named \"colores\" is in all three locales that the extension supports, but \"extName\" is in only two of the locales. Wherever a user running Google Chrome in US English sees the label \"Colors\", a user of British English sees \"Colours\". Both US English and British English users see the extension name \"Hello World\". Because the default language is Spanish, users running Google Chrome in any non-English language see the label \"Colores\" and the extension name \"Hola mundo\". ![Four files: manifest.json and three messages.json files (for es, en, and en_GB). The es and en files show entries for messages named \"extName\" and \"colores\"; the en_GB file has just one entry (for \"colores\").](/static/images/i18n-strings.gif) ### How to set your browser's locale To test translations, you might want to set your browser's locale. This section tells you how to set the locale in [Windows](#testing-win), [Mac OS X](#testing-mac), and [Linux](#testing-linux). #### Windows You can change the locale using either a locale-specific shortcut or the Google Chrome UI. The shortcut approach is quicker, once you've set it up, and it lets you use several languages at once. ##### Using a locale-specific shortcut To create and use a shortcut that launches Google Chrome with a particular locale: 1. Make a copy of the Google Chrome shortcut that's already on your desktop. 2. Rename the new shortcut to match the new locale. 3. Change the shortcut's properties so that the Target field specifies the `--lang` and `--user-data-dir` flags. The target should look something like this: _path_to_whale.exe_ --lang=_locale_ --user-data-dir=c:\\_locale_profile_dir_ 4. Launch Google Chrome by double-clicking the shortcut. For example, to create a shortcut that launches Google Chrome in Spanish (`es`), you might create a shortcut named `chrome-es` that has the following target: _path_to_whale.exe_ --lang=es --user-data-dir=c:\\chrome-profile-es You can create as many shortcuts as you like, making it easy to test in multiple languages. For example: _path_to_whale.exe_ --lang=en --user-data-dir=c:\\chrome-profile-en _path_to_whale.exe_ --lang=en_GB --user-data-dir=c:\\chrome-profile-en_GB _path_to_whale.exe_ --lang=ko --user-data-dir=c:\\chrome-profile-ko **Note:** Specifying `--user-data-dir` is optional but handy. Having one data directory per locale lets you run the browser in several languages at the same time. A disadvantage is that because the locales' data isn't shared, you have to install your extension multiple times — once per locale, which can be challenging when you don't speak the language. For more information, see [Creating and Using Profiles](http://www.chromium.org/developers/creating-and-using-profiles). ##### Using the UI Here's how to change the locale using the UI on Google Chrome for Windows: 1. App icon > **Options** 2. Choose the **Under the Hood** tab 3. Scroll down to **Web Content** 4. Click **Change font and language settings** 5. Choose the **Languages** tab 6. Use the drop down to set the **Google Chrome language** 7. Restart Chrome #### Mac OS X To change the locale on Mac, you use the system preferences. 1. From the Apple menu, choose **System Preferences** 2. Under the **Personal** section, choose **International** 3. Choose your language and location 4. Restart Chrome #### Linux To change the locale on Linux, first quit Google Chrome. Then, all in one line, set the LANGUAGE environment variable and launch Google Chrome. For example: LANGUAGE=es ./chrome ## Examples You can find simple examples of internationalization in the [examples/api/i18n](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/i18n/) directory. For a complete example, see [examples/extensions/news](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/extensions/news/). For other examples and for help in viewing the source code, see [Samples](samples). ### Examples: getMessage The following code gets a localized message from the browser and displays it as a string. It replaces two placeholders within the message with the strings \"string1\" and \"string2\". function getMessage() { var message = whale.i18n.getMessage(\"click_here\", [\"string1\", \"string2\"]); document.getElementById(\"languageSpan\").innerHTML = message; } Here's how you'd supply and use a single string: _// In JavaScript code_ status.innerText = whale.i18n.getMessage(\"error\", errorDetails); \"error\": { \"message\": \"Error: $details$\", \"description\": \"Generic error template. Expects error parameter to be passed in.\", \"placeholders\": { \"details\": { \"content\": \"$1\", \"example\": \"Failed to fetch RSS feed.\" } } } For more information about placeholders, see the [Locale-Specific Messages](i18n-messages) page. For details on calling `getMessage()`, see the [API reference](/extensions/i18n#method-getMessage). ### Example: getAcceptLanguages The following code gets accept-languages from the browser and displays them as a string by separating each accept-language with ','. function getAcceptLanguages() { whale.i18n.getAcceptLanguages(function(languageList) { var languages = languageList.join(\",\"); document.getElementById(\"languageSpan\").innerHTML = languages; }) } For details on calling `getAcceptLanguages()`, see the [API reference](/extensions/i18n#method-getAcceptLanguages). ### Example: detectLanguage The following code detects up to 3 languages from the given string and displays the result as strings separated by new lines. function detectLanguage(inputText) { whale.i18n.detectLanguage(inputText, function(result) { var outputLang = \"Detected Language: \"; var outputPercent = \"Language Percentage: \"; for(i = 0; i For more details on calling `detectLanguage(inputText)`, see the [API reference](/extensions/i18n#method-detectLanguage). ## Summary | Types | |---| | [LanguageCode](#type-LanguageCode) | | Methods | | [getAcceptLanguages](#method-getAcceptLanguages) − `whale.i18n.getAcceptLanguages(function callback)` | | [getMessage](#method-getMessage) − `string whale.i18n.getMessage(string messageName, any substitutions)` | | [getUILanguage](#method-getUILanguage) − `string whale.i18n.getUILanguage()` | | [detectLanguage](#method-detectLanguage) − `whale.i18n.detectLanguage(string text, function callback)` | ## Types ### LanguageCode Since Chrome 47. string An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). For an unknown language, `und` will be returned, which means that [percentage] of the text is unknown to CLD ## Methods ### getAcceptLanguages `whale.i18n.getAcceptLanguages(function callback)` Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use [i18n.getUILanguage](/extensions/i18n#method-getUILanguage). | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [LanguageCode](/extensions/i18n#type-LanguageCode) languages) {...};` | array of [LanguageCode](/extensions/i18n#type-LanguageCode) | languages | |---|---| Array of LanguageCode | | ### getMessage `string whale.i18n.getMessage(string messageName, any substitutions)` Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the `getMessage()` call is wrong — for example, _messageName_ is not a string or the _substitutions_ array has more than 9 elements — this method returns `undefined`. | Parameters | |---| | string | messageName | The name of the message, as specified in the [`messages.json`](i18n-messages) file. | | any | (optional) substitutions | Up to 9 substitution strings, if the message requires any. | ### getUILanguage `string whale.i18n.getUILanguage()` Since Chrome 35. Gets the browser UI language of the browser. This is different from [i18n.getAcceptLanguages](/extensions/i18n#method-getAcceptLanguages) which returns the preferred user languages. ### detectLanguage `whale.i18n.detectLanguage(string text, function callback)` Since Chrome 47. Detects the language of the provided text using CLD. | Parameters | |---| | string | text | User input string to be translated. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object result) {...};` | object | result | |---|---| LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage | boolean | isReliable | |---|---| CLD detected language reliability | | array of object | languages | array of detectedLanguage #### Properties of each object DetectedLanguage object that holds detected ISO language code and its percentage in the input string | [LanguageCode](/extensions/i18n#type-LanguageCode) | language | | |---|---|---| | integer | percentage | The percentage of the detected language | | | | "},"extensions-web-navigation.html":{"url":"extensions-web-navigation.html","title":"web-navigation","keywords":"","body":"whale.webNavigation Description: Use the whale.webNavigation API to receive notifications about the status of navigation requests in-flight. Availability: Since Chrome 19. Permissions: \"webNavigation\" ## Manifest All `whale.webNavigation` methods and events require you to declare the \"webNavigation\" permission in the [extension manifest](manifest). For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"webNavigation\" ]**, ... } ## Examples You can find simple examples of using the tabs module in the [examples/api/webNavigation](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/webNavigation/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Event order For a navigation that is successfully completed, events are fired in the following order: onBeforeNavigate -> onCommitted -> onDOMContentLoaded -> onCompleted Any error that occurs during the process results in an `onErrorOccurred` event. For a specific navigation, there are no further events fired after `onErrorOccurred`. If a navigating frame contains subframes, its `onCommitted` is fired before any of its children's `onBeforeNavigate`; while `onCompleted` is fired after all of its children's `onCompleted`. If the reference fragment of a frame is changed, a `onReferenceFragmentUpdated` event is fired. This event can fire any time after `onDOMContentLoaded`, even after `onCompleted`. If the history API is used to modify the state of a frame (e.g. using `history.pushState()`, a `onHistoryStateUpdated` event is fired. This event can fire any time after `onDOMContentLoaded`. If a navigation was triggered via [Chrome Instant](https://support.google.com/chrome/answer/177873) or [Instant Pages](https://support.google.com/chrome/answer/1385029), a completely loaded page is swapped into the current tab. In that case, an `onTabReplaced` event is fired. ## Relation to webRequest events There is no defined ordering between events of the [webRequest API](webRequest) and the events of the webNavigation API. It is possible that webRequest events are still received for frames that already started a new navigation, or that a navigation only proceeds after the network resources are already fully loaded. In general, the webNavigation events are closely related to the navigation state that is displayed in the UI, while the webRequest events correspond to the state of the network stack which is generally opaque to the user. ## A note about tab IDs Not all navigating tabs correspond to actual tabs in Chrome's UI, e.g., a tab that is being pre-rendered. Such tabs are not accessible via the [tabs API](tabs) nor can you request information about them via `webNavigation.getFrame` or `webNavigation.getAllFrames`. Once such a tab is swapped in, an `onTabReplaced` event is fired and they become accessible via these APIs. ## A note about timestamps It's important to note that some technical oddities in the OS's handling of distinct Chrome processes can cause the clock to be skewed between the browser itself and extension processes. That means that WebNavigation's events' `timeStamp` property is only guaranteed to be _internally_ consistent. Comparing one event to another event will give you the correct offset between them, but comparing them to the current time inside the extension (via `(new Date()).getTime()`, for instance) might give unexpected results. ## A note about frame IDs Frames within a tab can be identified by a frame ID. The frame ID of the main frame is always 0, the ID of child frames is a positive number. Once a document is constructed in a frame, its frame ID remains constant during the lifetime of the document. As of Chrome 49, this ID is also constant for the lifetime of the frame (across multiple navigations). Due to the multi-process nature of Chrome, a tab might use different processes to render the source and destination of a web page. Therefore, if a navigation takes place in a new process, you might receive events both from the new and the old page until the new navigation is committed (i.e. the `onCommitted` event is send for the new main frame). In other words, it is possible to have more than one pending sequence of webNavigation events with the same `frameId`. The sequences can be distinguished by the `processId` key. Also note that during a provisional load the process might be switched several times. This happens when the load is redirected to a different site. In this case, you will receive repeated `onBeforeNavigate` and `onErrorOccurred` events, until you receive the final `onCommitted` event. ## Transition types and qualifiers The webNavigation API's `onCommitted` event has a `transitionType` and a `transitionQualifiers` property. The _transition type_ is the same as used in the [history API](history#transition_types) describing how the browser navigated to this particular URL. In addition, several _transition qualifiers_ can be returned that further define the navigation. The following transition qualifiers exist: | Transition qualifier | Description | |---|---| | \"client_redirect\" | One or more redirects caused by JavaScript or meta refresh tags on the page happened during the navigation. | | \"server_redirect\" | One or more redirects caused by HTTP headers sent from the server happened during the navigation. | | \"forward_back\" | The user used the Forward or Back button to initiate the navigation. | | \"from_address_bar\" | The user initiated the navigation from the address bar (aka Omnibox). | ## Summary | Types | |---| | [TransitionType](#type-TransitionType) | | [TransitionQualifier](#type-TransitionQualifier) | | Methods | | [getFrame](#method-getFrame) − `whale.webNavigation.getFrame(object details, function callback)` | | [getAllFrames](#method-getAllFrames) − `whale.webNavigation.getAllFrames(object details, function callback)` | | Events | | [onBeforeNavigate](#event-onBeforeNavigate) | | [onCommitted](#event-onCommitted) | | [onDOMContentLoaded](#event-onDOMContentLoaded) | | [onCompleted](#event-onCompleted) | | [onErrorOccurred](#event-onErrorOccurred) | | [onCreatedNavigationTarget](#event-onCreatedNavigationTarget) | | [onReferenceFragmentUpdated](#event-onReferenceFragmentUpdated) | | [onTabReplaced](#event-onTabReplaced) | | [onHistoryStateUpdated](#event-onHistoryStateUpdated) | ## Types ### TransitionType Cause of the navigation. The same transition types as defined in the history API are used. These are the same transition types as defined in the [history API](history#transition_types) except with `\"start_page\"` in place of `\"auto_toplevel\"` (for backwards compatibility). | Enum | |---| | `\"link\"`, `\"typed\"`, `\"auto_bookmark\"`, `\"auto_subframe\"`, `\"manual_subframe\"`, `\"generated\"`, `\"start_page\"`, `\"form_submit\"`, `\"reload\"`, `\"keyword\"`, or `\"keyword_generated\"` | ### TransitionQualifier | Enum | |---| | `\"client_redirect\"`, `\"server_redirect\"`, `\"forward_back\"`, or `\"from_address_bar\"` | ## Methods ### getFrame `whale.webNavigation.getFrame(object details, function callback)` Retrieves information about the given frame. A frame refers to an or a of a web page and is identified by a tab ID and a frame ID. | Parameters | |---| | object | details | Information about the frame to retrieve information about. | integer | tabId | |---|---| The ID of the tab in which the frame is. | | integer | (optional) processId | **Deprecated** since Chrome 49. Frames are now uniquely identified by their tab ID and frame ID; the process ID is no longer needed and therefore ignored. The ID of the process that runs the renderer for this tab. | | integer | frameId | The ID of the frame in the given tab. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | (optional) details | |---|---| Information about the requested frame, null if the specified frame ID and/or tab ID are invalid. | boolean | errorOccurred | |---|---| True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired. | | string | url | The URL currently associated with this frame, if the frame identified by the frameId existed at one point in the given tab. The fact that an URL is associated with a given frameId does not imply that the corresponding frame still exists. | | integer | parentFrameId | ID of frame that wraps the frame. Set to -1 of no parent frame exists. | | | ### getAllFrames `whale.webNavigation.getAllFrames(object details, function callback)` Retrieves information about all frames of a given tab. | Parameters | |---| | object | details | Information about the tab to retrieve all frames from. | integer | tabId | |---|---| The ID of the tab. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of object details) {...};` | array of object | (optional) details | |---|---| A list of frames in the given tab, null if the specified tab ID is invalid. #### Properties of each object | boolean | errorOccurred | |---|---| True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired. | | integer | processId | The ID of the process that runs the renderer for this frame. | | integer | frameId | The ID of the frame. 0 indicates that this is the main frame; a positive value indicates the ID of a subframe. | | integer | parentFrameId | ID of frame that wraps the frame. Set to -1 of no parent frame exists. | | string | url | The URL currently associated with this frame. | | | ## Events ### onBeforeNavigate Fired when a navigation is about to occur. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onBeforeNavigate.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation is about to occur. | | string | url | | | integer | processId | **Deprecated** since Chrome 50. The processId is no longer set for this event, since the process which will render the resulting document is not known until onCommit. The value of -1. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique for a given tab and process. | | integer | parentFrameId | Since Chrome 24. ID of frame that wraps the frame. Set to -1 of no parent frame exists. | | double | timeStamp | The time when the browser was about to start the navigation, in milliseconds since the epoch. | | | ### onCommitted Fired when a navigation is committed. The document (and the resources it refers to, such as images and subframes) might still be downloading, but at least part of the document has been received from the server and the browser has decided to switch to the new document. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onCommitted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | Since Chrome 22. The ID of the process that runs the renderer for this frame. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | [TransitionType](/extensions/webNavigation#type-TransitionType) | transitionType | Cause of the navigation. | | array of [TransitionQualifier](/extensions/webNavigation#type-TransitionQualifier) | transitionQualifiers | A list of transition qualifiers. | | double | timeStamp | The time when the navigation was committed, in milliseconds since the epoch. | | | ### onDOMContentLoaded Fired when the page's DOM is fully constructed, but the referenced resources may not finish loading. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onDOMContentLoaded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | Since Chrome 22. The ID of the process that runs the renderer for this frame. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | double | timeStamp | The time when the page's DOM was fully constructed, in milliseconds since the epoch. | | | ### onCompleted Fired when a document, including the resources it refers to, is completely loaded and initialized. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onCompleted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | Since Chrome 22. The ID of the process that runs the renderer for this frame. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | double | timeStamp | The time when the document finished loading, in milliseconds since the epoch. | | | ### onErrorOccurred Fired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onErrorOccurred.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | **Deprecated** since Chrome 50. The processId is no longer set for this event. The value of -1. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | string | error | The error description. | | double | timeStamp | The time when the error occurred, in milliseconds since the epoch. | | | ### onCreatedNavigationTarget Fired when a new window, or a new tab in an existing window, is created to host a navigation. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onCreatedNavigationTarget.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | sourceTabId | |---|---| The ID of the tab in which the navigation is triggered. | | integer | sourceProcessId | Since Chrome 22. The ID of the process that runs the renderer for the source frame. | | integer | sourceFrameId | The ID of the frame with sourceTabId in which the navigation is triggered. 0 indicates the main frame. | | string | url | The URL to be opened in the new window. | | integer | tabId | The ID of the tab in which the url is opened | | double | timeStamp | The time when the browser was about to create a new view, in milliseconds since the epoch. | | | ### onReferenceFragmentUpdated Fired when the reference fragment of a frame was updated. All future events for that frame will use the updated URL. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onReferenceFragmentUpdated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | Since Chrome 22. The ID of the process that runs the renderer for this frame. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | [TransitionType](/extensions/webNavigation#type-TransitionType) | transitionType | Cause of the navigation. | | array of [TransitionQualifier](/extensions/webNavigation#type-TransitionQualifier) | transitionQualifiers | A list of transition qualifiers. | | double | timeStamp | The time when the navigation was committed, in milliseconds since the epoch. | | | ### onTabReplaced Since Chrome 22. Fired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab. #### addListener `whale.webNavigation.onTabReplaced.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | replacedTabId | |---|---| The ID of the tab that was replaced. | | integer | tabId | The ID of the tab that replaced the old tab. | | double | timeStamp | The time when the replacement happened, in milliseconds since the epoch. | | | ### onHistoryStateUpdated Since Chrome 22. Fired when the frame's history was updated to a new URL. All future events for that frame will use the updated URL. #### Filters array of object url Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event. #### Properties of each object Filters URLs for various criteria. See [event filtering](events#filtered). All criteria are case sensitive. | string | (optional) hostContains | |---|---| Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name. | | string | (optional) hostEquals | Matches if the host name of the URL is equal to a specified string. | | string | (optional) hostPrefix | Matches if the host name of the URL starts with a specified string. | | string | (optional) hostSuffix | Matches if the host name of the URL ends with a specified string. | | string | (optional) pathContains | Matches if the path segment of the URL contains a specified string. | | string | (optional) pathEquals | Matches if the path segment of the URL is equal to a specified string. | | string | (optional) pathPrefix | Matches if the path segment of the URL starts with a specified string. | | string | (optional) pathSuffix | Matches if the path segment of the URL ends with a specified string. | | string | (optional) queryContains | Matches if the query segment of the URL contains a specified string. | | string | (optional) queryEquals | Matches if the query segment of the URL is equal to a specified string. | | string | (optional) queryPrefix | Matches if the query segment of the URL starts with a specified string. | | string | (optional) querySuffix | Matches if the query segment of the URL ends with a specified string. | | string | (optional) urlContains | Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlEquals | Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlMatches | Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) originAndPathMatches | Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt). | | string | (optional) urlPrefix | Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number. | | string | (optional) urlSuffix | Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number. | | array of string | (optional) schemes | Matches if the scheme of the URL is equal to any of the schemes specified in the array. | | array of integer or array of integer | (optional) ports | Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200. | #### addListener `whale.webNavigation.onHistoryStateUpdated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | tabId | |---|---| The ID of the tab in which the navigation occurs. | | string | url | | | integer | processId | The ID of the process that runs the renderer for this frame. | | integer | frameId | 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab. | | [TransitionType](/extensions/webNavigation#type-TransitionType) | transitionType | Cause of the navigation. | | array of [TransitionQualifier](/extensions/webNavigation#type-TransitionQualifier) | transitionQualifiers | A list of transition qualifiers. | | double | timeStamp | The time when the navigation was committed, in milliseconds since the epoch. | | | "},"extensions-identity.html":{"url":"extensions-identity.html","title":"identity","keywords":"","body":"whale.identity Description: Use the whale.identity API to get OAuth2 access tokens. Availability: Since Chrome 29. Permissions: \"identity\" Learn More: Identify User ## Summary | Types | |---| | [AccountInfo](#type-AccountInfo) | | Methods | | [getAccounts](#method-getAccounts) − `whale.identity.getAccounts(function callback)` | | [getAuthToken](#method-getAuthToken) − `whale.identity.getAuthToken(object details, function callback)` | | [getProfileUserInfo](#method-getProfileUserInfo) − `whale.identity.getProfileUserInfo(function callback)` | | [removeCachedAuthToken](#method-removeCachedAuthToken) − `whale.identity.removeCachedAuthToken(object details, function callback)` | | [launchWebAuthFlow](#method-launchWebAuthFlow) − `whale.identity.launchWebAuthFlow(object details, function callback)` | | [getRedirectURL](#method-getRedirectURL) − `string whale.identity.getRedirectURL(string path)` | | Events | | [onSignInChanged](#event-onSignInChanged) | ## Types ### AccountInfo Since Chrome 32. | properties | |---| | string | id | A unique identifier for the account. This ID will not change for the lifetime of the account. | ## Methods ### getAccounts `whale.identity.getAccounts(function callback)` **Dev** channel only. [Learn more](api_index#dev_apis). Retrieves a list of AccountInfo objects describing the accounts present on the profile. `getAccounts` is only supported on dev channel. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [AccountInfo](/extensions/identity#type-AccountInfo) accounts) {...};` | array of [AccountInfo](/extensions/identity#type-AccountInfo) | accounts | | |---|---|---| | ### getAuthToken `whale.identity.getAuthToken(object details, function callback)` Gets an OAuth2 access token using the client ID and scopes specified in the [`oauth2` section of manifest.json](app_identity.html#update_manifest). The Identity API caches access tokens in memory, so it's ok to call `getAuthToken` non-interactively any time a token is required. The token cache automatically handles expiration. For a good user experience it is important interactive token requests are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests, or Chrome sign in screens if they are not signed in, with with no context. In particular, do not use `getAuthToken` interactively when your app is first launched. | Parameters | |---| | object | (optional) details | Token options. | boolean | (optional) interactive | |---|---| Fetching a token may require the user to sign-in to Chrome, or approve the application's requested scopes. If the interactive flag is `true`, `getAuthToken` will prompt the user as necessary. When the flag is `false` or omitted, `getAuthToken` will return failure any time a prompt would be required. | | [AccountInfo](/extensions/identity#type-AccountInfo) | (optional) account | Since Chrome 37. The account ID whose token should be returned. If not specified, the primary account for the profile will be used. `account` is only supported when the \"enable-new-profile-management\" flag is set. | | array of string | (optional) scopes | Since Chrome 37. A list of OAuth2 scopes to request. When the `scopes` field is present, it overrides the list of scopes specified in manifest.json. | | | function | (optional) callback | Called with an OAuth2 access token as specified by the manifest, or undefined if there was an error. If you specify the _callback_ parameter, it should be a function that looks like this: `function(string token) {...};` | string | (optional) token | | |---|---|---| | ### getProfileUserInfo `whale.identity.getProfileUserInfo(function callback)` Since Chrome 37. Retrieves email address and obfuscated gaia id of the user signed into a profile. This API is different from identity.getAccounts in two ways. The information returned is available offline, and it only applies to the primary account for the profile. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object userInfo) {...};` | object | userInfo | |---|---| | string | email | |---|---| An email address for the user account signed into the current profile. Empty if the user is not signed in or the `identity.email` manifest permission is not specified. | | string | id | A unique identifier for the account. This ID will not change for the lifetime of the account. Empty if the user is not signed in or (in M41+) the `identity.email` manifest permission is not specified. | | | ### removeCachedAuthToken `whale.identity.removeCachedAuthToken(object details, function callback)` Removes an OAuth2 access token from the Identity API's token cache. If an access token is discovered to be invalid, it should be passed to removeCachedAuthToken to remove it from the cache. The app may then retrieve a fresh token with `getAuthToken`. | Parameters | |---| | object | details | Token information. | string | token | |---|---| The specific token that should be removed from the cache. | | | function | (optional) callback | Called when the token has been removed from the cache. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### launchWebAuthFlow `whale.identity.launchWebAuthFlow(object details, function callback)` Starts an auth flow at the specified URL. This method enables auth flows with non-Google identity providers by launching a web view and navigating it to the first URL in the provider's auth flow. When the provider redirects to a URL matching the pattern `https://.chromiumapp.org/*`, the window will close, and the final redirect URL will be passed to the callback function. For a good user experience it is important interactive auth flows are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests with no context. In particular, do not launch an interactive auth flow when your app is first launched. | Parameters | |---| | object | details | WebAuth flow options. | string | url | |---|---| The URL that initiates the auth flow. | | boolean | (optional) interactive | Whether to launch auth flow in interactive mode. Since some auth flows may immediately redirect to a result URL, `launchWebAuthFlow` hides its web view until the first navigation either redirects to the final URL, or finishes loading a page meant to be displayed. If the interactive flag is `true`, the window will be displayed when a page load completes. If the flag is `false` or omitted, `launchWebAuthFlow` will return with an error if the initial navigation does not complete the flow. | | | function | callback | Called with the URL redirected back to your application. The _callback_ parameter should be a function that looks like this: `function(string responseUrl) {...};` | string | (optional) responseUrl | | |---|---|---| | ### getRedirectURL `string whale.identity.getRedirectURL(string path)` Since Chrome 33. Generates a redirect URL to be used in |launchWebAuthFlow|. The generated URLs match the pattern `https://.chromiumapp.org/*`. | Parameters | |---| | string | (optional) path | The path appended to the end of the generated URL. | ## Events ### onSignInChanged Since Chrome 33. Fired when signin state changes for an account on the user's profile. #### addListener `whale.identity.onSignInChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [AccountInfo](/extensions/identity#type-AccountInfo) account, boolean signedIn) {...};` | [AccountInfo](/extensions/identity#type-AccountInfo) | account | |---|---| Since Chrome 32. | | boolean | signedIn | Since Chrome 32. | | "},"extensions-web-request.html":{"url":"extensions-web-request.html","title":"web-request","keywords":"","body":"whale.webRequest Description: Use the whale.webRequest API to observe and analyze traffic and to intercept, block, or modify requests in-flight. Availability: Since Chrome 19. Permissions: \"webRequest\" host permissions | ## Manifest You must declare the \"webRequest\" permission in the [extension manifest](manifest) to use the web request API, along with [host permissions](declare_permissions) for any hosts whose network requests you want to access. If you want to use the web request API in a blocking fashion, you need to request the \"webRequestBlocking\" permission in addition. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"webRequest\", \"*://*.google.com/\" ]**, ... } ## Life cycle of requests The web request API defines a set of events that follow the life cycle of a web request. You can use these events to observe and analyze traffic. Certain synchronous events will allow you to intercept, block, or modify a request. The event life cycle for successful requests is illustrated here, followed by event definitions: ![Life cycle of a web request from the perspective of the webrequest API](/static/images/webrequestapi.png) `onBeforeRequest` (optionally synchronous) Fires when a request is about to occur. This event is sent before any TCP connection is made and can be used to cancel or redirect requests. `onBeforeSendHeaders` (optionally synchronous) Fires when a request is about to occur and the initial headers have been prepared. The event is intended to allow extensions to add, modify, and delete request headers [(*)](#life_cycle_footnote). The `onBeforeSendHeaders` event is passed to all subscribers, so different subscribers may attempt to modify the request; see the [Implementation details](#implementation) section for how this is handled. This event can be used to cancel the request. `onSendHeaders` Fires after all extensions have had a chance to modify the request headers, and presents the final [(*)](#life_cycle_footnote) version. The event is triggered before the headers are sent to the network. This event is informational and handled asynchronously. It does not allow modifying or cancelling the request. `onHeadersReceived` (optionally synchronous) Fires each time that an HTTP(S) response header is received. Due to redirects and authentication requests this can happen multiple times per request. This event is intended to allow extensions to add, modify, and delete response headers, such as incoming Set-Cookie headers. The caching directives are processed before this event is triggered, so modifying headers such as Cache-Control has no influence on the browser's cache. It also allows you to cancel or redirect the request. `onAuthRequired` (optionally synchronous) Fires when a request requires authentication of the user. This event can be handled synchronously to provide authentication credentials. Note that extensions may provide invalid credentials. Take care not to enter an infinite loop by repeatedly providing invalid credentials. This can also be used to cancel the request. `onBeforeRedirect` Fires when a redirect is about to be executed. A redirection can be triggered by an HTTP response code or by an extension. This event is informational and handled asynchronously. It does not allow you to modify or cancel the request. `onResponseStarted` Fires when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available. This event is informational and handled asynchronously. It does not allow modifying or cancelling the request. `onCompleted` Fires when a request has been processed successfully. `onErrorOccurred` Fires when a request could not be processed successfully. The web request API guarantees that for each request either `onCompleted` or `onErrorOccurred` is fired as the final event with one exception: If a request is redirected to a `data://` URL, `onBeforeRedirect` is the last reported event. (*) Note that the web request API presents an abstraction of the network stack to the extension. Internally, one URL request can be split into several HTTP requests (for example to fetch individual byte ranges from a large file) or can be handled by the network stack without communicating with the network. For this reason, the API does not provide the final HTTP headers that are sent to the network. For example, all headers that are related to caching are invisible to the extension. The following headers are currently **not provided** to the `onBeforeSendHeaders` event. This list is not guaranteed to be complete nor stable. * Authorization * Cache-Control * Connection * Content-Length * Host * If-Modified-Since * If-None-Match * If-Range * Partial-Data * Pragma * Proxy-Authorization * Proxy-Connection * Transfer-Encoding The webRequest API only exposes requests that the extension has permission to see, given its [host permissions](declare_permissions). Moreover, only the following schemes are accessible: `http://`, `https://`, `ftp://`, `file://`, `ws://` (since Chrome 58), `wss://` (since Chrome 58), or `chrome-extension://`. In addition, even certain requests with URLs using one of the above schemes are hidden, e.g., `chrome-extension://other_extension_id` where `other_extension_id` is not the ID of the extension to handle the request, `https://www.google.com/chrome`, and others (this list is not complete). Also synchronous XMLHttpRequests from your extension are hidden from blocking event handlers in order to prevent deadlocks. Note that for some of the supported schemes the set of available events might be limited due to the nature of the corresponding protocol. For example, for the file: scheme, only `onBeforeRequest`, `onResponseStarted`, `onCompleted`, and `onErrorOccurred` may be dispatched. Starting from Chrome 58, the webRequest API supports intercepting the WebSocket handshake request. Since the handshake is done by means of an HTTP upgrade request, its flow fits into HTTP-oriented webRequest model. Note that the API does **not intercept**: * Individual messages sent over an established WebSocket connection. * WebSocket closing connection. Redirects are **not supported** for WebSocket requests. ## Concepts As the following sections explain, events in the web request API use request IDs, and you can optionally specify filters and extra information when you register event listeners. ### Request IDs Each request is identified by a request ID. This ID is unique within a browser session and the context of an extension. It remains constant during the the life cycle of a request and can be used to match events for the same request. Note that several HTTP requests are mapped to one web request in case of HTTP redirection or HTTP authentication. ### Registering event listeners To register an event listener for a web request, you use a variation on the [usual `addListener()` function](events). In addition to specifying a callback function, you have to specify a filter argument and you may specify an optional extra info argument. The three arguments to the web request API's `addListener()` have the following definitions: var callback = function(details) {...}; var filter = {...}; var opt_extraInfoSpec = [...]; Here's an example of listening for the `onBeforeRequest` event: whale.webRequest.onBeforeRequest.addListener( callback, filter, opt_extraInfoSpec); Each `addListener()` call takes a mandatory callback function as the first parameter. This callback function is passed a dictionary containing information about the current URL request. The information in this dictionary depends on the specific event type as well as the content of `opt_extraInfoSpec`. If the optional `opt_extraInfoSpec` array contains the string `'blocking'` (only allowed for specific events), the callback function is handled synchronously. That means that the request is blocked until the callback function returns. In this case, the callback can return a [webRequest.BlockingResponse](/extensions/webRequest#type-BlockingResponse) that determines the further life cycle of the request. Depending on the context, this response allows cancelling or redirecting a request (`onBeforeRequest`), cancelling a request or modifying headers (`onBeforeSendHeaders`, `onHeadersReceived`), and cancelling a request or providing authentication credentials (`onAuthRequired`). If the optional `opt_extraInfoSpec` array contains the string `'asyncBlocking'` instead (only allowed for `onAuthRequired`), the extension can generate the [webRequest.BlockingResponse](/extensions/webRequest#type-BlockingResponse) asynchronously. The [webRequest.RequestFilter](/extensions/webRequest#type-RequestFilter) `filter` allows limiting the requests for which events are triggered in various dimensions: URLs [URL patterns](match_patterns) such as `*://www.google.com/foo*bar`. Types Request types such as `main_frame` (a document that is loaded for a top-level frame), `sub_frame` (a document that is loaded for an embedded frame), and `image` (an image on a web site). See [webRequest.RequestFilter](/extensions/webRequest#type-RequestFilter). Tab ID The identifier for one tab. Window ID The identifier for a window. Depending on the event type, you can specify strings in `opt_extraInfoSpec` to ask for additional information about the request. This is used to provide detailed information on request's data only if explicitly requested. ## Implementation details Several implementation details can be important to understand when developing an extension that uses the web request API: ### Conflict resolution In the current implementation of the web request API, a request is considered as cancelled if at least one extension instructs to cancel the request. If an extension cancels a request, all extensions are notified by an `onErrorOccurred` event. Only one extension is allowed to redirect a request or modify a header at a time. If more than one extension attempts to modify the request, the most recently installed extension wins and all others are ignored. An extension is not notified if its instruction to modify or redirect has been ignored. ### Caching Chrome employs two caches — an on-disk cache and a very fast in-memory cache. The lifetime of an in-memory cache is attached to the lifetime of a render process, which roughly corresponds to a tab. Requests that are answered from the in-memory cache are invisible to the web request API. If a request handler changes its behavior (for example, the behavior according to which requests are blocked), a simple page refresh might not respect this changed behavior. To make sure the behavior change goes through, call `handlerBehaviorChanged()` to flush the in-memory cache. But don't do it often; flushing the cache is a very expensive operation. You don't need to call `handlerBehaviorChanged()` after registering or unregistering an event listener. ### Timestamps The `timestamp` property of web request events is only guaranteed to be _internally_ consistent. Comparing one event to another event will give you the correct offset between them, but comparing them to the current time inside the extension (via `(new Date()).getTime()`, for instance) might give unexpected results. ### Error handling If you try to register an event with invalid arguments, then a JavaScript error will be thrown, and the event handler will not be registered. If an error is thrown while an event is handled, or if an event handler returns an invalid blocking response, an error message is logged to your extension's console and the handler is ignored for that request. ## Examples The following example illustrates how to block all requests to `www.evil.com`: whale.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: details.url.indexOf(\"://www.evil.com/\") != -1}; }, {urls: [\"\"]}, [\"blocking\"]); As this function uses a blocking event handler, it requires the \"webRequest\" as well as the \"webRequestBlocking\" permission in the manifest file. The following example achieves the same goal in a more efficient way because requests that are not targeted to `www.evil.com` do not need to be passed to the extension: whale.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: true}; }, {urls: [\"*://www.evil.com/*\"]}, [\"blocking\"]); The following example illustrates how to delete the User-Agent header from all requests: whale.webRequest.onBeforeSendHeaders.addListener( function(details) { for (var i = 0; i \"]}, [\"blocking\", \"requestHeaders\"]); For more example code, see the [web request samples](samples#search:webrequest). ## Summary | Types | |---| | [ResourceType](#type-ResourceType) | | [OnBeforeRequestOptions](#type-OnBeforeRequestOptions) | | [OnBeforeSendHeadersOptions](#type-OnBeforeSendHeadersOptions) | | [OnSendHeadersOptions](#type-OnSendHeadersOptions) | | [OnHeadersReceivedOptions](#type-OnHeadersReceivedOptions) | | [OnAuthRequiredOptions](#type-OnAuthRequiredOptions) | | [OnResponseStartedOptions](#type-OnResponseStartedOptions) | | [OnBeforeRedirectOptions](#type-OnBeforeRedirectOptions) | | [OnCompletedOptions](#type-OnCompletedOptions) | | [RequestFilter](#type-RequestFilter) | | [HttpHeaders](#type-HttpHeaders) | | [BlockingResponse](#type-BlockingResponse) | | [UploadData](#type-UploadData) | | Properties | | [MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES](#property-MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES) | | Methods | | [handlerBehaviorChanged](#method-handlerBehaviorChanged) − `whale.webRequest.handlerBehaviorChanged(function callback)` | | Events | | [onBeforeRequest](#event-onBeforeRequest) | | [onBeforeSendHeaders](#event-onBeforeSendHeaders) | | [onSendHeaders](#event-onSendHeaders) | | [onHeadersReceived](#event-onHeadersReceived) | | [onAuthRequired](#event-onAuthRequired) | | [onResponseStarted](#event-onResponseStarted) | | [onBeforeRedirect](#event-onBeforeRedirect) | | [onCompleted](#event-onCompleted) | | [onErrorOccurred](#event-onErrorOccurred) | ## Types ### ResourceType | Enum | |---| | `\"main_frame\"`, `\"sub_frame\"`, `\"stylesheet\"`, `\"script\"`, `\"image\"`, `\"font\"`, `\"object\"`, `\"xmlhttprequest\"`, `\"ping\"`, `\"csp_report\"`, `\"media\"`, `\"websocket\"`, or `\"other\"` | ### OnBeforeRequestOptions | Enum | |---| | `\"blocking\"`, or `\"requestBody\"` | ### OnBeforeSendHeadersOptions | Enum | |---| | `\"requestHeaders\"`, or `\"blocking\"` | ### OnSendHeadersOptions | Enum | |---| | `\"requestHeaders\"` | ### OnHeadersReceivedOptions | Enum | |---| | `\"blocking\"`, or `\"responseHeaders\"` | ### OnAuthRequiredOptions | Enum | |---| | `\"responseHeaders\"`, `\"blocking\"`, or `\"asyncBlocking\"` | ### OnResponseStartedOptions | Enum | |---| | `\"responseHeaders\"` | ### OnBeforeRedirectOptions | Enum | |---| | `\"responseHeaders\"` | ### OnCompletedOptions | Enum | |---| | `\"responseHeaders\"` | ### RequestFilter An object describing filters to apply to webRequest events. | properties | |---| | array of string | urls | A list of URLs or URL patterns. Requests that cannot match any of the URLs will be filtered out. | | array of [ResourceType](/extensions/webRequest#type-ResourceType) | (optional) types | A list of request types. Requests that cannot match any of the types will be filtered out. | | integer | (optional) tabId | | | integer | (optional) windowId | | ### HttpHeaders array of object An array of HTTP headers. Each header is represented as a dictionary containing the keys `name` and either `value` or `binaryValue`. ### BlockingResponse Returns value for event handlers that have the 'blocking' extraInfoSpec applied. Allows the event handler to modify network requests. | properties | |---| | boolean | (optional) cancel | If true, the request is cancelled. This prevents the request from being sent. This can be used as a response to the onBeforeRequest, onBeforeSendHeaders, onHeadersReceived and onAuthRequired events. | | string | (optional) redirectUrl | Only used as a response to the onBeforeRequest and onHeadersReceived events. If set, the original request is prevented from being sent/completed and is instead redirected to the given URL. Redirections to non-HTTP schemes such as `data:` are allowed. Redirects initiated by a redirect action use the original request method for the redirect, with one exception: If the redirect is initiated at the onHeadersReceived stage, then the redirect will be issued using the GET method. Redirects from URLs with `ws://` and `wss://` schemes are **ignored**. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) requestHeaders | Only used as a response to the onBeforeSendHeaders event. If set, the request is made with these request headers instead. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | Only used as a response to the onHeadersReceived event. If set, the server is assumed to have responded with these response headers instead. Only return `responseHeaders` if you really want to modify the headers in order to limit the number of conflicts (only one extension may modify `responseHeaders` for each request). | | object | (optional) authCredentials | Only used as a response to the onAuthRequired event. If set, the request is made using the supplied credentials. | string | username | | |---|---|---| | string | password | | | ### UploadData Since Chrome 23. Contains data uploaded in a URL request. | properties | |---| | any | (optional) bytes | An ArrayBuffer with a copy of the data. | | string | (optional) file | A string with the file's path and name. | ## Properties | `20` | `whale.webRequest.MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES` | |---|---| Since Chrome 23. The maximum number of times that `handlerBehaviorChanged` can be called per 10 minute sustained interval. `handlerBehaviorChanged` is an expensive function call that shouldn't be called often. | ## Methods ### handlerBehaviorChanged `whale.webRequest.handlerBehaviorChanged(function callback)` Needs to be called when the behavior of the webRequest handlers has changed to prevent incorrect handling due to caching. This function call is expensive. Don't call it often. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onBeforeRequest Fired when a request is about to occur. #### addListener `whale.webRequest.onBeforeRequest.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | object | (optional) requestBody | Since Chrome 23. Contains the HTTP request body data. Only provided if extraInfoSpec contains 'requestBody'. | string | (optional) error | |---|---| Errors when obtaining request body data. | | object | (optional) formData | If the request method is POST and the body is a sequence of key-value pairs encoded in UTF8, encoded as either multipart/form-data, or application/x-www-form-urlencoded, this dictionary is present and for each key contains the list of all values for that key. If the data is of another media type, or if it is malformed, the dictionary is not present. An example value of this dictionary is {'key': ['value1', 'value2']}. | | array of [UploadData](/extensions/webRequest#type-UploadData) | (optional) raw | If the request method is PUT or POST, and the body is not already parsed in formData, then the unparsed request body elements are contained in this array. | | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | | ### onBeforeSendHeaders Fired before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any HTTP data is sent. #### addListener `whale.webRequest.onBeforeSendHeaders.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) requestHeaders | The HTTP request headers that are going to be sent out with this request. | | | ### onSendHeaders Fired just before a request is going to be sent to the server (modifications of previous onBeforeSendHeaders callbacks are visible by the time onSendHeaders is fired). #### addListener `whale.webRequest.onSendHeaders.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) requestHeaders | The HTTP request headers that have been sent out with this request. | | | ### onHeadersReceived Fired when HTTP response headers of a request have been received. #### addListener `whale.webRequest.onHeadersReceived.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| Since Chrome 31. | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | statusLine | HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line). | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | The HTTP response headers that have been received with this response. | | integer | statusCode | Since Chrome 43. Standard HTTP status code returned by the server. | | | ### onAuthRequired Fired when an authentication failure is received. The listener has three options: it can provide authentication credentials, it can cancel the request and display the error page, or it can take no action on the challenge. If bad user credentials are provided, this may be called multiple times for the same request. Note, only one of `'blocking'` or `'asyncBlocking'` modes must be specified in the `extraInfoSpec` parameter. #### addListener `whale.webRequest.onAuthRequired.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details, function asyncCallback) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | scheme | The authentication scheme, e.g. Basic or Digest. | | string | (optional) realm | The authentication realm provided by the server, if there is one. | | object | challenger | The server requesting authentication. | string | host | | |---|---|---| | integer | port | | | | boolean | isProxy | True for Proxy-Authenticate, false for WWW-Authenticate. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | The HTTP response headers that were received along with this response. | | string | statusLine | HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers. | | integer | statusCode | Since Chrome 43. Standard HTTP status code returned by the server. | | | function | (optional) asyncCallback | Only valid if `'asyncBlocking'` is specified as one of the `OnAuthRequiredOptions`. If you specify the _asyncCallback_ parameter, it should be a function that looks like this: `function( [BlockingResponse](/extensions/webRequest#type-BlockingResponse) response) {...};` | [BlockingResponse](/extensions/webRequest#type-BlockingResponse) | response | | |---|---|---| | | ### onResponseStarted Fired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available. #### addListener `whale.webRequest.onResponseStarted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | (optional) ip | The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address. | | boolean | fromCache | Indicates if this response was fetched from disk cache. | | integer | statusCode | Standard HTTP status code returned by the server. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | The HTTP response headers that were received along with this response. | | string | statusLine | HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers. | | | ### onBeforeRedirect Fired when a server-initiated redirect is about to occur. #### addListener `whale.webRequest.onBeforeRedirect.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | (optional) ip | The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address. | | boolean | fromCache | Indicates if this response was fetched from disk cache. | | integer | statusCode | Standard HTTP status code returned by the server. | | string | redirectUrl | The new URL. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | The HTTP response headers that were received along with this redirect. | | string | statusLine | HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers. | | | ### onCompleted Fired when a request is completed. #### addListener `whale.webRequest.onCompleted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | (optional) ip | The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address. | | boolean | fromCache | Indicates if this response was fetched from disk cache. | | integer | statusCode | Standard HTTP status code returned by the server. | | [HttpHeaders](/extensions/webRequest#type-HttpHeaders) | (optional) responseHeaders | The HTTP response headers that were received along with this response. | | string | statusLine | HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers. | | | ### onErrorOccurred Fired when an error occurs. #### addListener `whale.webRequest.onErrorOccurred.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | requestId | |---|---| The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request. | | string | url | | | string | method | Standard HTTP method. | | integer | frameId | The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab. | | integer | parentFrameId | ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists. | | integer | tabId | The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab. | | [ResourceType](/extensions/webRequest#type-ResourceType) | type | How the requested resource will be used. | | double | timeStamp | The time when this signal is triggered, in milliseconds since the epoch. | | string | (optional) ip | The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address. | | boolean | fromCache | Indicates if this response was fetched from disk cache. | | string | error | The error description. This string is _not_ guaranteed to remain backwards compatible between releases. You must not parse and act based upon its content. | | | "},"extensions-idle.html":{"url":"extensions-idle.html","title":"idle","keywords":"","body":"whale.idle Description: Use the whale.idle API to detect when the machine's idle state changes. Availability: Since Chrome 20. Permissions: \"idle\" ## Manifest You must declare the \"idle\" permission in your extension's manifest to use the idle API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"idle\" ]**, ... } ## Summary | Types | |---| | [IdleState](#type-IdleState) | | Methods | | [queryState](#method-queryState) − `whale.idle.queryState(integer detectionIntervalInSeconds, function callback)` | | [setDetectionInterval](#method-setDetectionInterval) − `whale.idle.setDetectionInterval(integer intervalInSeconds)` | | Events | | [onStateChanged](#event-onStateChanged) | ## Types ### IdleState | Enum | |---| | `\"active\"`, `\"idle\"`, or `\"locked\"` | ## Methods ### queryState `whale.idle.queryState(integer detectionIntervalInSeconds, function callback)` Returns \"locked\" if the system is locked, \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise. | Parameters | |---| | integer | detectionIntervalInSeconds | Since Chrome 25. The system is considered idle if detectionIntervalInSeconds seconds have elapsed since the last user input detected. | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [IdleState](/extensions/idle#type-IdleState) newState) {...};` | [IdleState](/extensions/idle#type-IdleState) | newState | | |---|---|---| | ### setDetectionInterval `whale.idle.setDetectionInterval(integer intervalInSeconds)` Since Chrome 25. Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds. | Parameters | |---| | integer | intervalInSeconds | Threshold, in seconds, used to determine when the system is in an idle state. | ## Events ### onStateChanged Fired when the system changes to an active, idle or locked state. The event fires with \"locked\" if the screen is locked or the screensaver activates, \"idle\" if the system is unlocked and the user has not generated any input for a specified number of seconds, and \"active\" when the user generates input on an idle system. #### addListener `whale.idle.onStateChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [IdleState](/extensions/idle#type-IdleState) newState) {...};` | [IdleState](/extensions/idle#type-IdleState) | newState | | |---|---|---| | "},"extensions-webstore.html":{"url":"extensions-webstore.html","title":"webstore","keywords":"","body":"whale.webstore Description: Use the whale.webstore API to initiate app and extension installations \"inline\" from your site. Availability: Since Chrome 20. Learn More: Using Inline Installation ## Summary | Types | |---| | [InstallStage](#type-InstallStage) | | [ErrorCode](#type-ErrorCode) | | Methods | | [install](#method-install) − `whale.webstore.install(string url, function successCallback, function failureCallback)` | | Events | | [onInstallStageChanged](#event-onInstallStageChanged) | | [onDownloadProgress](#event-onDownloadProgress) | ## Types ### InstallStage Enum used to indicate the stage of the installation process. 'downloading' indicates that the necessary files are being downloaded, and 'installing' indicates that the files are downloaded and are being actively installed. | Enum | |---| | `\"installing\"`, or `\"downloading\"` | ### ErrorCode Enum of the possible install results, including error codes sent back in the event that an inline installation has failed. | Enum | |---| | `\"otherError\"` An uncommon, unrecognized, or unexpected error. In some cases, the readable error string can provide more information. `\"aborted\"` The operation was aborted as the requestor is no longer alive. `\"installInProgress\"` An installation of the same extension is in progress. `\"notPermitted\"` The installation is not permitted. `\"invalidId\"` Invalid Chrome Web Store item ID. `\"webstoreRequestError\"` Failed to retrieve extension metadata from the Web Store. `\"invalidWebstoreResponse\"` The extension metadata retrieved from the Web Store was invalid. `\"invalidManifest\"` An error occurred while parsing the extension manifest retrieved from the Web Store. `\"iconError\"` Failed to retrieve the extension's icon from the Web Store, or the icon was invalid. `\"userCanceled\"` The user canceled the operation. `\"blacklisted\"` The extension is blacklisted. `\"missingDependencies\"` Unsatisfied dependencies, such as shared modules. `\"requirementViolations\"` Unsatisfied requirements, such as webgl. `\"blockedByPolicy\"` The extension is blocked by management policies. `\"launchFeatureDisabled\"` The launch feature is not available. `\"launchUnsupportedExtensionType\"` The launch feature is not supported for the extension type. `\"launchInProgress\"` A launch of the same extension is in progress. | ## Methods ### install `whale.webstore.install(string url, function successCallback, function failureCallback)` | Parameters | |---| | string | (optional) url | If you have more than one `` tag on your page with the `chrome-webstore-item` relation, you can choose which item you'd like to install by passing in its URL here. If it is omitted, then the first (or only) link will be used. An exception will be thrown if the passed in URL does not exist on the page. | | function | (optional) successCallback | This function is invoked when inline installation successfully completes (after the dialog is shown and the user agrees to add the item to Chrome). You may wish to use this to hide the user interface element that prompted the user to install the app or extension. | | function | (optional) failureCallback | This function is invoked when inline installation does not successfully complete. Possible reasons for this include the user canceling the dialog, the linked item not being found in the store, or the install being initiated from a non-verified site. If you specify the _failureCallback_ parameter, it should be a function that looks like this: `function(string error, [ErrorCode](/extensions/webstore#type-ErrorCode) errorCode) {...};` | string | error | |---|---| The failure detail. You may wish to inspect or log this for debugging purposes, but you should not rely on specific strings being passed back. | | [ErrorCode](/extensions/webstore#type-ErrorCode) | (optional) errorCode | The error code from the stable set of possible errors. | | ## Events ### onInstallStageChanged Since Chrome 35. Fired when an inline installation enters a new InstallStage. In order to receive notifications about this event, listeners must be registered before the inline installation begins. #### addListener `whale.webstore.onInstallStageChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InstallStage](/extensions/webstore#type-InstallStage) stage) {...};` | [InstallStage](/extensions/webstore#type-InstallStage) | stage | |---|---| The InstallStage that just began. | | ### onDownloadProgress Since Chrome 35. Fired periodically with the download progress of an inline install. In order to receive notifications about this event, listeners must be registered before the inline installation begins. #### addListener `whale.webstore.onDownloadProgress.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(double percentDownloaded) {...};` | double | percentDownloaded | |---|---| The progress of the download, between 0 and 1\\. 0 indicates no progress; 1.0 indicates complete. | | "},"extensions-input-ime.html":{"url":"extensions-input-ime.html","title":"input-ime","keywords":"","body":"whale.input.ime Description: Use the whale.input.ime API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window. Availability: Since Chrome 21. Permissions: \"input\" ## Manifest You must declare the \"input\" permission in the [extension manifest](manifest) to use the input.ime API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"input\" ]**, ... } ## Examples The following code creates an IME that converts typed letters to upper case. var context_id = -1; whale.input.ime.onFocus.addListener(function(context) { context_id = context.contextID; }); whale.input.ime.onKeyEvent.addListener( function(engineID, keyData) { if (keyData.type == \"keydown\" && keyData.key.match(/^[a-z]$/)) { whale.input.ime.commitText({\"contextID\": context_id, \"text\": keyData.key.toUpperCase()}); return true; } else { return false; } }); For an example of using this API, see the [basic input.ime sample](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/input.ime/basic/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [KeyboardEventType](#type-KeyboardEventType) | | [KeyboardEvent](#type-KeyboardEvent) | | [InputContextType](#type-InputContextType) | | [InputContext](#type-InputContext) | | [MenuItemStyle](#type-MenuItemStyle) | | [MenuItem](#type-MenuItem) | | [UnderlineStyle](#type-UnderlineStyle) | | [WindowPosition](#type-WindowPosition) | | [ScreenType](#type-ScreenType) | | [CallbackStyle](#type-CallbackStyle) | | [MouseButton](#type-MouseButton) | | [WindowType](#type-WindowType) | | [Bounds](#type-Bounds) | | [CreateWindowOptions](#type-CreateWindowOptions) | | Methods | | [setComposition](#method-setComposition) − `whale.input.ime.setComposition(object parameters, function callback)` | | [clearComposition](#method-clearComposition) − `whale.input.ime.clearComposition(object parameters, function callback)` | | [commitText](#method-commitText) − `whale.input.ime.commitText(object parameters, function callback)` | | [sendKeyEvents](#method-sendKeyEvents) − `whale.input.ime.sendKeyEvents(object parameters, function callback)` | | [hideInputView](#method-hideInputView) − `whale.input.ime.hideInputView()` | | [setCandidateWindowProperties](#method-setCandidateWindowProperties) − `whale.input.ime.setCandidateWindowProperties(object parameters, function callback)` | | [setCandidates](#method-setCandidates) − `whale.input.ime.setCandidates(object parameters, function callback)` | | [setCursorPosition](#method-setCursorPosition) − `whale.input.ime.setCursorPosition(object parameters, function callback)` | | [setMenuItems](#method-setMenuItems) − `whale.input.ime.setMenuItems(object parameters, function callback)` | | [updateMenuItems](#method-updateMenuItems) − `whale.input.ime.updateMenuItems(object parameters, function callback)` | | [deleteSurroundingText](#method-deleteSurroundingText) − `whale.input.ime.deleteSurroundingText(object parameters, function callback)` | | [keyEventHandled](#method-keyEventHandled) − `whale.input.ime.keyEventHandled(string requestId, boolean response)` | | [createWindow](#method-createWindow) − `whale.input.ime.createWindow( CreateWindowOptions options, function callback)` | | [showWindow](#method-showWindow) − `whale.input.ime.showWindow(integer windowId, function callback)` | | [hideWindow](#method-hideWindow) − `whale.input.ime.hideWindow(integer windowId, function callback)` | | [activate](#method-activate) − `whale.input.ime.activate(function callback)` | | [deactivate](#method-deactivate) − `whale.input.ime.deactivate(function callback)` | | Events | | [onActivate](#event-onActivate) | | [onDeactivated](#event-onDeactivated) | | [onFocus](#event-onFocus) | | [onBlur](#event-onBlur) | | [onInputContextUpdate](#event-onInputContextUpdate) | | [onKeyEvent](#event-onKeyEvent) | | [onCandidateClicked](#event-onCandidateClicked) | | [onMenuItemActivated](#event-onMenuItemActivated) | | [onSurroundingTextChanged](#event-onSurroundingTextChanged) | | [onReset](#event-onReset) | | [onCompositionBoundsChanged](#event-onCompositionBoundsChanged) | ## Types ### KeyboardEventType | Enum | |---| | `\"keyup\"`, or `\"keydown\"` | ### KeyboardEvent See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent | properties | |---| | [KeyboardEventType](/extensions/input.ime#type-KeyboardEventType) | type | One of keyup or keydown. | | string | requestId | The ID of the request. | | string | (optional) extensionId | Since Chrome 34. The extension ID of the sender of this keyevent. | | string | key | Value of the key being pressed | | string | code | Since Chrome 26. Value of the physical key being pressed. The value is not affected by current keyboard layout or modifier state. | | integer | (optional) keyCode | Since Chrome 37. The deprecated HTML keyCode, which is system- and implementation-dependent numerical code signifying the unmodified identifier associated with the key pressed. | | boolean | (optional) altKey | Whether or not the ALT key is pressed. | | boolean | (optional) ctrlKey | Whether or not the CTRL key is pressed. | | boolean | (optional) shiftKey | Whether or not the SHIFT key is pressed. | | boolean | (optional) capsLock | Since Chrome 29. Whether or not the CAPS_LOCK is enabled. | ### InputContextType Type of value this text field edits, (Text, Number, URL, etc) | Enum | |---| | `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"number\"`, or `\"password\"` | ### InputContext Describes an input Context | properties | |---| | integer | contextID | This is used to specify targets of text field operations. This ID becomes invalid as soon as onBlur is called. | | [InputContextType](/extensions/input.ime#type-InputContextType) | type | Type of value this text field edits, (Text, Number, URL, etc) | | boolean | autoCorrect | Since Chrome 40. Whether the text field wants auto-correct. | | boolean | autoComplete | Since Chrome 40. Whether the text field wants auto-complete. | | boolean | spellCheck | Since Chrome 40. Whether the text field wants spell-check. | ### MenuItemStyle The type of menu item. Radio buttons between separators are considered grouped. | Enum | |---| | `\"check\"`, `\"radio\"`, or `\"separator\"` | ### MenuItem Since Chrome 30. A menu item used by an input method to interact with the user from the language menu. | properties | |---| | string | id | String that will be passed to callbacks referencing this MenuItem. | | string | (optional) label | Text displayed in the menu for this item. | | [MenuItemStyle](/extensions/input.ime#type-MenuItemStyle) | (optional) style | The type of menu item. | | boolean | (optional) visible | Indicates this item is visible. | | boolean | (optional) checked | Indicates this item should be drawn with a check. | | boolean | (optional) enabled | Indicates this item is enabled. | ### UnderlineStyle The type of the underline to modify this segment. | Enum | |---| | `\"underline\"`, `\"doubleUnderline\"`, or `\"noUnderline\"` | ### WindowPosition Where to display the candidate window. If set to 'cursor', the window follows the cursor. If set to 'composition', the window is locked to the beginning of the composition. | Enum | |---| | `\"cursor\"`, or `\"composition\"` | ### ScreenType The screen type under which the IME is activated. | Enum | |---| | `\"normal\"`, `\"login\"`, `\"lock\"`, or `\"secondary-login\"` | ### CallbackStyle | Enum | |---| | `\"async\"` | ### MouseButton Which mouse buttons was clicked. | Enum | |---| | `\"left\"`, `\"middle\"`, or `\"right\"` | ### WindowType The IME window types. | Enum | |---| | `\"normal\"`, or `\"followCursor\"` | ### Bounds Since Chrome 50. Describes the screen coordinates of a rect. | properties | |---| | integer | left | The left of the bounds. | | integer | top | The top of the bounds. | | integer | width | The width of the bounds. | | integer | height | The height of the bounds . | ### CreateWindowOptions Since Chrome 50. The options to create an IME window | properties | |---| | [WindowType](/extensions/input.ime#type-WindowType) | windowType | | | string | (optional) url | | | [Bounds](/extensions/input.ime#type-Bounds) | (optional) bounds | | ## Methods ### setComposition `whale.input.ime.setComposition(object parameters, function callback)` Set the current composition. If this extension does not own the active IME, this fails. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the composition text will be set | | string | text | Text to set | | integer | (optional) selectionStart | Position in the text that the selection starts at. | | integer | (optional) selectionEnd | Position in the text that the selection ends at. | | integer | cursor | Position in the text of the cursor. | | array of object | (optional) segments | List of segments and their associated types. #### Properties of each object | integer | start | |---|---| Index of the character to start this segment at | | integer | end | Index of the character to end this segment after. | | [UnderlineStyle](/extensions/input.ime#type-UnderlineStyle) | style | The type of the underline to modify this segment. | | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### clearComposition `whale.input.ime.clearComposition(object parameters, function callback)` Clear the current composition. If this extension does not own the active IME, this fails. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the composition will be cleared | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### commitText `whale.input.ime.commitText(object parameters, function callback)` Commits the provided text to the current input. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the text will be committed | | string | text | The text to commit | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### sendKeyEvents `whale.input.ime.sendKeyEvents(object parameters, function callback)` Since Chrome 33. Sends the key events. This function is expected to be used by virtual keyboards. When key(s) on a virtual keyboard is pressed by a user, this function is used to propagate that event to the system. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the key events will be sent, or zero to send key events to non-input field. | | array of [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) | keyData | Data on the key event. | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### hideInputView `whale.input.ime.hideInputView()` Since Chrome 34. Hides the input view window, which is popped up automatically by system. If the input view window is already hidden, this function will do nothing. ### setCandidateWindowProperties `whale.input.ime.setCandidateWindowProperties(object parameters, function callback)` Sets the properties of the candidate window. This fails if the extension doesn't own the active IME | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to set properties on. | | object | properties | | boolean | (optional) visible | |---|---| True to show the Candidate window, false to hide it. | | boolean | (optional) cursorVisible | True to show the cursor, false to hide it. | | boolean | (optional) vertical | True if the candidate window should be rendered vertical, false to make it horizontal. | | integer | (optional) pageSize | The number of candidates to display per page. | | string | (optional) auxiliaryText | Text that is shown at the bottom of the candidate window. | | boolean | (optional) auxiliaryTextVisible | True to display the auxiliary text, false to hide it. | | [WindowPosition](/extensions/input.ime#type-WindowPosition) | (optional) windowPosition | Since Chrome 28. Where to display the candidate window. | | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setCandidates `whale.input.ime.setCandidates(object parameters, function callback)` Sets the current candidate list. This fails if this extension doesn't own the active IME | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context that owns the candidate window. | | array of object | candidates | List of candidates to show in the candidate window #### Properties of each object | string | candidate | |---|---| The candidate | | integer | id | The candidate's id | | integer | (optional) parentId | The id to add these candidates under | | string | (optional) label | Short string displayed to next to the candidate, often the shortcut key or index | | string | (optional) annotation | Additional text describing the candidate | | object | (optional) usage | The usage or detail description of word. | string | title | |---|---| The title string of details description. | | string | body | The body string of detail description. | | | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setCursorPosition `whale.input.ime.setCursorPosition(object parameters, function callback)` Set the position of the cursor in the candidate window. This is a no-op if this extension does not own the active IME. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context that owns the candidate window. | | integer | candidateID | ID of the candidate to select. | | | function | (optional) callback | Called when the operation completes If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setMenuItems `whale.input.ime.setMenuItems(object parameters, function callback)` Adds the provided menu items to the language menu when this IME is active. | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to use | | array of [MenuItem](/extensions/input.ime#type-MenuItem) | items | MenuItems to add. They will be added in the order they exist in the array. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### updateMenuItems `whale.input.ime.updateMenuItems(object parameters, function callback)` Updates the state of the MenuItems specified | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to use | | array of [MenuItem](/extensions/input.ime#type-MenuItem) | items | Array of MenuItems to update | | | function | (optional) callback | Called when the operation completes If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteSurroundingText `whale.input.ime.deleteSurroundingText(object parameters, function callback)` Since Chrome 27. Deletes the text around the caret. | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine receiving the event. | | integer | contextID | ID of the context where the surrounding text will be deleted. | | integer | offset | The offset from the caret position where deletion will start. This value can be negative. | | integer | length | The number of characters to be deleted | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### keyEventHandled `whale.input.ime.keyEventHandled(string requestId, boolean response)` Since Chrome 25. Indicates that the key event received by onKeyEvent is handled. This should only be called if the onKeyEvent listener is asynchronous. | Parameters | |---| | string | requestId | Request id of the event that was handled. This should come from keyEvent.requestId | | boolean | response | True if the keystroke was handled, false if not | ### createWindow `whale.input.ime.createWindow( [CreateWindowOptions](/extensions/input.ime#type-CreateWindowOptions) options, function callback)` Since Chrome 50. Creates IME window. | Parameters | |---| | [CreateWindowOptions](/extensions/input.ime#type-CreateWindowOptions) | options | The options of the newly created IME window. | | function | callback | Called when the operation completes. The _callback_ parameter should be a function that looks like this: `function(Window windowObject) {...};` | Window | windowObject | |---|---| The JavaScript 'window' object of the newly created IME window. It contains the additional 'id' property for the parameters of the other functions like showWindow/hideWindow. | | ### showWindow `whale.input.ime.showWindow(integer windowId, function callback)` Since Chrome 51. Shows the IME window. This makes the hidden window visible. | Parameters | |---| | integer | windowId | The ID of the IME window. | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### hideWindow `whale.input.ime.hideWindow(integer windowId, function callback)` Since Chrome 51. Hides the IME window. This doesn't close the window. Instead, it makes the window invisible. The extension can cache the window and show/hide it for better performance. | Parameters | |---| | integer | windowId | The ID of the IME window. | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### activate `whale.input.ime.activate(function callback)` Since Chrome 50. Activates the IME extension so that it can receive events. | Parameters | |---| | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deactivate `whale.input.ime.deactivate(function callback)` Since Chrome 50. Deactivates the IME extension so that it cannot receive events. | Parameters | |---| | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onActivate This event is sent when an IME is activated. It signals that the IME will be receiving onKeyPress events. #### addListener `whale.input.ime.onActivate.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, [ScreenType](/extensions/input.ime#type-ScreenType) screen) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | [ScreenType](/extensions/input.ime#type-ScreenType) | screen | Since Chrome 38. The screen type under which the IME is activated. | | ### onDeactivated This event is sent when an IME is deactivated. It signals that the IME will no longer be receiving onKeyPress events. #### addListener `whale.input.ime.onDeactivated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | ### onFocus This event is sent when focus enters a text box. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onFocus.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InputContext](/extensions/input.ime#type-InputContext) context) {...};` | [InputContext](/extensions/input.ime#type-InputContext) | context | |---|---| Describes the text field that has acquired focus. | | ### onBlur This event is sent when focus leaves a text box. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onBlur.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer contextID) {...};` | integer | contextID | |---|---| The ID of the text field that has lost focus. The ID is invalid after this call | | ### onInputContextUpdate This event is sent when the properties of the current InputContext change, such as the the type. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onInputContextUpdate.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InputContext](/extensions/input.ime#type-InputContext) context) {...};` | [InputContext](/extensions/input.ime#type-InputContext) | context | |---|---| An InputContext object describing the text field that has changed. | | ### onKeyEvent Fired when a key event is sent from the operating system. The event will be sent to the extension if this extension owns the active IME. #### addListener `whale.input.ime.onKeyEvent.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) keyData) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) | keyData | Data on the key event | | ### onCandidateClicked This event is sent if this extension owns the active IME. #### addListener `whale.input.ime.onCandidateClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, integer candidateID, [MouseButton](/extensions/input.ime#type-MouseButton) button) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | integer | candidateID | ID of the candidate that was clicked. | | [MouseButton](/extensions/input.ime#type-MouseButton) | button | Which mouse buttons was clicked. | | ### onMenuItemActivated Called when the user selects a menu item #### addListener `whale.input.ime.onMenuItemActivated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, string name) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | string | name | Name of the MenuItem which was activated | | ### onSurroundingTextChanged Since Chrome 27. Called when the editable string around caret is changed or when the caret position is moved. The text length is limited to 100 characters for each back and forth direction. #### addListener `whale.input.ime.onSurroundingTextChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, object surroundingInfo) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | object | surroundingInfo | The surrounding information. | string | text | |---|---| The text around the cursor. This is only a subset of all text in the input field. | | integer | focus | The ending position of the selection. This value indicates caret position if there is no selection. | | integer | anchor | The beginning position of the selection. This value indicates caret position if there is no selection. | | integer | offset | Since Chrome 46. The offset position of `text`. Since `text` only includes a subset of text around the cursor, offset indicates the absolute position of the first character of `text`. | | | ### onReset Since Chrome 29. This event is sent when chrome terminates ongoing text input session. #### addListener `whale.input.ime.onReset.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | ### onCompositionBoundsChanged Since Chrome 50. Triggered when the bounds of the IME composition text or cursor are changed. The IME composition text is the instance of text produced in the input method editor. #### addListener `whale.input.ime.onCompositionBoundsChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Bounds](/extensions/input.ime#type-Bounds) boundsList) {...};` | array of [Bounds](/extensions/input.ime#type-Bounds) | boundsList | |---|---| List of bounds information for each character on IME composition text. If there's no composition text in the editor, this array contains the bound information of the cursor. | | "},"extensions-windows.html":{"url":"extensions-windows.html","title":"windows","keywords":"","body":"whale.windows Description: Use the whale.windows API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser. Availability: Since Chrome 20. Permissions: The whale.windows API can be used without declaring any permission. However, the \"tabs\" permission is required in order to populate the [url](tabs#property-Tab-url), [title](tabs#property-Tab-title), and [favIconUrl](tabs#property-Tab-favIconUrl) properties of [Tab](tabs#type-Tab) objects. ## Manifest When requested, a `[windows.Window](/extensions/windows#type-Window)` will contain an array of `[tabs.Tab](/extensions/tabs#type-Tab)` objects. You must declare the `\"tabs\"` permission in your [manifest](manifest) if you require access to the `[url](/extensions/tabs#property-Tab-url)`, `[title](/extensions/tabs#property-Tab-title)`, or `[favIconUrl](/extensions/tabs#property-Tab-favIconUrl)` properties of `[tabs.Tab](/extensions/tabs#type-Tab)`. For example: { \"name\": \"My extension\", ... **\"permissions\": [\"tabs\"]**, ... } ## The current window Many functions in the extension system take an optional windowId parameter, which defaults to the current window. The _current window_ is the window that contains the code that is currently executing. It's important to realize that this can be different from the topmost or focused window. For example, say an extension creates a few tabs or windows from a single HTML file, and that the HTML file contains a call to [tabs.query](/extensions/tabs#method-query). The current window is the window that contains the page that made the call, no matter what the topmost window is. In the case of the [event page](event_pages), the value of the current window falls back to the last active window. Under some circumstances, there may be no current window for background pages. ## Examples ![Two windows, each with one tab](/static/images/windows.png) You can find simple examples of using the windows module in the [examples/api/windows](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/windows/) directory. Another example is in the [tabs_api.html](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/tabs/inspector/tabs_api.html) file of the [inspector](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/tabs/inspector/) example. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [WindowType](#type-WindowType) | | [WindowState](#type-WindowState) | | [Window](#type-Window) | | [CreateType](#type-CreateType) | | Properties | | [WINDOW_ID_NONE](#property-WINDOW_ID_NONE) | | [WINDOW_ID_CURRENT](#property-WINDOW_ID_CURRENT) | | Methods | | [get](#method-get) − `whale.windows.get(integer windowId, object getInfo, function callback)` | | [getCurrent](#method-getCurrent) − `whale.windows.getCurrent(object getInfo, function callback)` | | [getLastFocused](#method-getLastFocused) − `whale.windows.getLastFocused(object getInfo, function callback)` | | [getAll](#method-getAll) − `whale.windows.getAll(object getInfo, function callback)` | | [create](#method-create) − `whale.windows.create(object createData, function callback)` | | [update](#method-update) − `whale.windows.update(integer windowId, object updateInfo, function callback)` | | [remove](#method-remove) − `whale.windows.remove(integer windowId, function callback)` | | Events | | [onCreated](#event-onCreated) | | [onRemoved](#event-onRemoved) | | [onFocusChanged](#event-onFocusChanged) | ## Types ### WindowType The type of browser window this is. Under some circumstances a Window may not be assigned type property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | Enum | |---| | `\"normal\"`, `\"popup\"`, `\"panel\"`, `\"app\"`, or `\"devtools\"` | ### WindowState The state of this browser window. Under some circumstances a Window may not be assigned state property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | Enum | |---| | `\"normal\"` Normal window state (i.e. not minimized, maximized, or fullscreen). `\"minimized\"` Minimized window state. `\"maximized\"` Maximized window state. `\"fullscreen\"` Fullscreen window state. `\"docked\"` _Deprecated since Chrome M59._ Docked windows are no longer supported. This state will be converted to \"normal\". | ### Window | properties | |---| | integer | (optional) id | The ID of the window. Window IDs are unique within a browser session. Under some circumstances a Window may not be assigned an ID, for example when querying windows using the [sessions](/extensions/sessions) API, in which case a session ID may be present. | | boolean | focused | Whether the window is currently the focused window. | | integer | (optional) top | The offset of the window from the top edge of the screen in pixels. Under some circumstances a Window may not be assigned top property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) left | The offset of the window from the left edge of the screen in pixels. Under some circumstances a Window may not be assigned left property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) width | The width of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned width property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) height | The height of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned height property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | array of [tabs.Tab](/extensions/tabs#type-Tab) | (optional) tabs | Array of [tabs.Tab](/extensions/tabs#type-Tab) objects representing the current tabs in the window. | | boolean | incognito | Whether the window is incognito. | | [WindowType](/extensions/windows#type-WindowType) | (optional) type | The type of browser window this is. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | The state of this browser window. | | boolean | alwaysOnTop | Whether the window is set to be always on top. | | string | (optional) sessionId | Since Chrome 31. The session ID used to uniquely identify a Window obtained from the [sessions](/extensions/sessions) API. | ### CreateType Specifies what type of browser window to create. 'panel' is deprecated and only available to existing whitelisted extensions on Chrome OS. | Enum | |---| | `\"normal\"`, `\"popup\"`, or `\"panel\"` | ## Properties | `-1` | `whale.windows.WINDOW_ID_NONE` | The windowId value that represents the absence of a chrome browser window. | |---|---|---| | `-2` | `whale.windows.WINDOW_ID_CURRENT` | The windowId value that represents the [current window](windows#current-window). | ## Methods ### get `whale.windows.get(integer windowId, object getInfo, function callback)` Gets details about a window. | Parameters | |---| | integer | windowId | | | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getCurrent `whale.windows.getCurrent(object getInfo, function callback)` Gets the [current window](#current-window). | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getLastFocused `whale.windows.getLastFocused(object getInfo, function callback)` Gets the window that was most recently focused — typically the window 'on top'. | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getAll `whale.windows.getAll(object getInfo, function callback)` Gets all windows. | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, each [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects for that window. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Window](/extensions/windows#type-Window) windows) {...};` | array of [Window](/extensions/windows#type-Window) | windows | | |---|---|---| | ### create `whale.windows.create(object createData, function callback)` Creates (opens) a new browser with any optional sizing, position or default URL provided. | Parameters | |---| | object | (optional) createData | | string or array of string | (optional) url | |---|---| A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page. | | integer | (optional) tabId | The id of the tab for which you want to adopt to the new window. | | integer | (optional) left | The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels. | | integer | (optional) top | The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels. | | integer | (optional) width | The width in pixels of the new window, including the frame. If not specified defaults to a natural width. | | integer | (optional) height | The height in pixels of the new window, including the frame. If not specified defaults to a natural height. | | boolean | (optional) focused | If true, opens an active window. If false, opens an inactive window. | | boolean | (optional) incognito | Whether the new window should be an incognito window. | | [CreateType](/extensions/windows#type-CreateType) | (optional) type | Specifies what type of browser window to create. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | Since Chrome 44. The initial state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | (optional) window | |---|---| Contains details about the created window. | | ### update `whale.windows.update(integer windowId, object updateInfo, function callback)` Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged. | Parameters | |---| | integer | windowId | | | object | updateInfo | | integer | (optional) left | |---|---| The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels. | | integer | (optional) top | The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels. | | integer | (optional) width | The width to resize the window to in pixels. This value is ignored for panels. | | integer | (optional) height | The height to resize the window to in pixels. This value is ignored for panels. | | boolean | (optional) focused | If true, brings the window to the front. If false, brings the next window in the z-order to the front. | | boolean | (optional) drawAttention | If true, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to false to cancel a previous draw attention request. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | The new state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### remove `whale.windows.remove(integer windowId, function callback)` Removes (closes) a window, and all the tabs inside it. | Parameters | |---| | integer | windowId | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onCreated Fired when a window is created. #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being created must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | |---|---| Details of the window that was created. | | ### onRemoved Fired when a window is removed (closed). #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being removed must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer windowId) {...};` | integer | windowId | |---|---| ID of the removed window. | | ### onFocusChanged Fired when the currently focused window changes. Will be whale.windows.WINDOW_ID_NONE if all chrome windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one chrome window to another. #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being removed must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onFocusChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer windowId) {...};` | integer | windowId | |---|---| ID of the newly focused window. | | "},"extensions-instance-id.html":{"url":"extensions-instance-id.html","title":"instance-id","keywords":"","body":"whale.instanceID Description: Use whale.instanceID to access the Instance ID service. Availability: Since Chrome 46. Permissions: \"gcm\" ## Summary | Methods | |---| | [getID](#method-getID) − `whale.instanceID.getID(function callback)` | | [getCreationTime](#method-getCreationTime) − `whale.instanceID.getCreationTime(function callback)` | | [getToken](#method-getToken) − `whale.instanceID.getToken(object getTokenParams, function callback)` | | [deleteToken](#method-deleteToken) − `whale.instanceID.deleteToken(object deleteTokenParams, function callback)` | | [deleteID](#method-deleteID) − `whale.instanceID.deleteID(function callback)` | | Events | | [onTokenRefresh](#event-onTokenRefresh) | ## Methods ### getID `whale.instanceID.getID(function callback)` Retrieves an identifier for the app instance. The instance ID will be returned by the `callback`. The same ID will be returned as long as the application identity has not been revoked or expired. | Parameters | |---| | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when instanceID is empty. The _callback_ parameter should be a function that looks like this: `function(string instanceID) {...};` | string | instanceID | |---|---| An Instance ID assigned to the app instance. | | ### getCreationTime `whale.instanceID.getCreationTime(function callback)` Retrieves the time when the InstanceID has been generated. The creation time will be returned by the `callback`. | Parameters | |---| | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when creationTime is zero. The _callback_ parameter should be a function that looks like this: `function(double creationTime) {...};` | double | creationTime | |---|---| The time when the Instance ID has been generated, represented in milliseconds since the epoch. | | ### getToken `whale.instanceID.getToken(object getTokenParams, function callback)` Return a token that allows the authorized entity to access the service defined by scope. | Parameters | |---| | object | getTokenParams | Parameters for getToken. | string | authorizedEntity | |---|---| Identifies the entity that is authorized to access resources associated with this Instance ID. It can be a project ID from [Google developer console](https://code.google.com/apis/console). | | string | scope | Identifies authorized actions that the authorized entity can take. E.g. for sending GCM messages, `GCM` scope should be used. | | object | (optional) options | Allows including a small number of string key/value pairs that will be associated with the token and may be used in processing the request. | | | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when token is empty. The _callback_ parameter should be a function that looks like this: `function(string token) {...};` | string | token | |---|---| A token assigned by the requested service. | | ### deleteToken `whale.instanceID.deleteToken(object deleteTokenParams, function callback)` Revokes a granted token. | Parameters | |---| | object | deleteTokenParams | Parameters for deleteToken. | string | authorizedEntity | |---|---| The authorized entity that is used to obtain the token. | | string | scope | The scope that is used to obtain the token. | | | function | callback | Function called when the token deletion completes. The token was revoked successfully if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ### deleteID `whale.instanceID.deleteID(function callback)` Resets the app instance identifier and revokes all tokens associated with it. | Parameters | |---| | function | callback | Function called when the deletion completes. The instance identifier was revoked successfully if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ## Events ### onTokenRefresh Fired when all the granted tokens need to be refreshed. #### addListener `whale.instanceID.onTokenRefresh.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Availability Definition for this term Permissions With it's definition, this can contain bold text and all other kinds of inline markup ... function callback Callback Function. "}}