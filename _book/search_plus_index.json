{"./":{"url":"./","title":"Introduction","keywords":"","body":" 뀨 깃북이 머여 문서작성 + 호스팅 플랫폼. npm을 기반으로 한 플러그인 마켓이 있어서 여러 기능을 끌어다 쓰기 편하다(만 찾기는 좀 힘들다). 기본으로 제공하는 검색창, 사용자 의견받기, pdf 다운로드 지원등이 매우 편리함. SaaS 로만 제공하는 단호박. github.io 가 있어서인듯. 데스크탑 에디터가 있긴 한데 마크다운 편집기가 구타유발툴이라 npm 설치를 추천. (gitbook 코어가 버전이 여러개이기도 하고) $ npm install gitbook-cli -g cli는 이런 명령어를 지원 $ gitbook init (./newDir) 기본 파일 생성 $ gitbook build 빌드 $ gitbook serve 로컬 서버 + 변경사항 watch => 빌드 & 리프레시 지원, _book 디렉터리에 빌드 결과물 업데이트. $ gitbook install plugin 설치 어케 만듬 파일 컨벤션 README.md (필수) SUMMARY.md (toc용) GLOSSARY.md (용어집 - 자동 색인되어 문서에서 링크되어서 보여짐) book.json (gitbook 설정) cover.jpg, cover_small.jpg (커버이미지라는데 아직 확인 못함) 원격저장소 그냥 올리면 된다. origin master 최고. 예시 깃북 셋팅에서 다른 브랜치로도 지정 가능. 멀티 링구얼 문서 폴더 구조로 대응 가능. 어또케 호스팅 ? 깃헙 계정 + repo 필요 (org에 문서를 호스팅하려는 경우 그 계정으로 로긴해야 한다.) https://www.gitbook.com/ 접속, 깃헙 계정으로 로긴하면 이메일로 컨펌이 온다. 그걸 누르면 아래 페이지로 감. Integration - 버튼 클릭 > 깃북용 리포 선택 > install gitbook Account - 깃헙 계정 연동 위의 두 가지를 하고 나면 Books 메뉴에 create 메뉴가 생김. 끗. 예시 커스텀하기 플러그인(npm) 설치/제작 - https://plugins.gitbook.com/ 플러긴 관리 : book.json에 이름 넣고 git install 하면 설치해주는데 지우는 커멘드가 안 보임 어차피 npm이므로 gitbook-plugin-${이름}으로 package.json 따로 관리하는게 나을듯. 이 gitbook에 설치해본거 search-pro - 검색 highlight prism - syntax highlight codepen - 무료라 혹했는데 플러긴이 바보 되어있음 ㅠㅠ jsbin - pro 계정 필요 JS Bin on jsbin.com 테마도 플러긴으로 바꿔볼까 했는데 아직 테마 마켓은 성숙하지 않은듯... 그러므로 테마는 직접 야매로 바꾸는게 낫습니다. css 수정 - styles/website.css layout 수정 - _layout/website/... 템플릿 언어 : nunjucks 구조 참고 : GitbookIO/theme-default 양 많아지면 걍 플러그인 행이 나을듯. See More gitbook FAQ gitbook toolchain doc "},"extensions-api-index.html":{"url":"extensions-api-index.html","title":"API INDEX","keywords":"","body":"JavaScript APIs Chrome provides extensions with many special-purpose APIs like whale.runtime and whale.alarms. Stable APIs Name Description Since accessibilityFeatures Use the whale.accessibilityFeatures API to manage Chrome's accessibility features. This API relies on the ChromeSetting prototype of the type API for getting and setting individual accessibility features. In order to get feature states the extension must request accessibilityFeatures.read permission. For modifying feature state, the extension needs accessibilityFeatures.modify permission. Note that accessibilityFeatures.modify does not imply accessibilityFeatures.read permission. 37 alarms Use the whale.alarms API to schedule code to run periodically or at a specified time in the future. 22 bookmarks Use the whale.bookmarks API to create, organize, and otherwise manipulate bookmarks. Also see Override Pages, which you can use to create a custom Bookmark Manager page. 20 browserAction Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup. 20 browsingData Use the whale.browsingData API to remove browsing data from a user's local profile. 20 certificateProvider Use this API to expose certificates to the platform which can use these certificates for TLS authentications. 46 commands Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension. 25 contentSettings Use the whale.contentSettings API to change settings that control whether websites can use features such as cookies, JavaScript, and plugins. More generally speaking, content settings allow you to customize Chrome's behavior on a per-site basis instead of globally. 20 contextMenus Use the whale.contextMenus API to add items to Google Chrome's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages. 20 cookies Use the whale.cookies API to query and modify cookies, and to be notified when they change. 20 debugger The whale.debugger API serves as an alternate transport for Chrome's remote debugging protocol. Use whale.debugger to attach to one or more tabs to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee tabId to target tabs with sendCommand and route events by tabId from onEvent callbacks. 20 declarativeContent Use the whale.declarativeContent API to take actions depending on the content of a page, without requiring permission to read the page's content. 33 desktopCapture Desktop Capture API that can be used to capture content of screen, individual windows or tabs. 34 devtools.inspectedWindow Use the whale.devtools.inspectedWindow API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page. 21 devtools.network Use the whale.devtools.network API to retrieve the information about network requests displayed by the Developer Tools in the Network panel. 21 devtools.panels Use the whale.devtools.panels API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars. 21 documentScan Use the whale.documentScan API to discover and retrieve images from attached paper document scanners. 44 downloads Use the whale.downloads API to programmatically initiate, monitor, manipulate, and search for downloads. 31 enterprise.deviceAttributes Use the whale.enterprise.deviceAttributes API to read device attributes. 46 enterprise.platformKeys Use the whale.enterprise.platformKeys API to generate hardware-backed keys and to install certificates for these keys. The certificates will be managed by the platform and can be used for TLS authentication, network access or by other extension through whale.platformKeys. 37 events The whale.events namespace contains common types used by APIs dispatching events to notify you when something interesting happens. 21 extension The whale.extension API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in Message Passing. 20 extensionTypes The whale.extensionTypes API contains type declarations for Chrome extensions. 39 fileBrowserHandler Use the whale.fileBrowserHandler API to extend the Chrome OS file browser. For example, you can use this API to enable users to upload files to your website. 20 fileSystemProvider Use the whale.fileSystemProvider API to create file systems, that can be accessible from the file manager on Chrome OS. 40 fontSettings Use the whale.fontSettings API to manage Chrome's font settings. 22 gcm Use whale.gcm to enable apps and extensions to send and receive messages through the Google Cloud Messaging Service. 35 history Use the whale.history API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see Override Pages. 20 i18n Use the whale.i18n infrastructure to implement internationalization across your whole app or extension. 20 identity Use the whale.identity API to get OAuth2 access tokens. 29 idle Use the whale.idle API to detect when the machine's idle state changes. 20 input.ime Use the whale.input.ime API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window. 21 instanceID Use whale.instanceID to access the Instance ID service. 46 management The whale.management API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that override the built-in New Tab page. 20 networking.config Use the networking.config API to authenticate to captive portals. 43 notifications Use the whale.notifications API to create rich notifications using templates and show these notifications to users in the system tray. 28 omnibox The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox. 20 pageAction Use the whale.pageAction API to put icons in the main Google Chrome toolbar, to the right of the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages. Page actions appear grayed out when inactive. 20 pageCapture Use the whale.pageCapture API to save a tab as MHTML. 20 permissions Use the whale.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary. 20 platformKeys Use the whale.platformKeys API to access client certificates managed by the platform. If the user or policy grants the permission, an extension can use such a certficate in its custom authentication protocol. E.g. this allows usage of platform managed certificates in third party VPNs (see whale.vpnProvider). 45 power Use the whale.power API to override the system's power management features. 27 printerProvider The whale.printerProvider API exposes events used by print manager to query printers controlled by extensions, to query their capabilities and to submit print jobs to these printers. 44 privacy Use the whale.privacy API to control usage of the features in Chrome that can affect a user's privacy. This API relies on the ChromeSetting prototype of the type API for getting and setting Chrome's configuration. 20 proxy Use the whale.proxy API to manage Chrome's proxy settings. This API relies on the ChromeSetting prototype of the type API for getting and setting the proxy configuration. 20 runtime Use the whale.runtime API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs. 22 sessions Use the whale.sessions API to query and restore tabs and windows from a browsing session. 37 storage Use the whale.storage API to store, retrieve, and track changes to user data. 20 system.cpu Use the system.cpu API to query CPU metadata. 32 system.memory The whale.system.memory API. 32 system.storage Use the whale.system.storage API to query storage device information and be notified when a removable storage device is attached and detached. 30 tabCapture Use the whale.tabCapture API to interact with tab media streams. 31 tabs Use the whale.tabs API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser. 20 topSites Use the whale.topSites API to access the top sites that are displayed on the new tab page. 20 tts Use the whale.tts API to play synthesized text-to-speech (TTS). See also the related ttsEngine API, which allows an extension to implement a speech engine. 20 ttsEngine Use the whale.ttsEngine API to implement a text-to-speech(TTS) engine using an extension. If your extension registers using this API, it will receive events containing an utterance to be spoken and other parameters when any extension or Chrome App uses the tts API to generate speech. Your extension can then use any available web technology to synthesize and output the speech, and send events back to the calling function to report the status. 20 types The whale.types API contains type declarations for Chrome. 20 vpnProvider Use the whale.vpnProvider API to implement a VPN client. 43 wallpaper Use the whale.wallpaper API to change the ChromeOS wallpaper. 31 webNavigation Use the whale.webNavigation API to receive notifications about the status of navigation requests in-flight. 20 webRequest Use the whale.webRequest API to observe and analyze traffic and to intercept, block, or modify requests in-flight. 20 webstore Use the whale.webstore API to initiate app and extension installations \"inline\" from your site. 20 windows Use the whale.windows API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser. 20 Beta APIs These APIs are only available in the Chrome Beta and Dev channels: Name Description declarativeWebRequest Note: this API is currently on hold, without concrete plans to move to stable. Use the whale.declarativeWebRequest API to intercept, block, or modify requests in-flight. It is significantly faster than the whale.webRequest API because you can register rules that are evaluated in the browser rather than the JavaScript engine with reduces roundtrip latencies and allows higher efficiency. Dev APIs These APIs are only available in the Chrome Dev channel: Name Description automation The whale.automation API allows developers to access the automation (accessibility) tree for the browser. The tree resembles the DOM tree, but only exposes the semantic structure of a page. It can be used to programmatically interact with a page by examining names, roles, and states, listening for events, and performing actions on nodes. processes Use the whale.processes API to interact with the browser's processes. signedInDevices Use the whale.signedInDevices API to get a list of devices signed into chrome with the same account as the current profile. Experimental APIs Chrome also has experimental APIs, some of which will become supported APIs in future releases of Chrome. API conventions Unless the doc says otherwise, methods in the whale. APIs are *asynchronous: they return immediately, without waiting for the operation to finish. If you need to know the outcome of an operation, then you pass a callback function into the method. For more information, watch this video: Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-system-cpu.html":{"url":"extensions-system-cpu.html","title":"system-cpu","keywords":"","body":"whale.system.cpu Description: Use the system.cpu API to query CPU metadata. Availability: Since Chrome 32. Permissions: \"system.cpu\" Summary Methods getInfo − whale.system.cpu.getInfo(function callback) Methods getInfo `whale.system.cpu.getInfo(function callback)` Queries basic CPU information of the system. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | integer | numOfProcessors | |---|---| The number of logical processors. | | string | archName | The architecture name of the processors. | | string | modelName | The model name of the processors. | | array of string | features | A set of feature codes indicating some of the processor's capabilities. The currently supported codes are \"mmx\", \"sse\", \"sse2\", \"sse3\", \"ssse3\", \"sse4_1\", \"sse4_2\", and \"avx\". | | array of object | processors | Information about each logical processor. #### Properties of each object | object | usage | |---|---| Cumulative usage info for this logical processor. | double | user | |---|---| The cumulative time used by userspace programs on this processor. | | double | kernel | The cumulative time used by kernel programs on this processor. | | double | idle | The cumulative time spent idle by this processor. | | double | total | The total cumulative time for this processor. This value is equal to user + kernel + idle. | | | | array of double | temperatures | List of CPU temperature readings from each thermal zone of the CPU. Temperatures are in degrees Celsius. Currently supported on Chrome OS only. | | | "},"extensions-system-memory.html":{"url":"extensions-system-memory.html","title":"system-memory","keywords":"","body":"whale.system.memory Description: The whale.system.memory API. Availability: Since Chrome 32. Permissions: \"system.memory\" ## Summary | Methods | |---| | [getInfo](#method-getInfo) − `whale.system.memory.getInfo(function callback)` | ## Methods ### getInfo `whale.system.memory.getInfo(function callback)` Get physical memory information. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | double | capacity | |---|---| The total amount of physical memory capacity, in bytes. | | double | availableCapacity | The amount of available capacity, in bytes. | | | "},"extensions-system-storage.html":{"url":"extensions-system-storage.html","title":"system-storage","keywords":"","body":"whale.system.storage Description: Use the whale.system.storage API to query storage device information and be notified when a removable storage device is attached and detached. Availability: Since Chrome 30. Permissions: \"system.storage\" ## Summary | Types | |---| | [StorageUnitInfo](#type-StorageUnitInfo) | | Methods | | [getInfo](#method-getInfo) − `whale.system.storage.getInfo(function callback)` | | [ejectDevice](#method-ejectDevice) − `whale.system.storage.ejectDevice(string id, function callback)` | | [getAvailableCapacity](#method-getAvailableCapacity) − `whale.system.storage.getAvailableCapacity(string id, function callback)` | | Events | | [onAttached](#event-onAttached) | | [onDetached](#event-onDetached) | ## Types ### StorageUnitInfo | properties | |---| | string | id | The transient ID that uniquely identifies the storage device. This ID will be persistent within the same run of a single application. It will not be a persistent identifier between different runs of an application, or between different applications. | | string | name | The name of the storage unit. | | enum of `\"fixed\"`, `\"removable\"`, or `\"unknown\"` | type | The media type of the storage unit. fixed The storage has fixed media, e.g. hard disk or SSD. removable The storage is removable, e.g. USB flash drive. unknown The storage type is unknown. | | double | capacity | The total amount of the storage space, in bytes. | ## Methods ### getInfo `whale.system.storage.getInfo(function callback)` Get the storage information from the system. The argument passed to the callback is an array of StorageUnitInfo objects. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) info) {...};` | array of [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) | info | | |---|---|---| | ### ejectDevice `whale.system.storage.ejectDevice(string id, function callback)` Ejects a removable storage device. | Parameters | |---| | string | id | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(enum of `\"success\"`, `\"in_use\"`, `\"no_such_device\"`, or `\"failure\"` result) {...};` | enum of `\"success\"`, `\"in_use\"`, `\"no_such_device\"`, or `\"failure\"` | result | |---|---| success The ejection command is successful -- the application can prompt the user to remove the device. in_use The device is in use by another application. The ejection did not succeed; the user should not remove the device until the other application is done with the device. no_such_device There is no such device known. failure The ejection command failed. | | ### getAvailableCapacity `whale.system.storage.getAvailableCapacity(string id, function callback)` **Dev** channel only. [Learn more](api_index#dev_apis). Get the available capacity of a specified |id| storage device. The |id| is the transient device ID from StorageUnitInfo. | Parameters | |---| | string | id | Since Chrome 32. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object info) {...};` | object | info | |---|---| | string | id | |---|---| A copied |id| of getAvailableCapacity function parameter |id|. | | double | availableCapacity | The available capacity of the storage device, in bytes. | | | ## Events ### onAttached Fired when a new removable storage is attached to the system. #### addListener `whale.system.storage.onAttached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) info) {...};` | [StorageUnitInfo](/extensions/system.storage#type-StorageUnitInfo) | info | | |---|---|---| | ### onDetached Fired when a removable storage is detached from the system. #### addListener `whale.system.storage.onDetached.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id) {...};` | string | id | | |---|---|---| | "},"extensions-management.html":{"url":"extensions-management.html","title":"management","keywords":"","body":"whale.management Description: The whale.management API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that override the built-in New Tab page. Availability: Since Chrome 20. Permissions: \"management\" ## Manifest You must declare the \"management\" permission in the [extension manifest](manifest) to use the management API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"management\" ]**, ... } [management.getPermissionWarningsByManifest](/extensions/management#method-getPermissionWarningsByManifest), [management.uninstallSelf](/extensions/management#method-uninstallSelf), and [management.getSelf](/extensions/management#method-getSelf) do not require the management permission. ## Summary | Types | |---| | [IconInfo](#type-IconInfo) | | [LaunchType](#type-LaunchType) | | [ExtensionDisabledReason](#type-ExtensionDisabledReason) | | [ExtensionType](#type-ExtensionType) | | [ExtensionInstallType](#type-ExtensionInstallType) | | [ExtensionInfo](#type-ExtensionInfo) | | Methods | | [getAll](#method-getAll) − `whale.management.getAll(function callback)` | | [get](#method-get) − `whale.management.get(string id, function callback)` | | [getSelf](#method-getSelf) − `whale.management.getSelf(function callback)` | | [getPermissionWarningsById](#method-getPermissionWarningsById) − `whale.management.getPermissionWarningsById(string id, function callback)` | | [getPermissionWarningsByManifest](#method-getPermissionWarningsByManifest) − `whale.management.getPermissionWarningsByManifest(string manifestStr, function callback)` | | [setEnabled](#method-setEnabled) − `whale.management.setEnabled(string id, boolean enabled, function callback)` | | [uninstall](#method-uninstall) − `whale.management.uninstall(string id, object options, function callback)` | | [uninstallSelf](#method-uninstallSelf) − `whale.management.uninstallSelf(object options, function callback)` | | [launchApp](#method-launchApp) − `whale.management.launchApp(string id, function callback)` | | [createAppShortcut](#method-createAppShortcut) − `whale.management.createAppShortcut(string id, function callback)` | | [setLaunchType](#method-setLaunchType) − `whale.management.setLaunchType(string id, LaunchType launchType, function callback)` | | [generateAppForLink](#method-generateAppForLink) − `whale.management.generateAppForLink(string url, string title, function callback)` | | Events | | [onInstalled](#event-onInstalled) | | [onUninstalled](#event-onUninstalled) | | [onEnabled](#event-onEnabled) | | [onDisabled](#event-onDisabled) | ## Types ### IconInfo Information about an icon belonging to an extension, app, or theme. | properties | |---| | integer | size | A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16. | | string | url | The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append `?grayscale=true` to the URL. | ### LaunchType These are all possible app launch types. | Enum | |---| | `\"OPEN_AS_REGULAR_TAB\"`, `\"OPEN_AS_PINNED_TAB\"`, `\"OPEN_AS_WINDOW\"`, or `\"OPEN_FULL_SCREEN\"` | ### ExtensionDisabledReason A reason the item is disabled. | Enum | |---| | `\"unknown\"`, or `\"permissions_increase\"` | ### ExtensionType The type of this extension, app, or theme. | Enum | |---| | `\"extension\"`, `\"hosted_app\"`, `\"packaged_app\"`, `\"legacy_packaged_app\"`, or `\"theme\"` | ### ExtensionInstallType How the extension was installed. One of admin: The extension was installed because of an administrative policy, development: The extension was loaded unpacked in developer mode, normal: The extension was installed normally via a .crx file, sideload: The extension was installed by other software on the machine, other: The extension was installed by other means. | Enum | |---| | `\"admin\"`, `\"development\"`, `\"normal\"`, `\"sideload\"`, or `\"other\"` | ### ExtensionInfo Information about an installed extension, app, or theme. | properties | |---| | string | id | The extension's unique identifier. | | string | name | The name of this extension, app, or theme. | | string | shortName | Since Chrome 31. A short version of the name of this extension, app, or theme. | | string | description | The description of this extension, app, or theme. | | string | version | The [version](manifest/version) of this extension, app, or theme. | | string | (optional) versionName | Since Chrome 50. The [version name](manifest/version#version_name) of this extension, app, or theme if the manifest specified one. | | boolean | mayDisable | Whether this extension can be disabled or uninstalled by the user. | | boolean | (optional) mayEnable | Since Chrome 62. Whether this extension can be enabled by the user. This is only returned for extensions which are not enabled. | | boolean | enabled | Whether it is currently enabled or disabled. | | [ExtensionDisabledReason](/extensions/management#type-ExtensionDisabledReason) | (optional) disabledReason | A reason the item is disabled. | | boolean | isApp | **Deprecated** since Chrome 33. Please use [management.ExtensionInfo.type](/extensions/management#property-ExtensionInfo-type). True if this is an app. | | [ExtensionType](/extensions/management#type-ExtensionType) | type | Since Chrome 23. The type of this extension, app, or theme. | | string | (optional) appLaunchUrl | The launch url (only present for apps). | | string | (optional) homepageUrl | The URL of the homepage of this extension, app, or theme. | | string | (optional) updateUrl | The update URL of this extension, app, or theme. | | boolean | offlineEnabled | Whether the extension, app, or theme declares that it supports offline. | | string | optionsUrl | The url for the item's options page, if it has one. | | array of [IconInfo](/extensions/management#type-IconInfo) | (optional) icons | A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the [manifest documentation on icons](manifest/icons) for more details. | | array of string | permissions | Returns a list of API based permissions. | | array of string | hostPermissions | Returns a list of host based permissions. | | [ExtensionInstallType](/extensions/management#type-ExtensionInstallType) | installType | Since Chrome 22. How the extension was installed. | | [LaunchType](/extensions/management#type-LaunchType) | (optional) launchType | Since Chrome 37. The app launch type (only present for apps). | | array of [LaunchType](/extensions/management#type-LaunchType) | (optional) availableLaunchTypes | Since Chrome 37. The currently available launch types (only present for apps). | ## Methods ### getAll `whale.management.getAll(function callback)` Returns a list of information about installed extensions and apps. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | array of [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### get `whale.management.get(string id, function callback)` Returns information about the installed extension, app, or theme that has the given ID. | Parameters | |---| | string | id | The ID from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### getSelf `whale.management.getSelf(function callback)` Since Chrome 39. Returns information about the calling extension, app, or theme. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ### getPermissionWarningsById `whale.management.getPermissionWarningsById(string id, function callback)` Returns a list of [permission warnings](permission_warnings) for the given extension id. | Parameters | |---| | string | id | The ID of an already installed extension. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of string permissionWarnings) {...};` | array of string | permissionWarnings | | |---|---|---| | ### getPermissionWarningsByManifest `whale.management.getPermissionWarningsByManifest(string manifestStr, function callback)` Returns a list of [permission warnings](permission_warnings) for the given extension manifest string. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | string | manifestStr | Extension manifest JSON string. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(array of string permissionWarnings) {...};` | array of string | permissionWarnings | | |---|---|---| | ### setEnabled `whale.management.setEnabled(string id, boolean enabled, function callback)` Enables or disables an app or extension. In most cases this function must be called in the context of a user gesture (e.g. an onclick handler for a button), and may present the user with a native confirmation UI as a way of preventing abuse. | Parameters | |---| | string | id | This should be the id from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | boolean | enabled | Whether this item should be enabled or disabled. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### uninstall `whale.management.uninstall(string id, object options, function callback)` Uninstalls a currently installed app or extension. | Parameters | |---| | string | id | This should be the id from an item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | object | (optional) options | Since Chrome 21. | boolean | (optional) showConfirmDialog | |---|---| Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false for self uninstalls. If an extension uninstalls another extension, this parameter is ignored and the dialog is always shown. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### uninstallSelf `whale.management.uninstallSelf(object options, function callback)` Since Chrome 26. Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest. | Parameters | |---| | object | (optional) options | | boolean | (optional) showConfirmDialog | |---|---| Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### launchApp `whale.management.launchApp(string id, function callback)` Launches an application. | Parameters | |---| | string | id | The extension id of the application. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### createAppShortcut `whale.management.createAppShortcut(string id, function callback)` Since Chrome 37. Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be created. | Parameters | |---| | string | id | Since Chrome 36. This should be the id from an app item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setLaunchType `whale.management.setLaunchType(string id, [LaunchType](/extensions/management#type-LaunchType) launchType, function callback)` Since Chrome 37. Set the launch type of an app. | Parameters | |---| | string | id | This should be the id from an app item of [management.ExtensionInfo](/extensions/management#type-ExtensionInfo). | | [LaunchType](/extensions/management#type-LaunchType) | launchType | The target launch type. Always check and make sure this launch type is in [ExtensionInfo.availableLaunchTypes](/extensions/management#property-ExtensionInfo-availableLaunchTypes), because the available launch types vary on different platforms and configurations. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### generateAppForLink `whale.management.generateAppForLink(string url, string title, function callback)` Since Chrome 37. Generate an app for a URL. Returns the generated bookmark app. | Parameters | |---| | string | url | The URL of a web page. The scheme of the URL can only be \"http\" or \"https\". | | string | title | The title of the generated app. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) result) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | result | | |---|---|---| | ## Events ### onInstalled Fired when an app or extension has been installed. #### addListener `whale.management.onInstalled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | ### onUninstalled Fired when an app or extension has been uninstalled. #### addListener `whale.management.onUninstalled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id) {...};` | string | id | |---|---| The id of the extension, app, or theme that was uninstalled. | | ### onEnabled Fired when an app or extension has been enabled. #### addListener `whale.management.onEnabled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | ### onDisabled Fired when an app or extension has been disabled. #### addListener `whale.management.onDisabled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ExtensionInfo](/extensions/management#type-ExtensionInfo) info) {...};` | [ExtensionInfo](/extensions/management#type-ExtensionInfo) | info | | |---|---|---| | "},"extensions-alarms.html":{"url":"extensions-alarms.html","title":"alarms","keywords":"","body":"whale.alarms Description: Use the whale.alarms API to schedule code to run periodically or at a specified time in the future. Availability: Since Chrome 22. Permissions: \"alarms\" Learn More: Event Pages ## Summary | Types | |---| | [Alarm](#type-Alarm) | | Methods | | [create](#method-create) − `whale.alarms.create(string name, object alarmInfo)` | | [get](#method-get) − `whale.alarms.get(string name, function callback)` | | [getAll](#method-getAll) − `whale.alarms.getAll(function callback)` | | [clear](#method-clear) − `whale.alarms.clear(string name, function callback)` | | [clearAll](#method-clearAll) − `whale.alarms.clearAll(function callback)` | | Events | | [onAlarm](#event-onAlarm) | ## Types ### Alarm | properties | |---| | string | name | Name of this alarm. | | double | scheduledTime | Time at which this alarm was scheduled to fire, in milliseconds past the epoch (e.g. `Date.now() + n`). For performance reasons, the alarm may have been delayed an arbitrary amount beyond this. | | double | (optional) periodInMinutes | If not null, the alarm is a repeating alarm and will fire again in periodInMinutes minutes. | ## Methods ### create `whale.alarms.create(string name, object alarmInfo)` Creates an alarm. Near the time(s) specified by alarmInfo, the `onAlarm` event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm. In order to reduce the load on the user's machine, Chrome limits alarms to at most once every 1 minute but may delay them an arbitrary amount more. That is, setting `delayInMinutes` or `periodInMinutes` to less than `1` will not be honored and will cause a warning. `when` can be set to less than 1 minute after \"now\" without warning but won't actually cause the alarm to fire for at least 1 minute. To help you debug your app or extension, when you've loaded it unpacked, there's no limit to how often the alarm can fire. | Parameters | |---| | string | (optional) name | Optional name to identify this alarm. Defaults to the empty string. | | object | alarmInfo | Describes when the alarm should fire. The initial time must be specified by either when or delayInMinutes (but not both). If periodInMinutes is set, the alarm will repeat every periodInMinutes minutes after the initial event. If neither when or delayInMinutes is set for a repeating alarm, periodInMinutes is used as the default for delayInMinutes. | double | (optional) when | |---|---| Time at which the alarm should fire, in milliseconds past the epoch (e.g. `Date.now() + n`). | | double | (optional) delayInMinutes | Length of time in minutes after which the `onAlarm` event should fire. | | double | (optional) periodInMinutes | If set, the onAlarm event should fire every periodInMinutes minutes after the initial event specified by when or delayInMinutes. If not set, the alarm will only fire once. | | ### get `whale.alarms.get(string name, function callback)` Retrieves details about the specified alarm. | Parameters | |---| | string | (optional) name | The name of the alarm to get. Defaults to the empty string. | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Alarm](/extensions/alarms#type-Alarm) alarm) {...};` | [Alarm](/extensions/alarms#type-Alarm) | (optional) alarm | | |---|---|---| | ### getAll `whale.alarms.getAll(function callback)` Gets an array of all the alarms. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Alarm](/extensions/alarms#type-Alarm) alarms) {...};` | array of [Alarm](/extensions/alarms#type-Alarm) | alarms | | |---|---|---| | ### clear `whale.alarms.clear(string name, function callback)` Clears the alarm with the given name. | Parameters | |---| | string | (optional) name | The name of the alarm to clear. Defaults to the empty string. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ### clearAll `whale.alarms.clearAll(function callback)` Clears all alarms. | Parameters | |---| | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ## Events ### onAlarm Fired when an alarm has elapsed. Useful for event pages. #### addListener `whale.alarms.onAlarm.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Alarm](/extensions/alarms#type-Alarm) alarm) {...};` | [Alarm](/extensions/alarms#type-Alarm) | alarm | |---|---| The alarm that has elapsed. | | "},"extensions-messaging.html":{"url":"extensions-messaging.html","title":"messaging","keywords":"","body":"Message Passing Since content scripts run in the context of a web page and not the extension, they often need some way of communicating with the rest of the extension. For example, an RSS reader extension might use content scripts to detect the presence of an RSS feed on a page, then notify the background page in order to display a page action icon for that page. Communication between extensions and their content scripts works by using message passing. Either side can listen for messages sent from the other end, and respond on the same channel. A message can contain any valid JSON object (null, boolean, number, string, array, or object). There is a simple API for one-time requests and a more complex API that allows you to have long-lived connections for exchanging multiple messages with a shared context. It is also possible to send a message to another extension if you know its ID, which is covered in the cross-extension messages section. Simple one-time requests If you only need to send a single message to another part of your extension (and optionally get a response back), you should use the simplified runtime.sendMessage or tabs.sendMessage . This lets you send a one-time JSON-serializable message from a content script to extension , or vice versa, respectively . An optional callback parameter allows you handle the response from the other side, if there is one. Sending a request from a content script looks like this: whale.runtime.sendMessage({greeting: \"hello\"}, function(response) { console.log(response.farewell); }); Sending a request from the extension to a content script looks very similar, except that you need to specify which tab to send it to. This example demonstrates sending a message to the content script in the selected tab. whale.tabs.query({active: true, currentWindow: true}, function(tabs) { whale.tabs.sendMessage(tabs[0].id, {greeting: \"hello\"}, function(response) { console.log(response.farewell); }); }); On the receiving end, you need to set up an runtime.onMessage event listener to handle the message. This looks the same from a content script or extension page. whale.runtime.onMessage.addListener( function(request, sender, sendResponse) { console.log(sender.tab ? \"from a content script:\" + sender.tab.url : \"from the extension\"); if (request.greeting == \"hello\") sendResponse({farewell: \"goodbye\"}); }); In the above example, sendResponse was called synchronously. If you want to asynchronously use sendResponse, add return true; to the onMessage event handler. Note: If multiple pages are listening for onMessage events, only the first to call sendResponse() for a particular event will succeed in sending the response. All other responses to that event will be ignored. Note: The sendResponse callback is only valid if used synchronously, or if the event handler returns true to indicate that it will respond asynchronously. The sendMessage function's callback will be invoked automatically if no handlers return true or if the sendResponse callback is garbage-collected. Long-lived connections Sometimes it's useful to have a conversation that lasts longer than a single request and response. In this case, you can open a long-lived channel from your content script to an extension page , or vice versa, using runtime.connect or tabs.connect, respectively . The channel can optionally have a name, allowing you to distinguish between different types of connections. One use case might be an automatic form fill extension. The content script could open a channel to the extension page for a particular login, and send a message to the extension for each input element on the page to request the form data to fill in. The shared connection allows the extension to keep shared state linking the several messages coming from the content script. When establishing a connection, each end is given a runtime.Port object which is used for sending and receiving messages through that connection. Here is how you open a channel from a content script, and send and listen for messages: var port = whale.runtime.connect({name: \"knockknock\"}); port.postMessage({joke: \"Knock knock\"}); port.onMessage.addListener(function(msg) { if (msg.question == \"Who's there?\") port.postMessage({answer: \"Madame\"}); else if (msg.question == \"Madame who?\") port.postMessage({answer: \"Madame... Bovary\"}); }); Sending a request from the extension to a content script looks very similar, except that you need to specify which tab to connect to. Simply replace the call to connect in the above example with tabs.connect. In order to handle incoming connections, you need to set up a runtime.onConnect event listener. This looks the same from a content script or an extension page. When another part of your extension calls \"connect()\", this event is fired, along with the runtime.Port object you can use to send and receive messages through the connection. Here's what it looks like to respond to incoming connections: whale.runtime.onConnect.addListener(function(port) { console.assert(port.name == \"knockknock\"); port.onMessage.addListener(function(msg) { if (msg.joke == \"Knock knock\") port.postMessage({question: \"Who's there?\"}); else if (msg.answer == \"Madame\") port.postMessage({question: \"Madame who?\"}); else if (msg.answer == \"Madame... Bovary\") port.postMessage({question: \"I don't get it.\"}); }); }); Port lifetime Ports are designed as a two-way communication method between different parts of the extension, where a (top-level) frame is viewed as the smallest part. Upon calling tabs.connect, runtime.connect or runtime.connectNative, a Port is created. This port can immediately be used for sending messages to the other end via postMessage. If there are multiple frames in a tab, calling tabs.connect results in multiple invocations of the runtime.onConnect event (once for each frame in the tab). Similarly, if runtime.connect is used, then the onConnect event may be fired multiple times (once for every frame in the extension process). You may want to find out when a connection is closed, for example if you are maintaining separate state for each open port. For this you can listen to the runtime.Port.onDisconnect event. This event is fired when there are no valid ports at the other side of the channel. This happens in the following situations: There are no listeners for runtime.onConnect at the other end. The tab containing the port is unloaded (e.g. if the tab is navigated). The frame from where connect was called has unloaded. All frames that received the port (via runtime.onConnect) have unloaded. runtime.Port.disconnect is called by the other end. Note that if a connect call results in multiple ports at the receiver's end, and disconnect() is called on any of these ports, then the onDisconnect event is only fired at the port of the sender, and not at the other ports. Cross-extension messaging In addition to sending messages between different components in your extension, you can use the messaging API to communicate with other extensions. This lets you expose a public API that other extensions can take advantage of. Listening for incoming requests and connections is similar to the internal case, except you use the runtime.onMessageExternal or runtime.onConnectExternal methods. Here's an example of each: // For simple requests: whale.runtime.onMessageExternal.addListener( function(request, sender, sendResponse) { if (sender.id == blacklistedExtension) return; // don't allow this extension access else if (request.getTargetData) sendResponse({targetData: targetData}); else if (request.activateLasers) { var success = activateLasers(); sendResponse({activateLasers: success}); } }); // For long-lived connections: whale.runtime.onConnectExternal.addListener(function(port) { port.onMessage.addListener(function(msg) { // See other examples for sample onMessage handlers. }); }); Likewise, sending a message to another extension is similar to sending one within your extension. The only difference is that you must pass the ID of the extension you want to communicate with. For example: // The ID of the extension we want to talk to. var laserExtensionId = \"abcdefghijklmnoabcdefhijklmnoabc\"; // Make a simple request: whale.runtime.sendMessage(laserExtensionId, {getTargetData: true}, function(response) { if (targetInRange(response.targetData)) whale.runtime.sendMessage(laserExtensionId, {activateLasers: true}); }); // Start a long-running conversation: var port = whale.runtime.connect(laserExtensionId); port.postMessage(...); Sending messages from web pages Similar to cross-extension messaging, your app or extension can receive and respond to messages from regular web pages. To use this feature, you must first specify in your manifest.json which web sites you want to communicate with. For example: \"externally_connectable\": { \"matches\": [\"*://*.example.com/*\"] } This will expose the messaging API to any page which matches the URL patterns you specify. The URL pattern must contain at least a second-level domain - that is, hostname patterns like \"\", \".com\", \".co.uk\", and \".appspot.com\" are prohibited. From the web page, use the runtime.sendMessage or runtime.connect APIs to send a message to a specific app or extension. For example: // The ID of the extension we want to talk to. var editorExtensionId = \"abcdefghijklmnoabcdefhijklmnoabc\"; // Make a simple request: whale.runtime.sendMessage(editorExtensionId, {openUrlInEditor: url}, function(response) { if (!response.success) handleError(url); }); From your app or extension, you may listen to messages from web pages via the runtime.onMessageExternal or runtime.onConnectExternal APIs, similar to cross-extension messaging. Only the web page can initiate a connection. Here is an example: whale.runtime.onMessageExternal.addListener( function(request, sender, sendResponse) { if (sender.url == blacklistedWebsite) return; // don't allow this web page access if (request.openUrlInEditor) openUrl(request.openUrlInEditor); }); Native messaging Extensions and apps can exchange messages with native applications that are registered as a native messaging host. To learn more about this feature, see Native messaging. Security considerations When receiving a message from a content script or another extension, your background page should be careful not to fall victim to cross-site scripting. Specifically, avoid using dangerous APIs such as the below: whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // WARNING! Might be evaluating an evil script! var resp = eval(\"(\" + response.farewell + \")\"); }); whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // WARNING! Might be injecting a malicious script! document.getElementById(\"resp\").innerHTML = response.farewell; }); Instead, prefer safer APIs that do not run scripts: whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // JSON.parse does not evaluate the attacker's scripts. var resp = JSON.parse(response.farewell); }); whale.tabs.sendMessage(tab.id, {greeting: \"hello\"}, function(response) { // innerText does not let the attacker inject HTML elements. document.getElementById(\"resp\").innerText = response.farewell; }); Examples You can find simple examples of communication via messages in the examples/api/messaging directory. The native messaging sample demonstrates how a Chrome app can communicate with a native app. For more examples and for help in viewing the source code, see Samples. Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-notifications.html":{"url":"extensions-notifications.html","title":"notifications","keywords":"","body":"whale.notifications Description: Use the whale.notifications API to create rich notifications using templates and show these notifications to users in the system tray. Availability: Since Chrome 28. Permissions: \"notifications\" Learn More: Rich Notifications Keep Users Informed Chrome Apps Office Hours: Rich Notifications | ## Summary | Types | |---| | [TemplateType](#type-TemplateType) | | [PermissionLevel](#type-PermissionLevel) | | [NotificationOptions](#type-NotificationOptions) | | Methods | | [create](#method-create) − `whale.notifications.create(string notificationId, NotificationOptions options, function callback)` | | [update](#method-update) − `whale.notifications.update(string notificationId, NotificationOptions options, function callback)` | | [clear](#method-clear) − `whale.notifications.clear(string notificationId, function callback)` | | [getAll](#method-getAll) − `whale.notifications.getAll(function callback)` | | [getPermissionLevel](#method-getPermissionLevel) − `whale.notifications.getPermissionLevel(function callback)` | | Events | | [onClosed](#event-onClosed) | | [onClicked](#event-onClicked) | | [onButtonClicked](#event-onButtonClicked) | | [onPermissionLevelChanged](#event-onPermissionLevelChanged) | | [onShowSettings](#event-onShowSettings) | ## Types ### TemplateType | Enum | |---| | `\"basic\"` icon, title, message, expandedMessage, up to two buttons `\"image\"` icon, title, message, expandedMessage, image, up to two buttons `\"list\"` icon, title, message, items, up to two buttons. Users on Mac OS X only see the first item. `\"progress\"` icon, title, message, progress, up to two buttons | ### PermissionLevel | Enum | |---| | `\"granted\"` User has elected to show notifications from the app or extension. This is the default at install time. `\"denied\"` User has elected not to show notifications from the app or extension. | ### NotificationOptions | properties | |---| | [TemplateType](/extensions/notifications#type-TemplateType) | (optional) type | Which type of notification to display. _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) iconUrl | A URL to the sender's avatar, app icon, or a thumbnail for image notifications. URLs can be a data URL, a blob URL, or a URL relative to a resource within this extension's .crx file _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) appIconMaskUrl | **Deprecated** since Chrome 59. The app icon mask is not visible for Mac OS X users. A URL to the app icon mask. URLs have the same restrictions as [iconUrl](/extensions/notifications#property-NotificationOptions-iconUrl). The app icon mask should be in alpha channel, as only the alpha channel of the image will be considered. | | string | (optional) title | Title of the notification (e.g. sender name for email). _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) message | Main notification content. _Required for [notifications.create](/extensions/notifications#method-create)_ method. | | string | (optional) contextMessage | Since Chrome 31. Alternate notification content with a lower-weight font. | | integer | (optional) priority | Priority ranges from -2 to 2\\. -2 is lowest priority. 2 is highest. Zero is default. On platforms that don't support a notification center (Windows, Linux & Mac), -2 and -1 result in an error as notifications with those priorities will not be shown at all. | | double | (optional) eventTime | A timestamp associated with the notification, in milliseconds past the epoch (e.g. `Date.now() + n`). | | array of object | (optional) buttons | Text and icons for up to two notification action buttons. #### Properties of each object | string | title | | |---|---|---| | string | (optional) iconUrl | | | | string | (optional) imageUrl | **Deprecated** since Chrome 59. The image is not visible for Mac OS X users. A URL to the image thumbnail for image-type notifications. URLs have the same restrictions as [iconUrl](/extensions/notifications#property-NotificationOptions-iconUrl). | | array of object | (optional) items | Items for multi-item notifications. Users on Mac OS X only see the first item. #### Properties of each object | string | title | |---|---| Title of one item of a list notification. | | string | message | Additional details about this item. | | | integer | (optional) progress | Since Chrome 30. Current progress ranges from 0 to 100. | | boolean | (optional) isClickable | Since Chrome 32. Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification. | | boolean | (optional) requireInteraction | Since Chrome 50. Indicates that the notification should remain visible on screen until the user activates or dismisses the notification. This defaults to false. | ## Methods ### create `whale.notifications.create(string notificationId, [NotificationOptions](/extensions/notifications#type-NotificationOptions) options, function callback)` Creates and displays a notification. | Parameters | |---| | string | (optional) notificationId | Identifier of the notification. If not set or empty, an ID will automatically be generated. If it matches an existing notification, this method first clears that notification before proceeding with the create operation. The identifier may not be longer than 500 characters. The `notificationId` parameter is required before Chrome 42. | | [NotificationOptions](/extensions/notifications#type-NotificationOptions) | options | Contents of the notification. | | function | (optional) callback | Returns the notification id (either supplied or generated) that represents the created notification. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(string notificationId) {...};` | string | notificationId | | |---|---|---| | ### update `whale.notifications.update(string notificationId, [NotificationOptions](/extensions/notifications#type-NotificationOptions) options, function callback)` Updates an existing notification. | Parameters | |---| | string | notificationId | The id of the notification to be updated. This is returned by [notifications.create](/extensions/notifications#method-create) method. | | [NotificationOptions](/extensions/notifications#type-NotificationOptions) | options | Contents of the notification to update to. | | function | (optional) callback | Called to indicate whether a matching notification existed. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasUpdated) {...};` | boolean | wasUpdated | | |---|---|---| | ### clear `whale.notifications.clear(string notificationId, function callback)` Clears the specified notification. | Parameters | |---| | string | notificationId | The id of the notification to be cleared. This is returned by [notifications.create](/extensions/notifications#method-create) method. | | function | (optional) callback | Called to indicate whether a matching notification existed. The callback is required before Chrome 42. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean wasCleared) {...};` | boolean | wasCleared | | |---|---|---| | ### getAll `whale.notifications.getAll(function callback)` Since Chrome 29. Retrieves all the notifications. | Parameters | |---| | function | callback | Returns the set of notification_ids currently in the system. The _callback_ parameter should be a function that looks like this: `function(object notifications) {...};` | object | notifications | | |---|---|---| | ### getPermissionLevel `whale.notifications.getPermissionLevel(function callback)` Since Chrome 32. Retrieves whether the user has enabled notifications from this app or extension. | Parameters | |---| | function | callback | Returns the current permission level. The _callback_ parameter should be a function that looks like this: `function( [PermissionLevel](/extensions/notifications#type-PermissionLevel) level) {...};` | [PermissionLevel](/extensions/notifications#type-PermissionLevel) | level | | |---|---|---| | ## Events ### onClosed The notification closed, either by the system or by user action. #### addListener `whale.notifications.onClosed.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId, boolean byUser) {...};` | string | notificationId | | |---|---|---| | boolean | byUser | | | ### onClicked The user clicked in a non-button area of the notification. #### addListener `whale.notifications.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId) {...};` | string | notificationId | | |---|---|---| | ### onButtonClicked The user pressed a button in the notification. #### addListener `whale.notifications.onButtonClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string notificationId, integer buttonIndex) {...};` | string | notificationId | | |---|---|---| | integer | buttonIndex | | | ### onPermissionLevelChanged Since Chrome 32. The user changes the permission level. As of Chrome 47, only ChromeOS has UI that dispatches this event. #### addListener `whale.notifications.onPermissionLevelChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [PermissionLevel](/extensions/notifications#type-PermissionLevel) level) {...};` | [PermissionLevel](/extensions/notifications#type-PermissionLevel) | level | | |---|---|---| | ### onShowSettings Since Chrome 32. The user clicked on a link for the app's notification settings. As of Chrome 47, only ChromeOS has UI that dispatches this event. #### addListener `whale.notifications.onShowSettings.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-automation.html":{"url":"extensions-automation.html","title":"automation","keywords":"","body":"whale.automation Description: The whale.automation API allows developers to access the automation (accessibility) tree for the browser. The tree resembles the DOM tree, but only exposes the semantic structure of a page. It can be used to programmatically interact with a page by examining names, roles, and states, listening for events, and performing actions on nodes. Availability: Dev channel only. Learn more. Manifest: \"automation\": {...} ## Summary | Types | |---| | [EventType](#type-EventType) | | [RoleType](#type-RoleType) | | [StateType](#type-StateType) | | [Restriction](#type-Restriction) | | [Rect](#type-Rect) | | [FindParams](#type-FindParams) | | [SetDocumentSelectionParams](#type-SetDocumentSelectionParams) | | [AutomationEvent](#type-AutomationEvent) | | [TreeChange](#type-TreeChange) | | [AutomationNode](#type-AutomationNode) | | Methods | | [getTree](#method-getTree) − `whale.automation.getTree(integer tabId, function callback)` | | [getDesktop](#method-getDesktop) − `whale.automation.getDesktop(function callback)` | | [getFocus](#method-getFocus) − `whale.automation.getFocus(function callback)` | | [addTreeChangeObserver](#method-addTreeChangeObserver) − `whale.automation.addTreeChangeObserver(enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` filter, function observer)` | | [removeTreeChangeObserver](#method-removeTreeChangeObserver) − `whale.automation.removeTreeChangeObserver(function observer)` | | [setDocumentSelection](#method-setDocumentSelection) − `whale.automation.setDocumentSelection( SetDocumentSelectionParams params)` | ## Types ### EventType Possible events fired on an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"activedescendantchanged\"`, `\"alert\"`, `\"ariaAttributeChanged\"`, `\"autocorrectionOccured\"`, `\"blur\"`, `\"checkedStateChanged\"`, `\"childrenChanged\"`, `\"clicked\"`, `\"documentSelectionChanged\"`, `\"expandedChanged\"`, `\"focus\"`, `\"imageFrameUpdated\"`, `\"hide\"`, `\"hover\"`, `\"invalidStatusChanged\"`, `\"layoutComplete\"`, `\"liveRegionCreated\"`, `\"liveRegionChanged\"`, `\"loadComplete\"`, `\"locationChanged\"`, `\"mediaStartedPlaying\"`, `\"mediaStoppedPlaying\"`, `\"menuEnd\"`, `\"menuListItemSelected\"`, `\"menuListValueChanged\"`, `\"menuPopupEnd\"`, `\"menuPopupStart\"`, `\"menuStart\"`, `\"mouseCanceled\"`, `\"mouseDragged\"`, `\"mouseMoved\"`, `\"mousePressed\"`, `\"mouseReleased\"`, `\"rowCollapsed\"`, `\"rowCountChanged\"`, `\"rowExpanded\"`, `\"scrollPositionChanged\"`, `\"scrolledToAnchor\"`, `\"selectedChildrenChanged\"`, `\"selection\"`, `\"selectionAdd\"`, `\"selectionRemove\"`, `\"show\"`, `\"textChanged\"`, `\"textSelectionChanged\"`, `\"treeChanged\"`, or `\"valueChanged\"` | ### RoleType Describes the purpose of an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"abbr\"`, `\"alertDialog\"`, `\"alert\"`, `\"anchor\"`, `\"annotation\"`, `\"application\"`, `\"article\"`, `\"audio\"`, `\"banner\"`, `\"blockquote\"`, `\"button\"`, `\"buttonDropDown\"`, `\"canvas\"`, `\"caption\"`, `\"caret\"`, `\"cell\"`, `\"checkBox\"`, `\"client\"`, `\"colorWell\"`, `\"columnHeader\"`, `\"column\"`, `\"comboBox\"`, `\"complementary\"`, `\"contentInfo\"`, `\"date\"`, `\"dateTime\"`, `\"definition\"`, `\"descriptionListDetail\"`, `\"descriptionList\"`, `\"descriptionListTerm\"`, `\"desktop\"`, `\"details\"`, `\"dialog\"`, `\"directory\"`, `\"disclosureTriangle\"`, `\"document\"`, `\"embeddedObject\"`, `\"feed\"`, `\"figcaption\"`, `\"figure\"`, `\"footer\"`, `\"form\"`, `\"genericContainer\"`, `\"grid\"`, `\"group\"`, `\"heading\"`, `\"iframe\"`, `\"iframePresentational\"`, `\"ignored\"`, `\"imageMap\"`, `\"image\"`, `\"inlineTextBox\"`, `\"inputTime\"`, `\"labelText\"`, `\"legend\"`, `\"lineBreak\"`, `\"link\"`, `\"listBoxOption\"`, `\"listBox\"`, `\"listItem\"`, `\"listMarker\"`, `\"list\"`, `\"locationBar\"`, `\"log\"`, `\"main\"`, `\"mark\"`, `\"marquee\"`, `\"math\"`, `\"menuBar\"`, `\"menuButton\"`, `\"menuItem\"`, `\"menuItemCheckBox\"`, `\"menuItemRadio\"`, `\"menuListOption\"`, `\"menuListPopup\"`, `\"menu\"`, `\"meter\"`, `\"navigation\"`, `\"note\"`, `\"pane\"`, `\"paragraph\"`, `\"popUpButton\"`, `\"pre\"`, `\"presentational\"`, `\"progressIndicator\"`, `\"radioButton\"`, `\"radioGroup\"`, `\"region\"`, `\"rootWebArea\"`, `\"rowHeader\"`, `\"row\"`, `\"ruby\"`, `\"svgRoot\"`, `\"scrollBar\"`, `\"search\"`, `\"searchBox\"`, `\"slider\"`, `\"sliderThumb\"`, `\"spinButtonPart\"`, `\"spinButton\"`, `\"splitter\"`, `\"staticText\"`, `\"status\"`, `\"switch\"`, `\"tabList\"`, `\"tabPanel\"`, `\"tab\"`, `\"tableHeaderContainer\"`, `\"table\"`, `\"term\"`, `\"textField\"`, `\"time\"`, `\"timer\"`, `\"titleBar\"`, `\"toggleButton\"`, `\"toolbar\"`, `\"treeGrid\"`, `\"treeItem\"`, `\"tree\"`, `\"unknown\"`, `\"tooltip\"`, `\"video\"`, `\"webArea\"`, `\"webView\"`, or `\"window\"` | ### StateType Describes characteristics of an [automation.AutomationNode](/extensions/automation#type-AutomationNode). | Enum | |---| | `\"collapsed\"`, `\"default\"`, `\"editable\"`, `\"expanded\"`, `\"focusable\"`, `\"focused\"`, `\"haspopup\"`, `\"horizontal\"`, `\"hovered\"`, `\"invisible\"`, `\"linked\"`, `\"multiline\"`, `\"multiselectable\"`, `\"offscreen\"`, `\"protected\"`, `\"required\"`, `\"richlyEditable\"`, `\"selectable\"`, `\"selected\"`, `\"vertical\"`, or `\"visited\"` | ### Restriction The input restriction for a object -- even non-controls can be disabled. | Enum | |---| | `\"disabled\"`, or `\"readOnly\"` | ### Rect | properties | |---| | integer | left | | | integer | top | | | integer | width | | | integer | height | | ### FindParams | properties | |---| | [RoleType](/extensions/automation#type-RoleType) | (optional) role | | | object | (optional) state | A map of [automation.StateType](/extensions/automation#type-StateType) to boolean, indicating for each state whether it should be set or not. For example: `{ StateType.disabled: false }` would only match if `StateType.disabled` was _not_ present in the node's `state` object. | | object | (optional) attributes | A map of attribute name to expected value, for example `{ name: 'Root directory', checkbox_mixed: true }`. String attribute values may be specified as a regex, for example `{ name: /stralia$/` }. Unless specifying a regex, the expected value must be an exact match in type and value for the actual value. Thus, the type of expected value must be one of: * string * integer * float * boolean | ### SetDocumentSelectionParams | properties | |---| | AutomationNode | anchorObject | The node where the selection begins. | | integer | anchorOffset | The offset in the anchor node where the selection begins. | | AutomationNode | focusObject | The node where the selection ends. | | integer | focusOffset | The offset within the focus node where the selection ends. | ### AutomationEvent | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | target | The [automation.AutomationNode](/extensions/automation#type-AutomationNode) to which the event was targeted. | | [EventType](/extensions/automation#type-EventType) | type | The type of the event. | | string | eventFrom | The source of this event. | | integer | mouseX | | | integer | mouseY | | | function | stopPropagation | Stops this event from further processing except for any remaining listeners on [AutomationEvent.target](/extensions/automation#property-AutomationEvent-target). | ### TreeChange | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | target | The [automation.AutomationNode](/extensions/automation#type-AutomationNode) that changed. | | enum of `\"nodeCreated\"`, `\"subtreeCreated\"`, `\"nodeChanged\"`, `\"textChanged\"`, or `\"nodeRemoved\"` | type | The type of change. nodeCreated * This node was added to the tree and its parent is new as well, so it's just one node in a new subtree that was added. subtreeCreated * This node was added to the tree but its parent was already in the tree, so it's possibly the root of a new subtree - it does not mean that it necessarily has children. nodeChanged * This node changed. textChanged * This node's text (name) changed. nodeRemoved * This node was removed. | ### AutomationNode | properties | |---| | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) root | The root node of the tree containing this AutomationNode. | | boolean | isRootNode | Whether this AutomationNode is a root node. | | [RoleType](/extensions/automation#type-RoleType) | (optional) role | The role of this node. | | object | (optional) state | The [automation.StateType](/extensions/automation#type-StateType)s describing this node. | | [Rect](/extensions/automation#type-Rect) | (optional) location | The rendered location (as a bounding box) of this node in global screen coordinates. | | function | boundsForRange | Computes the bounding box of a subrange of this node in global screen coordinates. Returns the same as |location| if range information is not available. The start and end indices are zero-based offsets into the node's \"name\" string attribute. Returns [Rect](/extensions/automation#type-Rect). | Parameters | |---| | integer | startIndex | | | integer | endIndex | | | | string | (optional) description | The purpose of the node, other than the role, if any. | | string | (optional) placeholder | The placeholder for this text field, if any. | | string | (optional) roleDescription | The role description for this node. | | string | (optional) name | The accessible name for this node, via the [Accessible Name Calculation](http://www.w3.org/TR/wai-aria/roles#namecalculation) process. | | enum of `\"uninitialized\"`, `\"attribute\"`, `\"attributeExplicitlyEmpty\"`, `\"contents\"`, `\"placeholder\"`, `\"relatedElement\"`, or `\"value\"` | (optional) nameFrom | The source of the name. | | string | (optional) value | The value for this node: for example the `value` attribute of an ` element.` | | string | (optional) htmlTag | The HTML tag for this element, if this node is an HTML element. | | integer | (optional) hierarchicalLevel | The level of a heading or tree item. | | array of integer | (optional) wordStarts | The start and end index of each word in an inline text box. | | array of integer | (optional) wordEnds | | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) controls | The nodes, if any, which this node is specified to control via [`aria-controls`](http://www.w3.org/TR/wai-aria/states_and_properties#aria-controls). | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) describedBy | The nodes, if any, which form a description for this node. | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) flowTo | The nodes, if any, which may optionally be navigated to after this one. See [`aria-flowto`](http://www.w3.org/TR/wai-aria/states_and_properties#aria-flowto). | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) labelledBy | The nodes, if any, which form a label for this element. Generally, the text from these elements will also be exposed as the element's accessible name, via the [automation.AutomationNode.name](/extensions/automation#property-AutomationNode-name) attribute. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) activeDescendant | The node referred to by `aria-activedescendant`, where applicable | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) inPageLinkTarget | The target of an in-page link. | | array of object | (optional) customActions | An array of custom actions. #### Properties of each object | integer | id | | |---|---|---| | string | description | | | | string | (optional) url | The URL that this link will navigate to. | | string | (optional) docUrl | The URL of this document. | | string | (optional) docTitle | The title of this document. | | boolean | (optional) docLoaded | Whether this document has finished loading. | | double | (optional) docLoadingProgress | The proportion (out of 1.0) that this doc has completed loading. | | integer | (optional) scrollX | Scrollable container attributes. | | integer | (optional) scrollXMin | | | integer | (optional) scrollXMax | | | integer | (optional) scrollY | | | integer | (optional) scrollYMin | | | integer | (optional) scrollYMax | | | integer | (optional) textSelStart | The character index of the start of the selection within this editable text element; -1 if no selection. | | integer | (optional) textSelEnd | The character index of the end of the selection within this editable text element; -1 if no selection. | | string | (optional) textInputType | The input type, like email or number. | | array of integer | lineBreaks | An array of indexes of the break between lines in editable text. | | array of integer | markerStarts | An array of indexes of the start position of each text marker. | | array of integer | markerEnds | An array of indexes of the end position of each text marker. | | array of integer | markerTypes | An array of numerical types indicating the type of each text marker, such as a spelling error. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) anchorObject | The anchor node of the tree selection, if any. | | integer | (optional) anchorOffset | The anchor offset of the tree selection, if any. | | string | (optional) anchorAffinity | The affinity of the tree selection anchor, if any. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) focusObject | The focus node of the tree selection, if any. | | integer | (optional) focusOffset | The focus offset of the tree selection, if any. | | string | (optional) focusAffinity | The affinity of the tree selection focus, if any. | | double | (optional) valueForRange | The current value for this range. | | double | (optional) minValueForRange | The minimum possible value for this range. | | double | (optional) maxValueForRange | The maximum possible value for this range. | | integer | (optional) posInSet | The 1-based index of an item in a set. | | integer | (optional) setSize | The number of items in a set; | | integer | (optional) tableRowCount | The number of rows in this table as specified in the DOM. | | integer | (optional) ariaRowCount | The number of rows in this table as specified by the page author. | | integer | (optional) tableColumnCount | The number of columns in this table as specified in the DOM. | | integer | (optional) ariaColumnCount | The number of columns in this table as specified by the page author. | | integer | (optional) tableCellColumnIndex | The zero-based index of the column that this cell is in as specified in the DOM. | | integer | (optional) ariaCellColumnIndex | The ARIA column index as specified by the page author. | | integer | (optional) tableCellColumnSpan | The number of columns that this cell spans (default is 1). | | integer | (optional) tableCellRowIndex | The zero-based index of the row that this cell is in as specified in the DOM. | | integer | (optional) ariaCellRowIndex | The ARIA row index as specified by the page author. | | integer | (optional) tableCellRowSpan | The number of rows that this cell spans (default is 1). | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) tableColumnHeader | The corresponding column header for this cell. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) tableRowHeader | The corresponding row header for this cell. | | string | (optional) liveStatus | The type of region if this is the root of a live region. Possible values are 'polite' and 'assertive'. | | string | (optional) liveRelevant | The value of aria-relevant for a live region. | | boolean | (optional) liveAtomic | The value of aria-atomic for a live region. | | boolean | (optional) busy | The value of aria-busy for a live region or any other element. | | string | (optional) containerLiveStatus | The type of live region if this node is inside a live region. | | string | (optional) containerLiveRelevant | The value of aria-relevant if this node is inside a live region. | | boolean | (optional) containerLiveAtomic | The value of aria-atomic if this node is inside a live region. | | boolean | (optional) containerLiveBusy | The value of aria-busy if this node is inside a live region. | | object | (optional) htmlAttributes | A map containing all HTML attributes and their values | | string | (optional) inputType | The input type of a text field, such as \"text\" or \"email\". | | string | (optional) accessKey | The key that activates this widget. | | string | (optional) ariaInvalidValue | The value of the aria-invalid attribute, indicating the error type. | | string | (optional) display | The CSS display attribute for this node, if applicable. | | string | (optional) imageDataUrl | A data url with the contents of this object's image or thumbnail. | | string | (optional) language | The language code for this subtree. | | string | (optional) restriction | Input restriction, if any, such as readonly or disabled: undefined - enabled control or other object that is not disabled Restriction.DISABLED - disallows input in itself + any descendants Restriction.READONLY - allow focus/selection but not input | | string | (optional) checked | Tri-state describing checkbox or radio button: 'false' | 'true' | 'mixed' | | integer | (optional) color | The RGBA foreground color of this subtree, as an integer. | | integer | (optional) backgroundColor | The RGBA background color of this subtree, as an integer. | | integer | (optional) colorValue | The RGBA color of an input element whose value is a color. | | boolean | bold | Indicates node text is bold. | | boolean | italic | Indicates node text is italic. | | boolean | underline | Indicates node text is underline. | | boolean | lineThrough | Indicates node text is line through. | | array of [AutomationNode](/extensions/automation#type-AutomationNode) | children | Walking the tree. | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) parent | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) firstChild | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) lastChild | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) previousSibling | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) nextSibling | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) nextOnLine | | | [AutomationNode](/extensions/automation#type-AutomationNode) | (optional) previousOnLine | | | integer | (optional) indexInParent | The index of this node in its parent node's list of children. If this is the root node, this will be undefined. | | function | doDefault | Does the default action based on this node's role. This is generally the same action that would result from clicking the node such as expanding a treeitem, toggling a checkbox, selecting a radiobutton, or activating a button. | | function | focus | Places focus on this node. | | function | getImageData | Request a data url for the contents of an image, optionally resized. Pass zero for maxWidth and/or maxHeight for the original size. | Parameters | |---| | integer | maxWidth | | | integer | maxHeight | | | | function | hitTest | Does a hit test of the given global screen coordinates, and fires eventToFire on the resulting object. | Parameters | |---| | integer | x | | | integer | y | | | [EventType](/extensions/automation#type-EventType) | eventToFire | | | | function | makeVisible | Scrolls this node to make it visible. | | function | performCustomAction | Performs custom action. | Parameters | |---| | integer | customActionId | | | | function | setSelection | Sets selection within a text field. | Parameters | |---| | integer | startIndex | | | integer | endIndex | | | | function | setSequentialFocusNavigationStartingPoint | Clears focus and sets this node as the starting point for the next time the user presses Tab or Shift+Tab. | | function | showContextMenu | Show the context menu for this element, as if the user right-clicked. | | function | resumeMedia | Resume playing any media within this tree. | | function | startDuckingMedia | Start ducking any media within this tree. | | function | stopDuckingMedia | Stop ducking any media within this tree. | | function | suspendMedia | Suspend any media playing within this tree. | | function | scrollBackward | Scrolls this scrollable container backward. | | function | scrollForward | Scrolls this scrollable container forward. | | function | scrollUp | Scrolls this scrollable container up. | | function | scrollDown | Scrolls this scrollable container down. | | function | scrollLeft | Scrolls this scrollable container left. | | function | scrollRight | Scrolls this scrollable container right. | | function | addEventListener | Adds a listener for the given event type and event phase. | Parameters | |---| | [EventType](/extensions/automation#type-EventType) | eventType | | | function | listener | A listener for events on an `AutomationNode`. | Parameters | |---| | [AutomationEvent](/extensions/automation#type-AutomationEvent) | event | | | | boolean | capture | | | | function | removeEventListener | Removes a listener for the given event type and event phase. | Parameters | |---| | [EventType](/extensions/automation#type-EventType) | eventType | | | function | listener | A listener for events on an `AutomationNode`. | Parameters | |---| | [AutomationEvent](/extensions/automation#type-AutomationEvent) | event | | | | boolean | capture | | | | function | domQuerySelector | Gets the first node in this node's subtree which matches the given CSS selector and is within the same DOM context. If this node doesn't correspond directly with an HTML node in the DOM, querySelector will be run on this node's nearest HTML node ancestor. Note that this may result in the query returning a node which is not a descendant of this node. If the selector matches a node which doesn't directly correspond to an automation node (for example an element within an ARIA widget, where the ARIA widget forms one node of the automation tree, or an element which is hidden from accessibility via hiding it using CSS or using aria-hidden), this will return the nearest ancestor which does correspond to an automation node. | Parameters | |---| | string | selector | | | | function | find | Finds the first AutomationNode in this node's subtree which matches the given search parameters. Returns [AutomationNode](/extensions/automation#type-AutomationNode). | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | | function | findAll | Finds all the AutomationNodes in this node's subtree which matches the given search parameters. Returns array of [AutomationNode](/extensions/automation#type-AutomationNode). | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | | function | matches | Returns whether this node matches the given [automation.FindParams](/extensions/automation#type-FindParams). Returns boolean. | Parameters | |---| | [FindParams](/extensions/automation#type-FindParams) | params | | | ## Methods ### getTree `whale.automation.getTree(integer tabId, function callback)` Get the automation tree for the tab with the given tabId, or the current tab if no tabID is given, enabling automation if necessary. Returns a tree with a placeholder root node; listen for the \"loadComplete\" event to get a notification that the tree has fully loaded (the previous root node reference will stop working at or before this point). | Parameters | |---| | integer | (optional) tabId | | | function | (optional) callback | Called when the `AutomationNode` for the page is available. If you specify the _callback_ parameter, it should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) rootNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | rootNode | | |---|---|---| | ### getDesktop `whale.automation.getDesktop(function callback)` Get the automation tree for the whole desktop which consists of all on screen views. Note this API is currently only supported on Chrome OS. | Parameters | |---| | function | callback | Called when the `AutomationNode` for the page is available. The _callback_ parameter should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) rootNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | rootNode | | |---|---|---| | ### getFocus `whale.automation.getFocus(function callback)` Get the automation node that currently has focus, globally. Will return null if none of the nodes in any loaded trees have focus. | Parameters | |---| | function | callback | Called with the `AutomationNode` that currently has focus. The _callback_ parameter should be a function that looks like this: `function( [AutomationNode](/extensions/automation#type-AutomationNode) focusedNode) {...};` | [AutomationNode](/extensions/automation#type-AutomationNode) | focusedNode | | |---|---|---| | ### addTreeChangeObserver `whale.automation.addTreeChangeObserver(enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` filter, function observer)` Add a tree change observer. Tree change observers are static/global, they listen to changes across all trees. Pass a filter to determine what specific tree changes to listen to, and note that listnening to all tree changes can be expensive. | Parameters | |---| | enum of `\"noTreeChanges\"`, `\"liveRegionTreeChanges\"`, `\"textMarkerChanges\"`, or `\"allTreeChanges\"` | filter | | | function | observer | A listener for changes on the `AutomationNode` tree. The _observer_ parameter should be a function that looks like this: `function( [TreeChange](/extensions/automation#type-TreeChange) treeChange) {...};` | [TreeChange](/extensions/automation#type-TreeChange) | treeChange | | |---|---|---| | ### removeTreeChangeObserver `whale.automation.removeTreeChangeObserver(function observer)` Remove a tree change observer. | Parameters | |---| | function | observer | A listener for changes on the `AutomationNode` tree. The _observer_ parameter should be a function that looks like this: `function( [TreeChange](/extensions/automation#type-TreeChange) treeChange) {...};` | [TreeChange](/extensions/automation#type-TreeChange) | treeChange | | |---|---|---| | ### setDocumentSelection `whale.automation.setDocumentSelection( [SetDocumentSelectionParams](/extensions/automation#type-SetDocumentSelectionParams) params)` Sets the selection in a tree. This creates a selection in a single tree (anchorObject and focusObject must have the same root). Everything in the tree between the two node/offset pairs gets included in the selection. The anchor is where the user started the selection, while the focus is the point at which the selection gets extended e.g. when dragging with a mouse or using the keyboard. For nodes with the role staticText, the offset gives the character offset within the value where the selection starts or ends, respectively. | Parameters | |---| | [SetDocumentSelectionParams](/extensions/automation#type-SetDocumentSelectionParams) | params | | "},"extensions-omnibox.html":{"url":"extensions-omnibox.html","title":"omnibox","keywords":"","body":"whale.omnibox Description: The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox. Availability: Since Chrome 20. Manifest: \"omnibox\": {...} ![A screenshot showing suggestions related to the keyword 'Chromium Search'](/static/images/omnibox.png) When the user enters your extension's keyword, the user starts interacting solely with your extension. Each keystroke is sent to your extension, and you can provide suggestions in response. The suggestions can be richly formatted in a variety of ways. When the user accepts a suggestion, your extension is notified and can take action. ## Manifest You must include an `omnibox` `keyword` field in the [manifest](manifest) to use the omnibox API. You should also specify a 16x16-pixel icon, which will be displayed in the address bar when suggesting that users enter keyword mode. For example: { \"name\": \"Aaron's omnibox extension\", \"version\": \"1.0\", **\"omnibox\": { \"keyword\" : \"aaron\" },** **\"icons\": {** **\"16\": \"16-full-color.png\"** **},** \"background\": { \"persistent\": false, \"scripts\": [\"background.js\"] } } **Note:** Chrome automatically creates a grayscale version of your 16x16-pixel icon. You should provide a full-color version so that it can also be used in other situations that require color. For example, the [context menus API](contextMenus) also uses a 16x16-pixel icon, but it is displayed in color. ## Examples You can find samples of this API on the [sample page](samples#search:omnibox). ## Summary | Types | |---| | [DescriptionStyleType](#type-DescriptionStyleType) | | [OnInputEnteredDisposition](#type-OnInputEnteredDisposition) | | [SuggestResult](#type-SuggestResult) | | Methods | | [setDefaultSuggestion](#method-setDefaultSuggestion) − `whale.omnibox.setDefaultSuggestion(object suggestion)` | | Events | | [onInputStarted](#event-onInputStarted) | | [onInputChanged](#event-onInputChanged) | | [onInputEntered](#event-onInputEntered) | | [onInputCancelled](#event-onInputCancelled) | | [onDeleteSuggestion](#event-onDeleteSuggestion) | ## Types ### DescriptionStyleType The style type. | Enum | |---| | `\"url\"`, `\"match\"`, or `\"dim\"` | ### OnInputEnteredDisposition The window disposition for the omnibox query. This is the recommended context to display results. For example, if the omnibox command is to navigate to a certain URL, a disposition of 'newForegroundTab' means the navigation should take place in a new selected tab. | Enum | |---| | `\"currentTab\"`, `\"newForegroundTab\"`, or `\"newBackgroundTab\"` | ### SuggestResult A suggest result. | properties | |---| | string | content | The text that is put into the URL bar, and that is sent to the extension when the user chooses this entry. | | string | description | The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match. You must escape the five predefined entities to display them as text: stackoverflow.com/a/1091953/89484 | | boolean | (optional) deletable | Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). Whether the suggest result can be deleted by the user. | ## Methods ### setDefaultSuggestion `whale.omnibox.setDefaultSuggestion(object suggestion)` Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar. | Parameters | |---| | object | suggestion | A partial SuggestResult object, without the 'content' parameter. | string | description | |---|---| The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match. | | ## Events ### onInputStarted User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events. #### addListener `whale.omnibox.onInputStarted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onInputChanged User has changed what is typed into the omnibox. #### addListener `whale.omnibox.onInputChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text, function suggest) {...};` | string | text | | |---|---|---| | function | suggest | A callback passed to the onInputChanged event used for sending suggestions back to the browser. The _suggest_ parameter should be a function that looks like this: `function(array of [SuggestResult](/extensions/omnibox#type-SuggestResult) suggestResults) {...};` | array of [SuggestResult](/extensions/omnibox#type-SuggestResult) | suggestResults | |---|---| Array of suggest results | | | ### onInputEntered User has accepted what is typed into the omnibox. #### addListener `whale.omnibox.onInputEntered.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text, [OnInputEnteredDisposition](/extensions/omnibox#type-OnInputEnteredDisposition) disposition) {...};` | string | text | | |---|---|---| | [OnInputEnteredDisposition](/extensions/omnibox#type-OnInputEnteredDisposition) | disposition | Since Chrome 28. | | ### onInputCancelled User has ended the keyword input session without accepting the input. #### addListener `whale.omnibox.onInputCancelled.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onDeleteSuggestion Since Chrome 63. _Warning:_ this is the current **Dev** channel. [Learn more](api_index#dev_apis). User has deleted a suggested result. #### addListener `whale.omnibox.onDeleteSuggestion.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string text) {...};` | string | text | |---|---| Text of the deleted suggestion. | | "},"extensions-bookmarks.html":{"url":"extensions-bookmarks.html","title":"bookmarks","keywords":"","body":"whale.bookmarks Description: Use the whale.bookmarks API to create, organize, and otherwise manipulate bookmarks. Also see Override Pages, which you can use to create a custom Bookmark Manager page. Availability: Since Chrome 20. Permissions: \"bookmarks\" ![Clicking the star adds a bookmark](/static/images/bookmarks.png) ## Manifest You must declare the \"bookmarks\" permission in the [extension manifest](manifest) to use the bookmarks API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"bookmarks\" ]**, ... } ## Objects and properties Bookmarks are organized in a tree, where each node in the tree is either a bookmark or a folder (sometimes called a _group_). Each node in the tree is represented by a [bookmarks.BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) object. `BookmarkTreeNode` properties are used throughout the `whale.bookmarks` API. For example, when you call [bookmarks.create](/extensions/bookmarks#method-create), you pass in the new node's parent (`parentId`), and, optionally, the node's `index`, `title`, and `url` properties. See [bookmarks.BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) for information about the properties a node can have. **Note:** You cannot use this API to add or remove entries in the root folder. You also cannot rename, move, or remove the special \"Bookmarks Bar\" and \"Other Bookmarks\" folders. ## Examples The following code creates a folder with the title \"Extension bookmarks\". The first argument to `create()` specifies properties for the new folder. The second argument defines a function to be executed after the folder is created. whale.bookmarks.create({'parentId': bookmarkBar.id, 'title': 'Extension bookmarks'}, function(newFolder) { console.log(\"added folder: \" + newFolder.title); }); The next snippet creates a bookmark pointing to the developer documentation for extensions. Since nothing bad will happen if creating the bookmark fails, this code doesn't bother to define a callback function. whale.bookmarks.create({'parentId': extensionsFolderId, 'title': 'Extensions doc', 'url': 'http://code.google.com/chrome/extensions'}); For an example of using this API, see the [basic bookmarks sample](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/bookmarks/basic/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [BookmarkTreeNodeUnmodifiable](#type-BookmarkTreeNodeUnmodifiable) | | [BookmarkTreeNode](#type-BookmarkTreeNode) | | Properties | | [MAX_WRITE_OPERATIONS_PER_HOUR](#property-MAX_WRITE_OPERATIONS_PER_HOUR) | | [MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE](#property-MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE) | | Methods | | [get](#method-get) − `whale.bookmarks.get(string or array of string idOrIdList, function callback)` | | [getChildren](#method-getChildren) − `whale.bookmarks.getChildren(string id, function callback)` | | [getRecent](#method-getRecent) − `whale.bookmarks.getRecent(integer numberOfItems, function callback)` | | [getTree](#method-getTree) − `whale.bookmarks.getTree(function callback)` | | [getSubTree](#method-getSubTree) − `whale.bookmarks.getSubTree(string id, function callback)` | | [search](#method-search) − `whale.bookmarks.search(string or object query, function callback)` | | [create](#method-create) − `whale.bookmarks.create(object bookmark, function callback)` | | [move](#method-move) − `whale.bookmarks.move(string id, object destination, function callback)` | | [update](#method-update) − `whale.bookmarks.update(string id, object changes, function callback)` | | [remove](#method-remove) − `whale.bookmarks.remove(string id, function callback)` | | [removeTree](#method-removeTree) − `whale.bookmarks.removeTree(string id, function callback)` | | Events | | [onCreated](#event-onCreated) | | [onRemoved](#event-onRemoved) | | [onChanged](#event-onChanged) | | [onMoved](#event-onMoved) | | [onChildrenReordered](#event-onChildrenReordered) | | [onImportBegan](#event-onImportBegan) | | [onImportEnded](#event-onImportEnded) | ## Types ### BookmarkTreeNodeUnmodifiable Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator. Omitted if the node can be modified by the user and the extension (default). | Enum | |---| | `\"managed\"` | ### BookmarkTreeNode A node (either a bookmark or a folder) in the bookmark tree. Child nodes are ordered within their parent folder. | properties | |---| | string | id | The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted. | | string | (optional) parentId | The `id` of the parent folder. Omitted for the root node. | | integer | (optional) index | The 0-based position of this node within its parent folder. | | string | (optional) url | The URL navigated to when a user clicks the bookmark. Omitted for folders. | | string | title | The text displayed for the node. | | double | (optional) dateAdded | When this node was created, in milliseconds since the epoch (`new Date(dateAdded)`). | | double | (optional) dateGroupModified | When the contents of this folder last changed, in milliseconds since the epoch. | | [BookmarkTreeNodeUnmodifiable](/extensions/bookmarks#type-BookmarkTreeNodeUnmodifiable) | (optional) unmodifiable | Since Chrome 37. Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default). | | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | (optional) children | An ordered list of children of this node. | ## Properties | `1,000,000` | `whale.bookmarks.MAX_WRITE_OPERATIONS_PER_HOUR` | |---|---| **Deprecated** since Chrome 38. Bookmark write operations are no longer limited by Chrome. | | `1,000,000` | `whale.bookmarks.MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE` | **Deprecated** since Chrome 38. Bookmark write operations are no longer limited by Chrome. | ## Methods ### get `whale.bookmarks.get(string or array of string idOrIdList, function callback)` Retrieves the specified BookmarkTreeNode(s). | Parameters | |---| | string or array of string | idOrIdList | A single string-valued id, or an array of string-valued ids | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getChildren `whale.bookmarks.getChildren(string id, function callback)` Retrieves the children of the specified BookmarkTreeNode id. | Parameters | |---| | string | id | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getRecent `whale.bookmarks.getRecent(integer numberOfItems, function callback)` Retrieves the recently added bookmarks. | Parameters | |---| | integer | numberOfItems | The maximum number of items to return. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getTree `whale.bookmarks.getTree(function callback)` Retrieves the entire Bookmarks hierarchy. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### getSubTree `whale.bookmarks.getSubTree(string id, function callback)` Retrieves part of the Bookmarks hierarchy, starting at the specified node. | Parameters | |---| | string | id | The ID of the root of the subtree to retrieve. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### search `whale.bookmarks.search(string or object query, function callback)` Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties. | Parameters | |---| | string or object | query | Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties `query`, `url`, and `title` may be specified and bookmarks matching all specified properties will be produced. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) results) {...};` | array of [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | results | | |---|---|---| | ### create `whale.bookmarks.create(object bookmark, function callback)` Creates a bookmark or folder under the specified parentId. If url is NULL or missing, it will be a folder. | Parameters | |---| | object | bookmark | | string | (optional) parentId | |---|---| Defaults to the Other Bookmarks folder. | | integer | (optional) index | | | string | (optional) title | | | string | (optional) url | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### move `whale.bookmarks.move(string id, object destination, function callback)` Moves the specified BookmarkTreeNode to the provided location. | Parameters | |---| | string | id | | | object | destination | | string | (optional) parentId | | |---|---|---| | integer | (optional) index | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### update `whale.bookmarks.update(string id, object changes, function callback)` Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. **Note:** Currently, only 'title' and 'url' are supported. | Parameters | |---| | string | id | | | object | changes | | string | (optional) title | | |---|---|---| | string | (optional) url | | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) result) {...};` | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | result | | |---|---|---| | ### remove `whale.bookmarks.remove(string id, function callback)` Removes a bookmark or an empty bookmark folder. | Parameters | |---| | string | id | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeTree `whale.bookmarks.removeTree(string id, function callback)` Recursively removes a bookmark folder. | Parameters | |---| | string | id | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onCreated Fired when a bookmark or folder is created. #### addListener `whale.bookmarks.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) bookmark) {...};` | string | id | | |---|---|---| | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | bookmark | | | ### onRemoved Fired when a bookmark or folder is removed. When a folder is removed recursively, a single notification is fired for the folder, and none for its contents. #### addListener `whale.bookmarks.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object removeInfo) {...};` | string | id | | |---|---|---| | object | removeInfo | | string | parentId | | |---|---|---| | integer | index | | | [BookmarkTreeNode](/extensions/bookmarks#type-BookmarkTreeNode) | node | Since Chrome 48. | | | ### onChanged Fired when a bookmark or folder changes. **Note:** Currently, only title and url changes trigger this. #### addListener `whale.bookmarks.onChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object changeInfo) {...};` | string | id | | |---|---|---| | object | changeInfo | | string | title | | |---|---|---| | string | (optional) url | | | | ### onMoved Fired when a bookmark or folder is moved to a different parent folder. #### addListener `whale.bookmarks.onMoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object moveInfo) {...};` | string | id | | |---|---|---| | object | moveInfo | | string | parentId | | |---|---|---| | integer | index | | | string | oldParentId | | | integer | oldIndex | | | | ### onChildrenReordered Fired when the children of a folder have changed their order due to the order being sorted in the UI. This is not called as a result of a move(). #### addListener `whale.bookmarks.onChildrenReordered.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string id, object reorderInfo) {...};` | string | id | | |---|---|---| | object | reorderInfo | | array of string | childIds | | |---|---|---| | | ### onImportBegan Fired when a bookmark import session is begun. Expensive observers should ignore onCreated updates until onImportEnded is fired. Observers should still handle other notifications immediately. #### addListener `whale.bookmarks.onImportBegan.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onImportEnded Fired when a bookmark import session is ended. #### addListener `whale.bookmarks.onImportEnded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"extensions-override.html":{"url":"extensions-override.html","title":"override","keywords":"","body":"Override Pages #pics { margin:2em 1em 1.5em; } #pics td { text-align:center; width:50%!important; border:none; padding:0 1em; font-size:90%; } #pics img { width:188; height:246; border:none; } Override pages are a way to substitute an HTML file from your extension for a page that Google Chrome normally provides. In addition to HTML, an override page usually has CSS and JavaScript code. An extension can replace any one of the following pages: Bookmark Manager: The page that appears when the user chooses the Bookmark Manager menu item from the Chrome menu or, on Mac, the Bookmark Manager item from the Bookmarks menu. You can also get to this page by entering the URL chrome://bookmarks. History: The page that appears when the user chooses the History menu item from the Chrome menu or, on Mac, the Show Full History item from the History menu. You can also get to this page by entering the URL chrome://history. New Tab: The page that appears when the user creates a new tab or window. You can also get to this page by entering the URL chrome://newtab. Note: A single extension can override only one page. For example, an extension can't override both the Bookmark Manager and History pages. Incognito windows are treated specially. New Tab pages cannot be overridden in incognito windows. Other override pages work in incognito windows as long as the incognito manifest property is set to \"spanning\" (which is the default value). See Saving data and incognito mode in the Overview for more details on how you should treat incognito windows. The following screenshots show the default New Tab page next to a custom New Tab page. The default New Tab page An alternative New Tab page Manifest Register an override page in the extension manifest like this: { \"name\": \"My extension\", ... **\"chrome_url_overrides\" : { \"_pageToOverride_\": \"_myPage.html_\" }**, ... } For _pageToOverride_, substitute one of the following: bookmarks history newtab Tips For an effective override page, follow these guidelines: Make your page quick and small. Users expect built-in browser pages to open instantly. Avoid doing things that might take a long time. For example, avoid synchronous fetches of network or database resources. Include a title in your page. Otherwise people might see the URL of the page, which could be confusing. Here's an example of specifying the title: New Tab Don't rely on the page having the keyboard focus. The address bar always gets the focus first when the user creates a new tab. Don't try to emulate the default New Tab page. The APIs necessary to create a slightly modified version of the default New Tab page — with top pages, recently closed pages, tips, a theme background image, and so on — don't exist yet. Until they do, you're better off trying to make something completely different. Examples See the override samples. Content available under the [CC-By 3.0 license](http://creativecommons.org/licenses/by/3.0/) "},"extensions-browser-action.html":{"url":"extensions-browser-action.html","title":"browser-action","keywords":"","body":"whale.browserAction Description: Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup. Availability: Since Chrome 19. Manifest: \"browser_action\": {...} In the following figure, the multicolored square to the right of the address bar is the icon for a browser action. A popup is below the icon. ![](/static/images/browser-action.png) If you want to create an icon that isn't always visible, use a [page action](pageAction) instead of a browser action. ## Manifest Register your browser action in the [extension manifest](manifest) like this: { \"name\": \"My extension\", ... **\"browser_action\": { \"default_icon\": { _// optional_ \"16\": \"images/icon16.png\", _// optional_ \"24\": \"images/icon24.png\", _// optional_ \"32\": \"images/icon32.png\" _// optional_ }, \"default_title\": \"Google Mail\", _// optional; shown in tooltip_ \"default_popup\": \"popup.html\" _// optional_ }**, ... } You can provide any size icon to be used in Chrome, and Chrome will select the closest one and scale it to the appropriate size to fill the 16-dip space. However, if the exact size isn't provided, this scaling can cause the icon to lose detail or look fuzzy. Since devices with less-common scale factors like 1.5x or 1.2x are becoming more common, you are encouraged to provide multiple sizes for your icons. This also ensures that if the icon display size is ever changed, you don't need to do any more work to provide different icons! The old syntax for registering the default icon is still supported: { \"name\": \"My extension\", ... **\"browser_action\": { ... \"default_icon\": \"images/icon32.png\" _// optional_ _// equivalent to \"default_icon\": { \"32\": \"images/icon32.png\" }_ }**, ... } ## Parts of the UI A browser action can have an [icon](#icon), a [tooltip](#tooltip), a [badge](#badge), and a [popup](#popups). ### Icon The browser action icons in Chrome are 16 dips (device-independent pixels) wide and high. Larger icons are resized to fit, but for best results, use a 16-dip square icon. You can set the icon in two ways: using a static image or using the HTML5 [canvas element](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html). Using static images is easier for simple applications, but you can create more dynamic UIs — such as smooth animation — using the canvas element. Static images can be in any format WebKit can display, including BMP, GIF, ICO, JPEG, or PNG. For unpacked extensions, images must be in the PNG format. To set the icon, use the **default_icon** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setIcon](/extensions/browserAction#method-setIcon) method. To properly display icon when screen pixel density (ratio `size_in_pixel / size_in_dip`) is different than 1, the icon can be defined as set of images with different sizes. The actual image to display will be selected from the set to best fit the pixel size of 16 dip. The icon set can contain any size icon specification, and Chrome will select the most appropriate one. ### Tooltip To set the tooltip, use the **default_title** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setTitle](/extensions/browserAction#method-setTitle) method. You can specify locale-specific strings for the **default_title** field; see [Internationalization](i18n) for details. ### Badge Browser actions can optionally display a _badge_ — a bit of text that is layered over the icon. Badges make it easy to update the browser action to display a small amount of information about the state of the extension. Because the badge has limited space, it should have 4 characters or less. Set the text and color of the badge using [browserAction.setBadgeText](/extensions/browserAction#method-setBadgeText) and [browserAction.setBadgeBackgroundColor](/extensions/browserAction#method-setBadgeBackgroundColor), respectively. ### Popup If a browser action has a popup, the popup appears when the user clicks the icon. The popup can contain any HTML contents that you like, and it's automatically sized to fit its contents. To add a popup to your browser action, create an HTML file with the popup's contents. Specify the HTML file in the **default_popup** field of **browser_action** in the [manifest](#manifest), or call the [browserAction.setPopup](/extensions/browserAction#method-setPopup) method. ## Tips For the best visual impact, follow these guidelines: * **Do** use browser actions for features that make sense on most pages. * **Don't** use browser actions for features that make sense for only a few pages. Use [page actions](pageAction) instead. * **Do** use big, colorful icons that make the most of the 16x16-dip space. Browser action icons should seem a little bigger and heavier than page action icons. * **Don't** attempt to mimic Google Chrome's monochrome menu icon. That doesn't work well with themes, and anyway, extensions should stand out a little. * **Do** use alpha transparency to add soft edges to your icon. Because many people use themes, your icon should look nice on a variety of background colors. * **Don't** constantly animate your icon. That's just annoying. ## Examples You can find simple examples of using browser actions in the [examples/api/browserAction](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/browserAction/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [ColorArray](#type-ColorArray) | | [ImageDataType](#type-ImageDataType) | | Methods | | [setTitle](#method-setTitle) − `whale.browserAction.setTitle(object details)` | | [getTitle](#method-getTitle) − `whale.browserAction.getTitle(object details, function callback)` | | [setIcon](#method-setIcon) − `whale.browserAction.setIcon(object details, function callback)` | | [setPopup](#method-setPopup) − `whale.browserAction.setPopup(object details)` | | [getPopup](#method-getPopup) − `whale.browserAction.getPopup(object details, function callback)` | | [setBadgeText](#method-setBadgeText) − `whale.browserAction.setBadgeText(object details)` | | [getBadgeText](#method-getBadgeText) − `whale.browserAction.getBadgeText(object details, function callback)` | | [setBadgeBackgroundColor](#method-setBadgeBackgroundColor) − `whale.browserAction.setBadgeBackgroundColor(object details)` | | [getBadgeBackgroundColor](#method-getBadgeBackgroundColor) − `whale.browserAction.getBadgeBackgroundColor(object details, function callback)` | | [enable](#method-enable) − `whale.browserAction.enable(integer tabId)` | | [disable](#method-disable) − `whale.browserAction.disable(integer tabId)` | | Events | | [onClicked](#event-onClicked) | ## Types ### ColorArray array of integer ### ImageDataType Since Chrome 23. Pixel data for an image. Must be an ImageData object (for example, from a `canvas` element). ## Methods ### setTitle `whale.browserAction.setTitle(object details)` Sets the title of the browser action. This shows up in the tooltip. | Parameters | |---| | object | details | | string | title | |---|---| The string the browser action should display when moused over. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getTitle `whale.browserAction.getTitle(object details, function callback)` Gets the title of the browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the title from. If no tab is specified, the non-tab-specific title is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setIcon `whale.browserAction.setIcon(object details, function callback)` Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the **path** or the **imageData** property must be specified. | Parameters | |---| | object | details | | [ImageDataType](/extensions/browserAction#type-ImageDataType) or object | (optional) imageData | |---|---| Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}' | | string or object | (optional) path | Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.path = {'16': foo}' | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setPopup `whale.browserAction.setPopup(object details)` Sets the html document to be opened as a popup when the user clicks on the browser action's icon. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | string | popup | The html file to show in a popup. If set to the empty string (''), no popup is shown. | | ### getPopup `whale.browserAction.getPopup(object details, function callback)` Gets the html document set as the popup for this browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the popup from. If no tab is specified, the non-tab-specific popup is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setBadgeText `whale.browserAction.setBadgeText(object details)` Sets the badge text for the browser action. The badge is displayed on top of the icon. | Parameters | |---| | object | details | | string | text | |---|---| Any number of characters can be passed, but only about four can fit in the space. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getBadgeText `whale.browserAction.getBadgeText(object details, function callback)` Gets the badge text of the browser action. If no tab is specified, the non-tab-specific badge text is returned. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the badge text from. If no tab is specified, the non-tab-specific badge text is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setBadgeBackgroundColor `whale.browserAction.setBadgeBackgroundColor(object details)` Sets the background color for the badge. | Parameters | |---| | object | details | | string or [ColorArray](/extensions/browserAction#type-ColorArray) | color | |---|---| An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is `[255, 0, 0, 255]`. Can also be a string with a CSS value, with opaque red being `#FF0000` or `#F00`. | | integer | (optional) tabId | Limits the change to when a particular tab is selected. Automatically resets when the tab is closed. | | ### getBadgeBackgroundColor `whale.browserAction.getBadgeBackgroundColor(object details, function callback)` Gets the background color of the browser action. | Parameters | |---| | object | details | | integer | (optional) tabId | |---|---| Specify the tab to get the badge background color from. If no tab is specified, the non-tab-specific badge background color is returned. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [ColorArray](/extensions/browserAction#type-ColorArray) result) {...};` | [ColorArray](/extensions/browserAction#type-ColorArray) | result | | |---|---|---| | ### enable `whale.browserAction.enable(integer tabId)` Since Chrome 22. Enables the browser action for a tab. By default, browser actions are enabled. | Parameters | |---| | integer | (optional) tabId | The id of the tab for which you want to modify the browser action. | ### disable `whale.browserAction.disable(integer tabId)` Since Chrome 22. Disables the browser action for a tab. | Parameters | |---| | integer | (optional) tabId | The id of the tab for which you want to modify the browser action. | ## Events ### onClicked Fired when a browser action icon is clicked. This event will not fire if the browser action has a popup. #### addListener `whale.browserAction.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [tabs.Tab](/extensions/tabs#type-Tab) tab) {...};` | [tabs.Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | "},"extensions-page-action.html":{"url":"extensions-page-action.html","title":"page-action","keywords":"","body":"whale.pageAction Description: Use the whale.pageAction API to put icons in the main Google Chrome toolbar, to the right of the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages. Page actions appear grayed out when inactive. Availability: Since Chrome 19. Manifest: \"page_action\": {...} Some examples: * Subscribe to this page's RSS feed * Make a slideshow out of this page's photos The RSS icon in the following screenshot represents a page action that lets you subscribe to the RSS feed for the current page. ![](/static/images/page_action.png) Hidden page actions appear grayed out. For example, the RSS feed below is grayed out, as you can't subscribe to the feed for the current page: ![](/static/images/page_action_grey.png) Please consider using a [browser action](browserAction) instead, so that users can always interact with your extension. ## Manifest Register your page action in the [extension manifest](manifest) like this: { \"name\": \"My extension\", ... **\"page_action\": { \"default_icon\": { _// optional_ \"16\": \"images/icon16.png\", _// optional_ \"24\": \"images/icon24.png\", _// optional_ \"32\": \"images/icon32.png\" _// optional_ }, \"default_title\": \"Google Mail\", _// optional; shown in tooltip_ \"default_popup\": \"popup.html\" _// optional_ }**, ... } You can provide any size icon to be used in Chrome, and Chrome will select the closest one and scale it to the appropriate size to fill the 16-dip space. However, if the exact size isn't provided, this scaling can cause the icon to lose detail or look fuzzy. Since devices with less-common scale factors like 1.5x or 1.2x are becoming more common, you are encouraged to provide multiple sizes for your icons. This also ensures that if the icon display size is ever changed, you don't need to do any more work to provide different icons! The old syntax for registering the default icon is still supported: { \"name\": \"My extension\", ... **\"page_action\": { ... \"default_icon\": \"images/icon32.png\" _// optional_ _// equivalent to \"default_icon\": { \"32\": \"images/icon32.png\" }_ }**, ... } ## Parts of the UI Like browser actions, page actions can have an icon, a tooltip, and popup; they can't have badges, however. In addition, page actions can be grayed out. You can find information about icons, tooltips, and popups by reading about the [browser action UI](browserAction#ui). You make a page action appear and be grayed out using the [pageAction.show](/extensions/pageAction#method-show) and [pageAction.hide](/extensions/pageAction#method-hide) methods, respectively. By default, a page action appears grayed out. When you show it, you specify the tab in which the icon should appear. The icon remains visible until the tab is closed or starts displaying a different URL (because the user clicks a link, for example). ## Tips For the best visual impact, follow these guidelines: * **Do** use page actions for features that make sense for only a few pages. * **Don't** use page actions for features that make sense for most pages. Use [browser actions](browserAction) instead. * **Don't** constantly animate your icon. That's just annoying. ## Examples You can find simple examples of using page actions in the [examples/api/pageAction](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/pageAction/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [ImageDataType](#type-ImageDataType) | | Methods | | [show](#method-show) − `whale.pageAction.show(integer tabId)` | | [hide](#method-hide) − `whale.pageAction.hide(integer tabId)` | | [setTitle](#method-setTitle) − `whale.pageAction.setTitle(object details)` | | [getTitle](#method-getTitle) − `whale.pageAction.getTitle(object details, function callback)` | | [setIcon](#method-setIcon) − `whale.pageAction.setIcon(object details, function callback)` | | [setPopup](#method-setPopup) − `whale.pageAction.setPopup(object details)` | | [getPopup](#method-getPopup) − `whale.pageAction.getPopup(object details, function callback)` | | Events | | [onClicked](#event-onClicked) | ## Types ### ImageDataType Since Chrome 23. Pixel data for an image. Must be an ImageData object (for example, from a `canvas` element). ## Methods ### show `whale.pageAction.show(integer tabId)` Shows the page action. The page action is shown whenever the tab is selected. | Parameters | |---| | integer | tabId | The id of the tab for which you want to modify the page action. | ### hide `whale.pageAction.hide(integer tabId)` Hides the page action. Hidden page actions still appear in the Chrome toolbar, but are grayed out. | Parameters | |---| | integer | tabId | The id of the tab for which you want to modify the page action. | ### setTitle `whale.pageAction.setTitle(object details)` Sets the title of the page action. This is displayed in a tooltip over the page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | string | title | The tooltip string. | | ### getTitle `whale.pageAction.getTitle(object details, function callback)` Gets the title of the page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| Specify the tab to get the title from. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ### setIcon `whale.pageAction.setIcon(object details, function callback)` Sets the icon for the page action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the **path** or the **imageData** property must be specified. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | [ImageDataType](/extensions/pageAction#type-ImageDataType) or object | (optional) imageData | Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}' | | string or object | (optional) path | Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` * n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.path = {'16': foo}' | | integer | (optional) iconIndex | **Deprecated.** This argument is ignored. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### setPopup `whale.pageAction.setPopup(object details)` Sets the html document to be opened as a popup when the user clicks on the page action's icon. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab for which you want to modify the page action. | | string | popup | The html file to show in a popup. If set to the empty string (''), no popup is shown. | | ### getPopup `whale.pageAction.getPopup(object details, function callback)` Gets the html document set as the popup for this page action. | Parameters | |---| | object | details | | integer | tabId | |---|---| Specify the tab to get the popup from. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(string result) {...};` | string | result | | |---|---|---| | ## Events ### onClicked Fired when a page action icon is clicked. This event will not fire if the page action has a popup. #### addListener `whale.pageAction.onClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [tabs.Tab](/extensions/tabs#type-Tab) tab) {...};` | [tabs.Tab](/extensions/tabs#type-Tab) | tab | | |---|---|---| | "},"extensions-browsing-data.html":{"url":"extensions-browsing-data.html","title":"browsing-data","keywords":"","body":"whale.browsingData Description: Use the whale.browsingData API to remove browsing data from a user's local profile. Availability: Since Chrome 19. Permissions: \"browsingData\" ## Manifest You must declare the \"browsingData\" permission in the [extension manifest](manifest) to use this API. { \"name\": \"My extension\", ... **\"permissions\": [ \"browsingData\", ]**, ... } ## Usage The simplest use-case for this API is a a time-based mechanism for clearing a user's browsing data. Your code should provide a timestamp which indicates the historical date after which the user's browsing data should be removed. This timestamp is formatted as the number of milliseconds since the Unix epoch (which can be retrieved from a JavaScript `Date` object via the `getTime` method). For example, to clear all of a user's browsing data from the last week, you might write code as follows: var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.remove({ \"since\": oneWeekAgo }, { \"appcache\": true, \"cache\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"pluginData\": true, \"passwords\": true, \"webSQL\": true }, callback); The `whale.browsingData.remove` method allows you to remove various types of browsing data with a single call, and will be much faster than calling multiple more specific methods. If, however, you only want to clear one specific type of browsing data (cookies, for example), the more granular methods offer a readable alternative to a call filled with JSON. var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.removeCookies({ \"since\": oneWeekAgo }, callback); **Important**: Removing browsing data involves a good deal of heavy lifting in the background, and can take _tens of seconds_ to complete, depending on a user's profile. You should use the callback mechanism to keep your users up to date on the removal's status. ## Origin Types Adding an `originTypes` property to the API's options object allows you to specify which types of origins ought to be effected. Currently, origins are divided into three categories: * `unprotectedWeb` covers the general case of websites that users visit without taking any special action. If you don't specify an `originTypes`, the API defaults to removing data from unprotected web origins. * `protectedWeb` covers those web origins that have been installed as hosted applications. Installing [Angry Birds](https://whale.google.com/webstore/detail/aknpkdffaafgjchaibgeefbgmgeghloj), for example, protects the origin `http://whale.angrybirds.com`, and removes it from the `unprotectedWeb` category. Please do be careful when triggering deletion of data for these origins: make sure your users know what they're getting, as this will irrevocably remove their game data. No one wants to knock tiny pig houses over more often than necessary. * `extension` covers origins under the `chrome-extensions:` scheme. Removing extension data is, again, something you should be very careful about. We could adjust the previous example to remove only data from protected websites as follows: var callback = function () { // Do something clever here once data has been removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; whale.browsingData.remove({ \"since\": oneWeekAgo, **\"originTypes\": { \"protectedWeb\": true }** }, { \"appcache\": true, \"cache\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"serverBoundCertificates\": true, \"pluginData\": true, \"passwords\": true, \"webSQL\": true }, callback); **Seriously**: Be careful with `protectedWeb` and `extension`. These are destructive operations that your users will write angry email about if they're not well-informed about what to expect when your extension removes data on their behalf. ## Examples Samples for the `browsingData` API are available [on the samples page](samples#search:browsingData). ## Summary | Types | |---| | [RemovalOptions](#type-RemovalOptions) | | [DataTypeSet](#type-DataTypeSet) | | Methods | | [settings](#method-settings) − `whale.browsingData.settings(function callback)` | | [remove](#method-remove) − `whale.browsingData.remove( RemovalOptions options, DataTypeSet dataToRemove, function callback)` | | [removeAppcache](#method-removeAppcache) − `whale.browsingData.removeAppcache( RemovalOptions options, function callback)` | | [removeCache](#method-removeCache) − `whale.browsingData.removeCache( RemovalOptions options, function callback)` | | [removeCookies](#method-removeCookies) − `whale.browsingData.removeCookies( RemovalOptions options, function callback)` | | [removeDownloads](#method-removeDownloads) − `whale.browsingData.removeDownloads( RemovalOptions options, function callback)` | | [removeFileSystems](#method-removeFileSystems) − `whale.browsingData.removeFileSystems( RemovalOptions options, function callback)` | | [removeFormData](#method-removeFormData) − `whale.browsingData.removeFormData( RemovalOptions options, function callback)` | | [removeHistory](#method-removeHistory) − `whale.browsingData.removeHistory( RemovalOptions options, function callback)` | | [removeIndexedDB](#method-removeIndexedDB) − `whale.browsingData.removeIndexedDB( RemovalOptions options, function callback)` | | [removeLocalStorage](#method-removeLocalStorage) − `whale.browsingData.removeLocalStorage( RemovalOptions options, function callback)` | | [removePluginData](#method-removePluginData) − `whale.browsingData.removePluginData( RemovalOptions options, function callback)` | | [removePasswords](#method-removePasswords) − `whale.browsingData.removePasswords( RemovalOptions options, function callback)` | | [removeWebSQL](#method-removeWebSQL) − `whale.browsingData.removeWebSQL( RemovalOptions options, function callback)` | ## Types ### RemovalOptions Options that determine exactly what data will be removed. | properties | |---| | double | (optional) since | Remove data accumulated on or after this date, represented in milliseconds since the epoch (accessible via the `getTime` method of the JavaScript `Date` object). If absent, defaults to 0 (which would remove all browsing data). | | object | (optional) originTypes | Since Chrome 21. An object whose properties specify which origin types ought to be cleared. If this object isn't specified, it defaults to clearing only \"unprotected\" origins. Please ensure that you _really_ want to remove application data before adding 'protectedWeb' or 'extensions'. | boolean | (optional) unprotectedWeb | |---|---| Normal websites. | | boolean | (optional) protectedWeb | Websites that have been installed as hosted applications (be careful!). | | boolean | (optional) extension | Extensions and packaged applications a user has installed (be _really_ careful!). | | ### DataTypeSet Since Chrome 27. A set of data types. Missing data types are interpreted as `false`. | properties | |---| | boolean | (optional) appcache | Websites' appcaches. | | boolean | (optional) cache | The browser's cache. Note: when removing data, this clears the _entire_ cache: it is not limited to the range you specify. | | boolean | (optional) cookies | The browser's cookies. | | boolean | (optional) downloads | The browser's download list. | | boolean | (optional) fileSystems | Websites' file systems. | | boolean | (optional) formData | The browser's stored form data. | | boolean | (optional) history | The browser's history. | | boolean | (optional) indexedDB | Websites' IndexedDB data. | | boolean | (optional) localStorage | Websites' local storage data. | | boolean | (optional) serverBoundCertificates | Server-bound certificates. | | boolean | (optional) passwords | Stored passwords. | | boolean | (optional) pluginData | Plugins' data. | | boolean | (optional) serviceWorkers | Since Chrome 39. Service Workers. | | boolean | (optional) webSQL | Websites' WebSQL data. | ## Methods ### settings `whale.browsingData.settings(function callback)` Since Chrome 26. Reports which types of data are currently selected in the 'Clear browsing data' settings UI. Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object result) {...};` | object | result | |---|---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | |---|---|---| | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataToRemove | All of the types will be present in the result, with values of `true` if they are both selected to be removed and permitted to be removed, otherwise `false`. | | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataRemovalPermitted | All of the types will be present in the result, with values of `true` if they are permitted to be removed (e.g., by enterprise policy) and `false` if not. | | | ### remove `whale.browsingData.remove( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, [DataTypeSet](/extensions/browsingData#type-DataTypeSet) dataToRemove, function callback)` Clears various types of browsing data stored in a user's profile. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | [DataTypeSet](/extensions/browsingData#type-DataTypeSet) | dataToRemove | The set of data types to remove. | | function | (optional) callback | Called when deletion has completed. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeAppcache `whale.browsingData.removeAppcache( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' appcache data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' appcache data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeCache `whale.browsingData.removeCache( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's cache. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's cache has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeCookies `whale.browsingData.removeCookies( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's cookies and server-bound certificates modified within a particular timeframe. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's cookies and server-bound certificates have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeDownloads `whale.browsingData.removeDownloads( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's list of downloaded files (_not_ the downloaded files themselves). | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's list of downloaded files has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeFileSystems `whale.browsingData.removeFileSystems( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' file system data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' file systems have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeFormData `whale.browsingData.removeFormData( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's stored form data (autofill). | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's form data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeHistory `whale.browsingData.removeHistory( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's history. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's history has cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeIndexedDB `whale.browsingData.removeIndexedDB( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' IndexedDB data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' IndexedDB data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeLocalStorage `whale.browsingData.removeLocalStorage( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' local storage data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' local storage has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removePluginData `whale.browsingData.removePluginData( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears plugins' data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when plugins' data has been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removePasswords `whale.browsingData.removePasswords( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears the browser's stored passwords. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when the browser's passwords have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### removeWebSQL `whale.browsingData.removeWebSQL( [RemovalOptions](/extensions/browsingData#type-RemovalOptions) options, function callback)` Clears websites' WebSQL data. | Parameters | |---| | [RemovalOptions](/extensions/browsingData#type-RemovalOptions) | options | | | function | (optional) callback | Called when websites' WebSQL databases have been cleared. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | "},"extensions-page-capture.html":{"url":"extensions-page-capture.html","title":"page-capture","keywords":"","body":"whale.pageCapture Description: Use the whale.pageCapture API to save a tab as MHTML. Availability: Since Chrome 19. Permissions: \"pageCapture\" MHTML is a [standard format](http://tools.ietf.org/html/rfc2557) supported by most browsers. It encapsulates in a single file a page and all its resources (CSS files, images..). Note that for security reasons a MHTML file can only be loaded from the file system and that it can only be loaded in the main frame. ## Manifest You must declare the \"pageCapture\" permission in the [extension manifest](manifest) to use the pageCapture API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"pageCapture\" ]**, ... } ## Summary | Methods | |---| | [saveAsMHTML](#method-saveAsMHTML) − `whale.pageCapture.saveAsMHTML(object details, function callback)` | ## Methods ### saveAsMHTML `whale.pageCapture.saveAsMHTML(object details, function callback)` Saves the content of the tab with given id as MHTML. | Parameters | |---| | object | details | | integer | tabId | |---|---| The id of the tab to save as MHTML. | | | function | callback | Called when the MHTML has been generated. The _callback_ parameter should be a function that looks like this: `function(binary mhtmlData) {...};` | binary | (optional) mhtmlData | |---|---| The MHTML data as a Blob. | | "},"extensions-permissions.html":{"url":"extensions-permissions.html","title":"permissions","keywords":"","body":"whale.permissions Description: Use the whale.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary. Availability: Since Chrome 20. Learn More: Declaring permissions ## Implementing optional permissions ### Step 1: Decide which permissions are required and which are optional An extension can declare both required and optional permissions. In general, you should: * Use required permissions when they are needed for your extension’s basic functionality. * Use optional permissions when they are needed for optional features in your extension. Advantages of _required_ permissions: * **Fewer prompts:** An extension can prompt the user once to accept all permissions. * **Simpler development:** Required permissions are guaranteed to be present. Advantages of _optional_ permissions: * **Better security:** Extensions run with fewer permissions since users only enable permissions that are needed. * **Better information for users:** An extension can explain why it needs a particular permission when the user enables the relevant feature. * **Easier upgrades:** When you upgrade your extension, Chrome will not disable it for your users if the upgrade adds optional rather than required permissions. ### Step 2: Declare optional permissions in the manifest Declare optional permissions in your [extension manifest](manifest) with the `optional_permissions` key, using the same format as the [permissions](declare_permissions#manifest) field: { \"name\": \"My extension\", ... **\"optional_permissions\": [ \"tabs\", \"http://www.google.com/\" ],** ... } You can specify any of the following as optional [permissions](declare_permissions): * _host permissions_ * background * bookmarks * clipboardRead * clipboardWrite * contentSettings * contextMenus * cookies * debugger * history * idle * management * notifications * pageCapture * tabs * topSites * webNavigation * webRequest * webRequestBlocking If you want to request hosts that you only discover at runtime, include `\"http://*/\"` and/or `\"https://*/\"` as an `optional_permission`. This lets you specify any origin in [Permissions.origins](/extensions/permissions#property-Permissions-origins) as long as it has a matching scheme. ### Step 3: Request optional permissions Request the permissions from within a user gesture using `permissions.request()`: document.querySelector('#my-button').addEventListener('click', function(event) { // Permissions must be requested from inside a user gesture, like a button's // click handler. whale.permissions.request({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(granted) { // The callback argument will be true if the user granted the permissions. if (granted) { doSomething(); } else { doSomethingElse(); } }); }); Chrome prompts the user if adding the permissions results in different [warning messages](permission_warnings) than the user has already seen and accepted. For example, the previous code might result in a prompt like this: ![example permission confirmation prompt](/static/images/perms-optional.png) ### Step 4: Check the extension's current permissions To check whether your extension has a specific permission or set of permissions, use `permission.contains()`: whale.permissions.contains({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(result) { if (result) { // The extension has the permissions. } else { // The extension doesn't have the permissions. } }); ### Step 5: Remove the permissions You should remove permissions when you no longer need them. After a permission has been removed, calling `permissions.request()` usually adds the permission back without prompting the user. whale.permissions.remove({ permissions: ['tabs'], origins: ['http://www.google.com/'] }, function(removed) { if (removed) { // The permissions have been removed. } else { // The permissions have not been removed (e.g., you tried to remove // required permissions). } }); ## Summary | Types | |---| | [Permissions](#type-Permissions) | | Methods | | [getAll](#method-getAll) − `whale.permissions.getAll(function callback)` | | [contains](#method-contains) − `whale.permissions.contains( Permissions permissions, function callback)` | | [request](#method-request) − `whale.permissions.request( Permissions permissions, function callback)` | | [remove](#method-remove) − `whale.permissions.remove( Permissions permissions, function callback)` | | Events | | [onAdded](#event-onAdded) | | [onRemoved](#event-onRemoved) | ## Types ### Permissions | properties | |---| | array of string | (optional) permissions | List of named permissions (does not include hosts or origins). Anything listed here must appear in the `optional_permissions` list in the manifest. | | array of string | (optional) origins | List of origin permissions. Anything listed here must be a subset of a host that appears in the `optional_permissions` list in the manifest. For example, if `http://*.example.com/` or `http://*/` appears in `optional_permissions`, you can request an origin of `http://help.example.com/`. Any path is ignored. | ## Methods ### getAll `whale.permissions.getAll(function callback)` Gets the extension's current set of permissions. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The extension's active permissions. | | ### contains `whale.permissions.contains( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Checks if the extension has the specified permissions. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(boolean result) {...};` | boolean | result | |---|---| True if the extension has the specified permissions. | | ### request `whale.permissions.request( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Requests access to the specified permissions. These permissions must be defined in the optional_permissions field of the manifest. If there are any problems requesting the permissions, [runtime.lastError](/extensions/runtime#property-lastError) will be set. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean granted) {...};` | boolean | granted | |---|---| True if the user granted the specified permissions. | | ### remove `whale.permissions.remove( [Permissions](/extensions/permissions#type-Permissions) permissions, function callback)` Removes access to the specified permissions. If there are any problems removing the permissions, [runtime.lastError](/extensions/runtime#property-lastError) will be set. | Parameters | |---| | [Permissions](/extensions/permissions#type-Permissions) | permissions | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean removed) {...};` | boolean | removed | |---|---| True if the permissions were removed. | | ## Events ### onAdded Fired when the extension acquires new permissions. #### addListener `whale.permissions.onAdded.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The newly acquired permissions. | | ### onRemoved Fired when access to permissions has been removed from the extension. #### addListener `whale.permissions.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Permissions](/extensions/permissions#type-Permissions) permissions) {...};` | [Permissions](/extensions/permissions#type-Permissions) | permissions | |---|---| The permissions that have been removed. | | "},"extensions-power.html":{"url":"extensions-power.html","title":"power","keywords":"","body":"whale.power Description: Use the whale.power API to override the system's power management features. Availability: Since Chrome 27. Permissions: \"power\" ## Usage By default, operating systems dim the screen when users are inactive and eventually suspend the system. With the power API, an app or extension can keep the system awake. Using this API, you can specify the [Level](/extensions/power#type-Level) to which power management is disabled. The `\"system\"` level keeps the system active, but allows the screen to be dimmed or turned off. For example, a communication app can continue to receive messages while the screen is off. The `\"display\"` level keeps the screen and system active. E-book and presentation apps, for example, can keep the screen and system active while users read. When a user has more than one app or extension active, each with its own power level, the highest-precedence level takes effect; `\"display\"` always takes precedence over `\"system\"`. For example, if app A asks for `\"system\"` power management, and app B asks for `\"display\"`, `\"display\"` is used until app B is unloaded or releases its request. If app A is still active, `\"system\"` is then used. ## Summary | Types | |---| | [Level](#type-Level) | | Methods | | [requestKeepAwake](#method-requestKeepAwake) − `whale.power.requestKeepAwake( Level level)` | | [releaseKeepAwake](#method-releaseKeepAwake) − `whale.power.releaseKeepAwake()` | ## Types ### Level | Enum | |---| | `\"system\"` Prevent the system from sleeping in response to user inactivity. `\"display\"` Prevent the display from being turned off or dimmed or the system from sleeping in response to user inactivity. | ## Methods ### requestKeepAwake `whale.power.requestKeepAwake( [Level](/extensions/power#type-Level) level)` Requests that power management be temporarily disabled. |level| describes the degree to which power management should be disabled. If a request previously made by the same app is still active, it will be replaced by the new request. | Parameters | |---| | [Level](/extensions/power#type-Level) | level | | ### releaseKeepAwake `whale.power.releaseKeepAwake()` Releases a request previously made via requestKeepAwake(). "},"extensions-printer-provider.html":{"url":"extensions-printer-provider.html","title":"printer-provider","keywords":"","body":"whale.printerProvider Description: The whale.printerProvider API exposes events used by print manager to query printers controlled by extensions, to query their capabilities and to submit print jobs to these printers. Availability: Since Chrome 44. Permissions: \"printerProvider\" ## Summary | Types | |---| | [PrinterInfo](#type-PrinterInfo) | | Events | | [onGetPrintersRequested](#event-onGetPrintersRequested) | | [onGetUsbPrinterInfoRequested](#event-onGetUsbPrinterInfoRequested) | | [onGetCapabilityRequested](#event-onGetCapabilityRequested) | | [onPrintRequested](#event-onPrintRequested) | ## Types ### PrinterInfo | properties | |---| | string | id | Unique printer ID. | | string | name | Printer's human readable name. | | string | (optional) description | Printer's human readable description. | ## Events ### onGetPrintersRequested Event fired when print manager requests printers provided by extensions. #### addListener `whale.printerProvider.onGetPrintersRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(function resultCallback) {...};` | function | resultCallback | |---|---| Callback to return printer list. Every listener must call callback exactly once. The _resultCallback_ parameter should be a function that looks like this: `function(array of [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) printerInfo) {...};` | array of [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) | printerInfo | | |---|---|---| | | ### onGetUsbPrinterInfoRequested Since Chrome 45. Event fired when print manager requests information about a USB device that may be a printer. _Note:_ An application should not rely on this event being fired more than once per device. If a connected device is supported it should be returned in the [onGetPrintersRequested](/extensions/printerProvider#event-onGetPrintersRequested) event. #### addListener `whale.printerProvider.onGetUsbPrinterInfoRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [usb.Device](/extensions/#type-Device) device, function resultCallback) {...};` | [usb.Device](/extensions/#type-Device) | device | |---|---| The USB device. | | function | resultCallback | Callback to return printer info. The receiving listener must call callback exactly once. If the parameter to this callback is undefined that indicates that the application has determined that the device is not supported. The _resultCallback_ parameter should be a function that looks like this: `function( [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) printerInfo) {...};` | [PrinterInfo](/extensions/printerProvider#type-PrinterInfo) | (optional) printerInfo | | |---|---|---| | | ### onGetCapabilityRequested Event fired when print manager requests printer capabilities. #### addListener `whale.printerProvider.onGetCapabilityRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string printerId, function resultCallback) {...};` | string | printerId | |---|---| Unique ID of the printer whose capabilities are requested. | | function | resultCallback | Callback to return device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). The receiving listener must call callback exectly once. The _resultCallback_ parameter should be a function that looks like this: `function(object capabilities) {...};` | object | capabilities | |---|---| Device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). | | | ### onPrintRequested Event fired when print manager requests printing. #### addListener `whale.printerProvider.onPrintRequested.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object printJob, function resultCallback) {...};` | object | printJob | |---|---| The printing request parameters. | string | printerId | |---|---| ID of the printer which should handle the job. | | string | title | The print job title. | | object | ticket | Print ticket in [CJT format](https://developers.google.com/cloud-print/docs/cdd#cjt). | | string | contentType | The document content type. Supported formats are `\"application/pdf\"` and `\"image/pwg-raster\"`. | | Blob | document | Blob containing the document data to print. Format must match |contentType|. | | | function | resultCallback | Callback that should be called when the printing request is completed. The _resultCallback_ parameter should be a function that looks like this: `function(enum of `\"OK\"`, `\"FAILED\"`, `\"INVALID_TICKET\"`, or `\"INVALID_DATA\"` result) {...};` | enum of `\"OK\"`, `\"FAILED\"`, `\"INVALID_TICKET\"`, or `\"INVALID_DATA\"` | result | |---|---| OK Operation completed successfully. FAILED General failure. INVALID_TICKET Print ticket is invalid. For example, ticket is inconsistent with capabilities or extension is not able to handle all settings from the ticket. INVALID_DATA Document is invalid. For example, data may be corrupted or the format is incompatible with the extension. | | | "},"extensions-privacy.html":{"url":"extensions-privacy.html","title":"privacy","keywords":"","body":"whale.privacy Description: Use the whale.privacy API to control usage of the features in Chrome that can affect a user's privacy. This API relies on the ChromeSetting prototype of the type API for getting and setting Chrome's configuration. Availability: Since Chrome 20. Permissions: \"privacy\" The [Chrome Privacy Whitepaper](http://www.google.com/intl/en/landing/chrome/google-chrome-privacy-whitepaper.pdf) gives background detail regarding the features which this API can control. ## Manifest You must declare the \"privacy\" permission in your extension's [manifest](manifest) to use the API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"privacy\" ]**, ... } ## Usage Reading the current value of a Chrome setting is straightforward. You'll first need to find the property you're interested in, then you'll call `get()` on that object in order to retrieve its current value and your extension's level of control. For example, to determine if Chrome's Autofill feature is enabled, you'd write: whale.privacy.services.autofillEnabled.get({}, function(details) { if (details.value) console.log('Autofill is on!'); else console.log('Autofill is off!'); }); Changing the value of a setting is a little bit more complex, simply because you first must verify that your extension can control the setting. The user won't see any change to their settings if your extension toggles a setting that is either locked to a specific value by enterprise policies (`levelOfControl` will be set to \"not_controllable\"), or if another extension is controlling the value (`levelOfControl` will be set to \"controlled_by_other_extensions\"). The `set()` call will succeed, but the setting will be immediately overridden. As this might be confusing, it is advisable to warn the user when the settings they've chosen aren't practically applied. Full details about extensions' ability to control `ChromeSetting`s can be found under [`whale.types.ChromeSetting`](types#ChromeSetting). This means that you ought to use the `get()` method to determine your level of access, and then only call `set()` if your extension can grab control over the setting (in fact if your extension can't control the setting it's probably a good idea to visually disable the functionality to reduce user confusion): whale.privacy.services.autofillEnabled.get({}, function(details) { if (details.levelOfControl === 'controllable_by_this_extension') { whale.privacy.services.autofillEnabled.set({ value: true }, function() { if (whale.runtime.lastError === undefined) console.log(\"Hooray, it worked!\"); else console.log(\"Sadness!\", whale.runtime.lastError); }); } }); If you're interested in changes to a setting's value, add a listener to its `onChange` event. Among other uses, this will allow you to warn the user if a more recently installed extension grabs control of a setting, or if enterprise policy overrides your control. To listen for changes to Autofill's status, for example, the following code would suffice: whale.privacy.services.autofillEnabled.onChange.addListener( function (details) { // The new value is stored in `details.value`, the new level of control // in `details.levelOfControl`, and `details.incognitoSpecific` will be // `true` if the value is specific to Incognito mode. }); ## Examples For example code, see the [Privacy API samples](samples#search:privacy). ## Summary | Types | |---| | [IPHandlingPolicy](#type-IPHandlingPolicy) | | Properties | | [network](#property-network) | | [services](#property-services) | | [websites](#property-websites) | ## Types ### IPHandlingPolicy The IP handling policy of WebRTC. | Enum | |---| | `\"default\"`, `\"default_public_and_private_interfaces\"`, `\"default_public_interface_only\"`, or `\"disable_non_proxied_udp\"` | ## Properties | object | `whale.privacy.network` | Settings that influence Chrome's handling of network connections in general. | Properties | |---| | --- | | object | networkPredictionEnabled | If enabled, Chrome attempts to speed up your web browsing experience by pre-resolving DNS entries, prerendering sites (``), and preemptively opening TCP and SSL connections to servers. This preference's value is a boolean, defaulting to `true`. | | object | webRTCMultipleRoutesEnabled | **Deprecated** since Chrome 48. Please use privacy.network.webRTCIPHandlingPolicy. This remains for backward compatibility in this release and will be removed in the future. If enabled, Chrome will explore all possible routing options when using WebRTC to find the most performant path, possibly exposing user's private IP address. Otherwise, WebRTC traffic will be routed the same way as regular HTTP. This preference's value is a boolean, defaulting to `true`. | | object | webRTCNonProxiedUdpEnabled | **Deprecated** since Chrome 48. Please use privacy.network.webRTCIPHandlingPolicy. This remains for backward compatibility in this release and will be removed in the future. If enabled, Chrome is allowed to use non-proxied UDP to connect to peers or TURN servers when using WebRTC. Since most proxy servers don't handle UDP, using UDP possibly exposes user's IP address. Turning this off effectively forces WebRTC to only use TCP for now, until UDP proxy support is available in Chrome and such proxies are widely deployed. As a result, it also might hurt media performance and increase the load for proxy servers. This preference's value is a boolean, defaulting to `true`. | | object | webRTCIPHandlingPolicy | Since Chrome 48. Allow users to specify the media performance/privacy tradeoffs which impacts how WebRTC traffic will be routed and how much local address information is exposed. This preference's value is of type IPHandlingPolicy, defaulting to `default`. | | | object | `whale.privacy.services` | Settings that enable or disable features that require third-party network services provided by Google and your default search provider. | Properties | |---| | --- | | object | alternateErrorPagesEnabled | If enabled, Chrome uses a web service to help resolve navigation errors. This preference's value is a boolean, defaulting to `true`. | | object | autofillEnabled | If enabled, Chrome offers to automatically fill in forms. This preference's value is a boolean, defaulting to `true`. | | object | hotwordSearchEnabled | Since Chrome 42. If enabled, Chrome will enable 'OK, Google' to start a voice search. This preference's value is a boolean, defaulting to `true`. | | object | passwordSavingEnabled | Since Chrome 38. If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to `true`. | | object | safeBrowsingEnabled | If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to `true`. | | object | safeBrowsingExtendedReportingEnabled | Since Chrome 42. If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to `false`. | | object | searchSuggestEnabled | If enabled, Chrome sends the text you type into the Omnibox to your default search engine, which provides predictions of websites and searches that are likely completions of what you've typed so far. This preference's value is a boolean, defaulting to `true`. | | object | spellingServiceEnabled | If enabled, Chrome uses a web service to help correct spelling errors. This preference's value is a boolean, defaulting to `false`. | | object | translationServiceEnabled | If enabled, Chrome offers to translate pages that aren't in a language you read. This preference's value is a boolean, defaulting to `true`. | | | object | `whale.privacy.websites` | Settings that determine what information Chrome makes available to websites. | Properties | |---| | --- | | object | thirdPartyCookiesAllowed | If disabled, Chrome blocks third-party sites from setting cookies. The value of this preference is of type boolean, and the default value is `true`. | | object | hyperlinkAuditingEnabled | If enabled, Chrome sends auditing pings when requested by a website (``). The value of this preference is of type boolean, and the default value is `true`. | | object | referrersEnabled | If enabled, Chrome sends `referer` headers with your requests. Yes, the name of this preference doesn't match the misspelled header. No, we're not going to change it. The value of this preference is of type boolean, and the default value is `true`. | | object | protectedContentEnabled | Since Chrome 21. **Available on Windows and ChromeOS only**: If enabled, Chrome provides a unique ID to plugins in order to run protected content. The value of this preference is of type boolean, and the default value is `true`. | | "},"extensions-font-settings.html":{"url":"extensions-font-settings.html","title":"font-settings","keywords":"","body":"whale.fontSettings Description: Use the whale.fontSettings API to manage Chrome's font settings. Availability: Since Chrome 22. Permissions: \"fontSettings\" ## Manifest To use the Font Settings API, you must declare the \"fontSettings\" permission in the [extension manifest](manifest). For example: { \"name\": \"My Font Settings Extension\", \"description\": \"Customize your fonts\", \"version\": \"0.2\", **\"permissions\": [ \"fontSettings\" ]**, ... } ## Generic Font Families and Scripts Chrome allows for some font settings to depend on certain generic font families and language scripts. For example, the font used for sans-serif Simplified Chinese may be different than the font used for serif Japanese. The generic font families supported by Chrome are based on [CSS generic font families](http://www.w3.org/TR/CSS21/fonts.html#generic-font-families) and are listed in the API reference below. When a webpage specifies a generic font family, Chrome selects the font based on the corresponding setting. If no generic font family is specified, Chrome uses the setting for the \"standard\" generic font family. When a webpage specifies a language, Chrome selects the font based on the setting for the corresponding language script. If no language is specified, Chrome uses the setting for the default, or global, script. The supported language scripts are specified by ISO 15924 script code and listed in the API reference below. Technically, Chrome settings are not strictly per-script but also depend on language. For example, Chrome chooses the font for Cyrillic (ISO 15924 script code \"Cyrl\") when a webpage specifies the Russian language, and uses this font not just for Cyrillic script but for everything the font covers, such as Latin. ## Examples The following code gets the standard font for Arabic. whale.fontSettings.getFont( { genericFamily: 'standard', script: 'Arab' }, function(details) { console.log(details.fontId); } ); The next snippet sets the sans-serif font for Japanese. whale.fontSettings.setFont( { genericFamily: 'sansserif', script: 'Jpan', fontId: 'MS PGothic' } ); You can find a sample extension using the Font Settings API in the [examples/api/fontSettings](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/fontSettings/) directory. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [FontName](#type-FontName) | | [ScriptCode](#type-ScriptCode) | | [GenericFamily](#type-GenericFamily) | | [LevelOfControl](#type-LevelOfControl) | | Methods | | [clearFont](#method-clearFont) − `whale.fontSettings.clearFont(object details, function callback)` | | [getFont](#method-getFont) − `whale.fontSettings.getFont(object details, function callback)` | | [setFont](#method-setFont) − `whale.fontSettings.setFont(object details, function callback)` | | [getFontList](#method-getFontList) − `whale.fontSettings.getFontList(function callback)` | | [clearDefaultFontSize](#method-clearDefaultFontSize) − `whale.fontSettings.clearDefaultFontSize(object details, function callback)` | | [getDefaultFontSize](#method-getDefaultFontSize) − `whale.fontSettings.getDefaultFontSize(object details, function callback)` | | [setDefaultFontSize](#method-setDefaultFontSize) − `whale.fontSettings.setDefaultFontSize(object details, function callback)` | | [clearDefaultFixedFontSize](#method-clearDefaultFixedFontSize) − `whale.fontSettings.clearDefaultFixedFontSize(object details, function callback)` | | [getDefaultFixedFontSize](#method-getDefaultFixedFontSize) − `whale.fontSettings.getDefaultFixedFontSize(object details, function callback)` | | [setDefaultFixedFontSize](#method-setDefaultFixedFontSize) − `whale.fontSettings.setDefaultFixedFontSize(object details, function callback)` | | [clearMinimumFontSize](#method-clearMinimumFontSize) − `whale.fontSettings.clearMinimumFontSize(object details, function callback)` | | [getMinimumFontSize](#method-getMinimumFontSize) − `whale.fontSettings.getMinimumFontSize(object details, function callback)` | | [setMinimumFontSize](#method-setMinimumFontSize) − `whale.fontSettings.setMinimumFontSize(object details, function callback)` | | Events | | [onFontChanged](#event-onFontChanged) | | [onDefaultFontSizeChanged](#event-onDefaultFontSizeChanged) | | [onDefaultFixedFontSizeChanged](#event-onDefaultFixedFontSizeChanged) | | [onMinimumFontSizeChanged](#event-onMinimumFontSizeChanged) | ## Types ### FontName Represents a font name. | properties | |---| | string | fontId | The font ID. | | string | displayName | The display name of the font. | ### ScriptCode An ISO 15924 script code. The default, or global, script is represented by script code \"Zyyy\". | Enum | |---| | `\"Afak\"`, `\"Arab\"`, `\"Armi\"`, `\"Armn\"`, `\"Avst\"`, `\"Bali\"`, `\"Bamu\"`, `\"Bass\"`, `\"Batk\"`, `\"Beng\"`, `\"Blis\"`, `\"Bopo\"`, `\"Brah\"`, `\"Brai\"`, `\"Bugi\"`, `\"Buhd\"`, `\"Cakm\"`, `\"Cans\"`, `\"Cari\"`, `\"Cham\"`, `\"Cher\"`, `\"Cirt\"`, `\"Copt\"`, `\"Cprt\"`, `\"Cyrl\"`, `\"Cyrs\"`, `\"Deva\"`, `\"Dsrt\"`, `\"Dupl\"`, `\"Egyd\"`, `\"Egyh\"`, `\"Egyp\"`, `\"Elba\"`, `\"Ethi\"`, `\"Geor\"`, `\"Geok\"`, `\"Glag\"`, `\"Goth\"`, `\"Gran\"`, `\"Grek\"`, `\"Gujr\"`, `\"Guru\"`, `\"Hang\"`, `\"Hani\"`, `\"Hano\"`, `\"Hans\"`, `\"Hant\"`, `\"Hebr\"`, `\"Hluw\"`, `\"Hmng\"`, `\"Hung\"`, `\"Inds\"`, `\"Ital\"`, `\"Java\"`, `\"Jpan\"`, `\"Jurc\"`, `\"Kali\"`, `\"Khar\"`, `\"Khmr\"`, `\"Khoj\"`, `\"Knda\"`, `\"Kpel\"`, `\"Kthi\"`, `\"Lana\"`, `\"Laoo\"`, `\"Latf\"`, `\"Latg\"`, `\"Latn\"`, `\"Lepc\"`, `\"Limb\"`, `\"Lina\"`, `\"Linb\"`, `\"Lisu\"`, `\"Loma\"`, `\"Lyci\"`, `\"Lydi\"`, `\"Mand\"`, `\"Mani\"`, `\"Maya\"`, `\"Mend\"`, `\"Merc\"`, `\"Mero\"`, `\"Mlym\"`, `\"Moon\"`, `\"Mong\"`, `\"Mroo\"`, `\"Mtei\"`, `\"Mymr\"`, `\"Narb\"`, `\"Nbat\"`, `\"Nkgb\"`, `\"Nkoo\"`, `\"Nshu\"`, `\"Ogam\"`, `\"Olck\"`, `\"Orkh\"`, `\"Orya\"`, `\"Osma\"`, `\"Palm\"`, `\"Perm\"`, `\"Phag\"`, `\"Phli\"`, `\"Phlp\"`, `\"Phlv\"`, `\"Phnx\"`, `\"Plrd\"`, `\"Prti\"`, `\"Rjng\"`, `\"Roro\"`, `\"Runr\"`, `\"Samr\"`, `\"Sara\"`, `\"Sarb\"`, `\"Saur\"`, `\"Sgnw\"`, `\"Shaw\"`, `\"Shrd\"`, `\"Sind\"`, `\"Sinh\"`, `\"Sora\"`, `\"Sund\"`, `\"Sylo\"`, `\"Syrc\"`, `\"Syre\"`, `\"Syrj\"`, `\"Syrn\"`, `\"Tagb\"`, `\"Takr\"`, `\"Tale\"`, `\"Talu\"`, `\"Taml\"`, `\"Tang\"`, `\"Tavt\"`, `\"Telu\"`, `\"Teng\"`, `\"Tfng\"`, `\"Tglg\"`, `\"Thaa\"`, `\"Thai\"`, `\"Tibt\"`, `\"Tirh\"`, `\"Ugar\"`, `\"Vaii\"`, `\"Visp\"`, `\"Wara\"`, `\"Wole\"`, `\"Xpeo\"`, `\"Xsux\"`, `\"Yiii\"`, `\"Zmth\"`, `\"Zsym\"`, or `\"Zyyy\"` | ### GenericFamily A CSS generic font family. | Enum | |---| | `\"standard\"`, `\"sansserif\"`, `\"serif\"`, `\"fixed\"`, `\"cursive\"`, or `\"fantasy\"` | ### LevelOfControl One of not_controllable: cannot be controlled by any extension controlled_by_other_extensions: controlled by extensions with higher precedence controllable_by_this_extension: can be controlled by this extension controlled_by_this_extension: controlled by this extension | Enum | |---| | `\"not_controllable\"`, `\"controlled_by_other_extensions\"`, `\"controllable_by_this_extension\"`, or `\"controlled_by_this_extension\"` | ## Methods ### clearFont `whale.fontSettings.clearFont(object details, function callback)` Clears the font set by this extension, if any. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script for which the font should be cleared. If omitted, the global script font setting is cleared. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be cleared. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getFont `whale.fontSettings.getFont(object details, function callback)` Gets the font for a given script and generic font family. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script for which the font should be retrieved. If omitted, the font setting for the global script (script code \"Zyyy\") is retrieved. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be retrieved. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | fontId | |---|---| The font ID. Rather than the literal font ID preference value, this may be the ID of the font that the system resolves the preference value to. So, fontId can differ from the font passed to `setFont`, if, for example, the font is not available on the system. The empty string signifies fallback to the global script font setting. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setFont `whale.fontSettings.setFont(object details, function callback)` Sets the font for a given script and generic font family. | Parameters | |---| | object | details | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | |---|---| The script code which the font should be set. If omitted, the font setting for the global script (script code \"Zyyy\") is set. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font should be set. | | string | fontId | The font ID. The empty string means to fallback to the global script font setting. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getFontList `whale.fontSettings.getFontList(function callback)` Gets a list of fonts on the system. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [FontName](/extensions/fontSettings#type-FontName) results) {...};` | array of [FontName](/extensions/fontSettings#type-FontName) | results | | |---|---|---| | ### clearDefaultFontSize `whale.fontSettings.clearDefaultFontSize(object details, function callback)` Clears the default font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getDefaultFontSize `whale.fontSettings.getDefaultFontSize(object details, function callback)` Gets the default font size. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setDefaultFontSize `whale.fontSettings.setDefaultFontSize(object details, function callback)` Sets the default font size. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### clearDefaultFixedFontSize `whale.fontSettings.clearDefaultFixedFontSize(object details, function callback)` Clears the default fixed font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getDefaultFixedFontSize `whale.fontSettings.getDefaultFixedFontSize(object details, function callback)` Gets the default size for fixed width fonts. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setDefaultFixedFontSize `whale.fontSettings.setDefaultFixedFontSize(object details, function callback)` Sets the default size for fixed width fonts. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### clearMinimumFontSize `whale.fontSettings.clearMinimumFontSize(object details, function callback)` Clears the minimum font size set by this extension, if any. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### getMinimumFontSize `whale.fontSettings.getMinimumFontSize(object details, function callback)` Gets the minimum font size. | Parameters | |---| | object | (optional) details | This parameter is currently unused. | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### setMinimumFontSize `whale.fontSettings.setMinimumFontSize(object details, function callback)` Sets the minimum font size. | Parameters | |---| | object | details | | integer | pixelSize | |---|---| The font size in pixels. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onFontChanged Fired when a font setting changes. #### addListener `whale.fontSettings.onFontChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | string | fontId | |---|---| The font ID. See the description in `getFont`. | | [ScriptCode](/extensions/fontSettings#type-ScriptCode) | (optional) script | The script code for which the font setting has changed. | | [GenericFamily](/extensions/fontSettings#type-GenericFamily) | genericFamily | The generic font family for which the font setting has changed. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onDefaultFontSizeChanged Fired when the default font size setting changes. #### addListener `whale.fontSettings.onDefaultFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onDefaultFixedFontSizeChanged Fired when the default fixed font size setting changes. #### addListener `whale.fontSettings.onDefaultFixedFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | ### onMinimumFontSizeChanged Fired when the minimum font size setting changes. #### addListener `whale.fontSettings.onMinimumFontSizeChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object details) {...};` | object | details | |---|---| | integer | pixelSize | |---|---| The font size in pixels. | | [LevelOfControl](/extensions/fontSettings#type-LevelOfControl) | levelOfControl | The level of control this extension has over the setting. | | | "},"extensions-gcm.html":{"url":"extensions-gcm.html","title":"gcm","keywords":"","body":"whale.gcm Description: Use whale.gcm to enable apps and extensions to send and receive messages through the Google Cloud Messaging Service. Availability: Since Chrome 35. Permissions: \"gcm\" Learn More: Implementing GCM Client on Chrome ## Summary | Properties | |---| | [MAX_MESSAGE_SIZE](#property-MAX_MESSAGE_SIZE) | | Methods | | [register](#method-register) − `whale.gcm.register(array of string senderIds, function callback)` | | [unregister](#method-unregister) − `whale.gcm.unregister(function callback)` | | [send](#method-send) − `whale.gcm.send(object message, function callback)` | | Events | | [onMessage](#event-onMessage) | | [onMessagesDeleted](#event-onMessagesDeleted) | | [onSendError](#event-onSendError) | ## Properties | `4,096` | `whale.gcm.MAX_MESSAGE_SIZE` | The maximum size (in bytes) of all key/value pairs in a message. | |---|---|---| ## Methods ### register `whale.gcm.register(array of string senderIds, function callback)` Registers the application with GCM. The registration ID will be returned by the `callback`. If `register` is called again with the same list of `senderIds`, the same registration ID will be returned. | Parameters | |---| | array of string | senderIds | A list of server IDs that are allowed to send messages to the application. It should contain at least one and no more than 100 sender IDs. | | function | callback | Function called when registration completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when `registrationId` is empty. The _callback_ parameter should be a function that looks like this: `function(string registrationId) {...};` | string | registrationId | |---|---| A registration ID assigned to the application by the GCM. | | ### unregister `whale.gcm.unregister(function callback)` Unregisters the application from GCM. | Parameters | |---| | function | callback | A function called after the unregistration completes. Unregistration was successful if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ### send `whale.gcm.send(object message, function callback)` Sends a message according to its contents. | Parameters | |---| | object | message | A message to send to the other party via GCM. | string | destinationId | |---|---| The ID of the server to send the message to as assigned by [Google API Console](https://code.google.com/apis/console). | | string | messageId | The ID of the message. It must be unique for each message in scope of the applications. See the [Cloud Messaging documentation](cloudMessaging#send_messages) for advice for picking and handling an ID. | | integer | (optional) timeToLive | Time-to-live of the message in seconds. If it is not possible to send the message within that time, an onSendError event will be raised. A time-to-live of 0 indicates that the message should be sent immediately or fail if it's not possible. The maximum and a default value of time-to-live is 86400 seconds (1 day). | | object | data | Message data to send to the server. Case-insensitive `goog.` and `google`, as well as case-sensitive `collapse_key` are disallowed as key prefixes. Sum of all key/value pairs should not exceed [gcm.MAX_MESSAGE_SIZE](/extensions/gcm#property-MAX_MESSAGE_SIZE). | | | function | callback | A function called after the message is successfully queued for sending. [runtime.lastError](/extensions/runtime#property-lastError) should be checked, to ensure a message was sent without problems. The _callback_ parameter should be a function that looks like this: `function(string messageId) {...};` | string | messageId | |---|---| The ID of the message that the callback was issued for. | | ## Events ### onMessage Fired when a message is received through GCM. #### addListener `whale.gcm.onMessage.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object message) {...};` | object | message | |---|---| A message received from another party via GCM. | object | data | |---|---| The message data. | | string | (optional) from | Since Chrome 41. The sender who issued the message. | | string | (optional) collapseKey | The collapse key of a message. See [Collapsible Messages](cloudMessaging#collapsible_messages) section of Cloud Messaging documentation for details. | | | ### onMessagesDeleted Fired when a GCM server had to delete messages sent by an app server to the application. See [Messages deleted event](cloudMessaging#messages_deleted_event) section of Cloud Messaging documentation for details on handling this event. #### addListener `whale.gcm.onMessagesDeleted.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### onSendError Fired when it was not possible to send a message to the GCM server. #### addListener `whale.gcm.onSendError.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object error) {...};` | object | error | |---|---| An error that occured while trying to send the message either in Chrome or on the GCM server. Application can retry sending the message with a reasonable backoff and possibly longer time-to-live. | string | errorMessage | |---|---| The error message describing the problem. | | string | (optional) messageId | The ID of the message with this error, if error is related to a specific message. | | object | details | Additional details related to the error, when available. | | | "},"extensions-history.html":{"url":"extensions-history.html","title":"history","keywords":"","body":"whale.history Description: Use the whale.history API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see Override Pages. Availability: Since Chrome 20. Permissions: \"history\" ## Manifest You must declare the \"history\" permission in the [extension manifest](manifest) to use the history API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"history\" ]**, ... } ## Transition types The history API uses a _transition type_ to describe how the browser navigated to a particular URL on a particular visit. For example, if a user visits a page by clicking a link on another page, the transition type is \"link\". The following table describes each transition type. | Transition type | Description | |---|---| | \"link\" | The user got to this page by clicking a link on another page. | | \"typed\" | The user got this page by typing the URL in the address bar. Also used for other explicit navigation actions. See also [generated](#tt_generated), which is used for cases where the user selected a choice that didn't look at all like a URL. | | \"auto_bookmark\" | The user got to this page through a suggestion in the UI — for example, through a menu item. | | \"auto_subframe\" | Subframe navigation. This is any content that is automatically loaded in a non-top-level frame. For example, if a page consists of several frames containing ads, those ad URLs have this transition type. The user may not even realize the content in these pages is a separate frame, and so may not care about the URL (see also [manual_subframe](#tt_manual_subframe)). | | \"manual_subframe\" | For subframe navigations that are explicitly requested by the user and generate new navigation entries in the back/forward list. An explicitly requested frame is probably more important than an automatically loaded frame because the user probably cares about the fact that the requested frame was loaded. | | \"generated\" | The user got to this page by typing in the address bar and selecting an entry that did not look like a URL. For example, a match might have the URL of a Google search result page, but it might appear to the user as \"Search Google for ...\". These are not quite the same as [typed](#tt_typed) navigations because the user didn't type or see the destination URL. See also [keyword](#tt_keyword). | | \"auto_toplevel\" | The page was specified in the command line or is the start page. | | \"form_submit\" | The user filled out values in a form and submitted it. Note that in some situations — such as when a form uses script to submit contents — submitting a form does not result in this transition type. | | \"reload\" | The user reloaded the page, either by clicking the reload button or by pressing Enter in the address bar. Session restore and Reopen closed tab use this transition type, too. | | \"keyword\" | The URL was generated from a replaceable keyword other than the default search provider. See also [keyword_generated](#tt_keyword_generated). | | \"keyword_generated\" | Corresponds to a visit generated for a keyword. See also [keyword](#tt_keyword). | ## Examples For examples of using this API, see the [history sample directory](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/history/) and the [history API test directory](https://chromium.googlesource.com/chromium/src/+/master/chrome/test/data/extensions/api_test/history/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [TransitionType](#type-TransitionType) | | [HistoryItem](#type-HistoryItem) | | [VisitItem](#type-VisitItem) | | Methods | | [search](#method-search) − `whale.history.search(object query, function callback)` | | [getVisits](#method-getVisits) − `whale.history.getVisits(object details, function callback)` | | [addUrl](#method-addUrl) − `whale.history.addUrl(object details, function callback)` | | [deleteUrl](#method-deleteUrl) − `whale.history.deleteUrl(object details, function callback)` | | [deleteRange](#method-deleteRange) − `whale.history.deleteRange(object range, function callback)` | | [deleteAll](#method-deleteAll) − `whale.history.deleteAll(function callback)` | | Events | | [onVisited](#event-onVisited) | | [onVisitRemoved](#event-onVisitRemoved) | ## Types ### TransitionType The [transition type](#transition_types) for this visit from its referrer. | Enum | |---| | `\"link\"`, `\"typed\"`, `\"auto_bookmark\"`, `\"auto_subframe\"`, `\"manual_subframe\"`, `\"generated\"`, `\"auto_toplevel\"`, `\"form_submit\"`, `\"reload\"`, `\"keyword\"`, or `\"keyword_generated\"` | ### HistoryItem An object encapsulating one result of a history query. | properties | |---| | string | id | The unique identifier for the item. | | string | (optional) url | The URL navigated to by a user. | | string | (optional) title | The title of the page when it was last loaded. | | double | (optional) lastVisitTime | When this page was last loaded, represented in milliseconds since the epoch. | | integer | (optional) visitCount | The number of times the user has navigated to this page. | | integer | (optional) typedCount | The number of times the user has navigated to this page by typing in the address. | ### VisitItem An object encapsulating one visit to a URL. | properties | |---| | string | id | The unique identifier for the item. | | string | visitId | The unique identifier for this visit. | | double | (optional) visitTime | When this visit occurred, represented in milliseconds since the epoch. | | string | referringVisitId | The visit ID of the referrer. | | [TransitionType](/extensions/history#type-TransitionType) | transition | The [transition type](#transition_types) for this visit from its referrer. | ## Methods ### search `whale.history.search(object query, function callback)` Searches the history for the last visit time of each page matching the query. | Parameters | |---| | object | query | | string | text | |---|---| A free-text query to the history service. Leave empty to retrieve all pages. | | double | (optional) startTime | Limit results to those visited after this date, represented in milliseconds since the epoch. If not specified, this defaults to 24 hours in the past. | | double | (optional) endTime | Limit results to those visited before this date, represented in milliseconds since the epoch. | | integer | (optional) maxResults | The maximum number of results to retrieve. Defaults to 100. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [HistoryItem](/extensions/history#type-HistoryItem) results) {...};` | array of [HistoryItem](/extensions/history#type-HistoryItem) | results | | |---|---|---| | ### getVisits `whale.history.getVisits(object details, function callback)` Retrieves information about visits to a URL. | Parameters | |---| | object | details | | string | url | |---|---| The URL for which to retrieve visit information. It must be in the format as returned from a call to history.search. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [VisitItem](/extensions/history#type-VisitItem) results) {...};` | array of [VisitItem](/extensions/history#type-VisitItem) | results | | |---|---|---| | ### addUrl `whale.history.addUrl(object details, function callback)` Adds a URL to the history at the current time with a [transition type](#transition_types) of \"link\". | Parameters | |---| | object | details | | string | url | |---|---| The URL to add. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteUrl `whale.history.deleteUrl(object details, function callback)` Removes all occurrences of the given URL from the history. | Parameters | |---| | object | details | | string | url | |---|---| The URL to remove. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteRange `whale.history.deleteRange(object range, function callback)` Removes all items within the specified date range from the history. Pages will not be removed from the history unless all visits fall within the range. | Parameters | |---| | object | range | | double | startTime | |---|---| Items added to history after this date, represented in milliseconds since the epoch. | | double | endTime | Items added to history before this date, represented in milliseconds since the epoch. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ### deleteAll `whale.history.deleteAll(function callback)` Deletes all items from the history. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | ## Events ### onVisited Fired when a URL is visited, providing the HistoryItem data for that URL. This event fires before the page has loaded. #### addListener `whale.history.onVisited.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [HistoryItem](/extensions/history#type-HistoryItem) result) {...};` | [HistoryItem](/extensions/history#type-HistoryItem) | result | | |---|---|---| | ### onVisitRemoved Fired when one or more URLs are removed from the history service. When all visits have been removed the URL is purged from history. #### addListener `whale.history.onVisitRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object removed) {...};` | object | removed | |---|---| | boolean | allHistory | |---|---| True if all history was removed. If true, then urls will be empty. | | array of string | (optional) urls | | | | "},"extensions-i-18-n.html":{"url":"extensions-i-18-n.html","title":"i-18-n","keywords":"","body":"whale.i18n Description: Use the whale.i18n infrastructure to implement internationalization across your whole app or extension. Availability: Since Chrome 20. Content Scripts: Fully supported. Learn more You need to put all of its user-visible strings into a file named [`messages.json`](i18n-messages). Each time you add a new locale, you add a messages file under a directory named `_locales/_localeCode_`, where _localeCode_ is a code such as `en` for English. Here's the file hierarchy for an internationalized extension that supports English (`en`), Spanish (`es`), and Korean (`ko`): ![In the extension directory: manifest.json, *.html, *.js, _locales directory. In the _locales directory: en, es, and ko directories, each with a messages.json file.](/static/images/i18n-hierarchy.gif) ## How to support multiple languages Say you have an extension with the files shown in the following figure: ![A manifest.json file and a file with JavaScript. The .json file has \"name\": \"Hello World\". The JavaScript file has title = \"Hello World\";](/static/images/i18n-before.gif) To internationalize this extension, you name each user-visible string and put it into a messages file. The extension's manifest, CSS files, and JavaScript code use each string's name to get its localized version. Here's what the extension looks like when it's internationalized (note that it still has only English strings): ![In the manifest.json file, \"Hello World\" has been changed to \"__MSG_extName__\", and a new \"default_locale\" item has the value \"en\". In the JavaScript file, \"Hello World\" has been changed to whale.i18n.getMessage(\"extName\"). A new file named _locales/en/messages.json defines \"extName\".](/static/images/i18n-after-1.gif) **Important:** If an extension has a `_locales` directory, the [manifest](manifest) **must** define \"default_locale\". Some notes about internationalizing: * You can use any of the [supported locales](#overview-locales). If you use an unsupported locale, Google Chrome ignores it. * In `manifest.json` and CSS files, refer to a string named _messagename_ like this: __MSG__messagename___ * In your extension or app's JavaScript code, refer to a string named _messagename_ like this: whale.i18n.getMessage(\"_messagename_\") * In each call to `getMessage()`, you can supply up to 9 strings to be included in the message. See [Examples: getMessage](#examples-getMessage) for details. * Some messages, such as `@@bidi_dir` and `@@ui_locale`, are provided by the internationalization system. See the [Predefined messages](#overview-predefined) section for a full list of predefined message names. * In `messages.json`, each user-visible string has a name, a \"message\" item, and an optional \"description\" item. The name is a key such as \"extName\" or \"search_string\" that identifies the string. The \"message\" specifies the value of the string in this locale. The optional \"description\" provides help to translators, who might not be able to see how the string is used in your extension. For example: { \"search_string\": { \"message\": \"hello%20world\", \"description\": \"The string we search for. Put %20 between words that go together.\" }, ... } For more information, see [Formats: Locale-Specific Messages](i18n-messages). Once an extension or app is internationalized, translating it is simple. You copy `messages.json`, translate it, and put the copy into a new directory under `_locales`. For example, to support Spanish, just put a translated copy of `messages.json` under `_locales/es`. The following figure shows the previous extension with a new Spanish translation. ![This looks the same as the previous figure, but with a new file at _locales/es/messages.json that contains a Spanish translation of the messages.](/static/images/i18n-after-2.gif) ## Predefined messages The internationalization system provides a few predefined messages to help you localize. These include `@@ui_locale`, so you can detect the current UI locale, and a few `@@bidi_...` messages that let you detect the text direction. The latter messages have similar names to constants in the [gadgets BIDI (bi-directional) API](http://code.google.com/apis/gadgets/docs/i18n.html#BIDI). The special message `@@extension_id` can be used in the CSS and JavaScript files, whether or not the extension or app is localized. This message doesn't work in manifest files. The following table describes each predefined message. | Message name | Description | |---|---| | `@@extension_id` | The extension or app ID; you might use this string to construct URLs for resources inside the extension. Even unlocalized extensions can use this message. **Note:** You can't use this message in a manifest file. | | `@@ui_locale` | The current locale; you might use this string to construct locale-specific URLs. | | `@@bidi_dir` | The text direction for the current locale, either \"ltr\" for left-to-right languages such as English or \"rtl\" for right-to-left languages such as Japanese. | | `@@bidi_reversed_dir` | If the `@@bidi_dir` is \"ltr\", then this is \"rtl\"; otherwise, it's \"ltr\". | | `@@bidi_start_edge` | If the `@@bidi_dir` is \"ltr\", then this is \"left\"; otherwise, it's \"right\". | | `@@bidi_end_edge` | If the `@@bidi_dir` is \"ltr\", then this is \"right\"; otherwise, it's \"left\". | Here's an example of using `@@extension_id` in a CSS file to construct a URL: body { **background-image:url('chrome-extension://__MSG_@@extension_id__/background.png');** } If the extension ID is abcdefghijklmnopqrstuvwxyzabcdef, then the bold line in the previous code snippet becomes: background-image:url('chrome-extension://abcdefghijklmnopqrstuvwxyzabcdef/background.png'); Here's an example of using `@@bidi_*` messages in a CSS file: body { **direction: __MSG_@@bidi_dir__;** } div#header { margin-bottom: 1.05em; overflow: hidden; padding-bottom: 1.5em; **padding-__MSG_@@bidi_start_edge__: 0;** **padding-__MSG_@@bidi_end_edge__: 1.5em;** position: relative; } For left-to-right languages such as English, the bold lines become: dir: ltr; padding-left: 0; padding-right: 1.5em; ## Locales You can choose from many locales, including some (such as `en`) that let a single translation support multiple variations of a language (such as `en_GB` and `en_US`). ### Supported locales You can use any of the [locales that the Chrome Web Store supports](http://code.google.com/chrome/webstore/docs/i18n.html#localeTable). ### Searching for messages You don't have to define every string for every supported locale. As long as the default locale's `messages.json` file has a value for every string, your extension or app will run no matter how sparse a translation is. Here's how the extension system searches for a message: 1. Search the messages file (if any) for the user's preferred locale. For example, when Google Chrome's locale is set to British English (`en_GB`), the system first looks for the message in `_locales/en_GB/messages.json`. If that file exists and the message is there, the system looks no further. 2. If the user's preferred locale has a region (that is, the locale has an underscore: _), search the locale without that region. For example, if the `en_GB` messages file doesn't exist or doesn't contain the message, the system looks in the `en` messages file. If that file exists and the message is there, the system looks no further. 3. Search the messages file for the default locale. For example, if the extension's \"default_locale\" is set to \"es\", and neither `_locales/en_GB/messages.json` nor `_locales/en/messages.json` contains the message, the extension uses the message from `_locales/es/messages.json`. In the following figure, the message named \"colores\" is in all three locales that the extension supports, but \"extName\" is in only two of the locales. Wherever a user running Google Chrome in US English sees the label \"Colors\", a user of British English sees \"Colours\". Both US English and British English users see the extension name \"Hello World\". Because the default language is Spanish, users running Google Chrome in any non-English language see the label \"Colores\" and the extension name \"Hola mundo\". ![Four files: manifest.json and three messages.json files (for es, en, and en_GB). The es and en files show entries for messages named \"extName\" and \"colores\"; the en_GB file has just one entry (for \"colores\").](/static/images/i18n-strings.gif) ### How to set your browser's locale To test translations, you might want to set your browser's locale. This section tells you how to set the locale in [Windows](#testing-win), [Mac OS X](#testing-mac), and [Linux](#testing-linux). #### Windows You can change the locale using either a locale-specific shortcut or the Google Chrome UI. The shortcut approach is quicker, once you've set it up, and it lets you use several languages at once. ##### Using a locale-specific shortcut To create and use a shortcut that launches Google Chrome with a particular locale: 1. Make a copy of the Google Chrome shortcut that's already on your desktop. 2. Rename the new shortcut to match the new locale. 3. Change the shortcut's properties so that the Target field specifies the `--lang` and `--user-data-dir` flags. The target should look something like this: _path_to_whale.exe_ --lang=_locale_ --user-data-dir=c:\\_locale_profile_dir_ 4. Launch Google Chrome by double-clicking the shortcut. For example, to create a shortcut that launches Google Chrome in Spanish (`es`), you might create a shortcut named `chrome-es` that has the following target: _path_to_whale.exe_ --lang=es --user-data-dir=c:\\chrome-profile-es You can create as many shortcuts as you like, making it easy to test in multiple languages. For example: _path_to_whale.exe_ --lang=en --user-data-dir=c:\\chrome-profile-en _path_to_whale.exe_ --lang=en_GB --user-data-dir=c:\\chrome-profile-en_GB _path_to_whale.exe_ --lang=ko --user-data-dir=c:\\chrome-profile-ko **Note:** Specifying `--user-data-dir` is optional but handy. Having one data directory per locale lets you run the browser in several languages at the same time. A disadvantage is that because the locales' data isn't shared, you have to install your extension multiple times — once per locale, which can be challenging when you don't speak the language. For more information, see [Creating and Using Profiles](http://www.chromium.org/developers/creating-and-using-profiles). ##### Using the UI Here's how to change the locale using the UI on Google Chrome for Windows: 1. App icon > **Options** 2. Choose the **Under the Hood** tab 3. Scroll down to **Web Content** 4. Click **Change font and language settings** 5. Choose the **Languages** tab 6. Use the drop down to set the **Google Chrome language** 7. Restart Chrome #### Mac OS X To change the locale on Mac, you use the system preferences. 1. From the Apple menu, choose **System Preferences** 2. Under the **Personal** section, choose **International** 3. Choose your language and location 4. Restart Chrome #### Linux To change the locale on Linux, first quit Google Chrome. Then, all in one line, set the LANGUAGE environment variable and launch Google Chrome. For example: LANGUAGE=es ./chrome ## Examples You can find simple examples of internationalization in the [examples/api/i18n](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/i18n/) directory. For a complete example, see [examples/extensions/news](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/extensions/news/). For other examples and for help in viewing the source code, see [Samples](samples). ### Examples: getMessage The following code gets a localized message from the browser and displays it as a string. It replaces two placeholders within the message with the strings \"string1\" and \"string2\". function getMessage() { var message = whale.i18n.getMessage(\"click_here\", [\"string1\", \"string2\"]); document.getElementById(\"languageSpan\").innerHTML = message; } Here's how you'd supply and use a single string: _// In JavaScript code_ status.innerText = whale.i18n.getMessage(\"error\", errorDetails); \"error\": { \"message\": \"Error: $details$\", \"description\": \"Generic error template. Expects error parameter to be passed in.\", \"placeholders\": { \"details\": { \"content\": \"$1\", \"example\": \"Failed to fetch RSS feed.\" } } } For more information about placeholders, see the [Locale-Specific Messages](i18n-messages) page. For details on calling `getMessage()`, see the [API reference](/extensions/i18n#method-getMessage). ### Example: getAcceptLanguages The following code gets accept-languages from the browser and displays them as a string by separating each accept-language with ','. function getAcceptLanguages() { whale.i18n.getAcceptLanguages(function(languageList) { var languages = languageList.join(\",\"); document.getElementById(\"languageSpan\").innerHTML = languages; }) } For details on calling `getAcceptLanguages()`, see the [API reference](/extensions/i18n#method-getAcceptLanguages). ### Example: detectLanguage The following code detects up to 3 languages from the given string and displays the result as strings separated by new lines. function detectLanguage(inputText) { whale.i18n.detectLanguage(inputText, function(result) { var outputLang = \"Detected Language: \"; var outputPercent = \"Language Percentage: \"; for(i = 0; i For more details on calling `detectLanguage(inputText)`, see the [API reference](/extensions/i18n#method-detectLanguage). ## Summary | Types | |---| | [LanguageCode](#type-LanguageCode) | | Methods | | [getAcceptLanguages](#method-getAcceptLanguages) − `whale.i18n.getAcceptLanguages(function callback)` | | [getMessage](#method-getMessage) − `string whale.i18n.getMessage(string messageName, any substitutions)` | | [getUILanguage](#method-getUILanguage) − `string whale.i18n.getUILanguage()` | | [detectLanguage](#method-detectLanguage) − `whale.i18n.detectLanguage(string text, function callback)` | ## Types ### LanguageCode Since Chrome 47. string An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). For an unknown language, `und` will be returned, which means that [percentage] of the text is unknown to CLD ## Methods ### getAcceptLanguages `whale.i18n.getAcceptLanguages(function callback)` Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use [i18n.getUILanguage](/extensions/i18n#method-getUILanguage). | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [LanguageCode](/extensions/i18n#type-LanguageCode) languages) {...};` | array of [LanguageCode](/extensions/i18n#type-LanguageCode) | languages | |---|---| Array of LanguageCode | | ### getMessage `string whale.i18n.getMessage(string messageName, any substitutions)` Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the `getMessage()` call is wrong — for example, _messageName_ is not a string or the _substitutions_ array has more than 9 elements — this method returns `undefined`. | Parameters | |---| | string | messageName | The name of the message, as specified in the [`messages.json`](i18n-messages) file. | | any | (optional) substitutions | Up to 9 substitution strings, if the message requires any. | ### getUILanguage `string whale.i18n.getUILanguage()` Since Chrome 35. Gets the browser UI language of the browser. This is different from [i18n.getAcceptLanguages](/extensions/i18n#method-getAcceptLanguages) which returns the preferred user languages. ### detectLanguage `whale.i18n.detectLanguage(string text, function callback)` Since Chrome 47. Detects the language of the provided text using CLD. | Parameters | |---| | string | text | User input string to be translated. | | function | callback | The _callback_ parameter should be a function that looks like this: `function(object result) {...};` | object | result | |---|---| LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage | boolean | isReliable | |---|---| CLD detected language reliability | | array of object | languages | array of detectedLanguage #### Properties of each object DetectedLanguage object that holds detected ISO language code and its percentage in the input string | [LanguageCode](/extensions/i18n#type-LanguageCode) | language | | |---|---|---| | integer | percentage | The percentage of the detected language | | | | "},"extensions-identity.html":{"url":"extensions-identity.html","title":"identity","keywords":"","body":"whale.identity Description: Use the whale.identity API to get OAuth2 access tokens. Availability: Since Chrome 29. Permissions: \"identity\" Learn More: Identify User ## Summary | Types | |---| | [AccountInfo](#type-AccountInfo) | | Methods | | [getAccounts](#method-getAccounts) − `whale.identity.getAccounts(function callback)` | | [getAuthToken](#method-getAuthToken) − `whale.identity.getAuthToken(object details, function callback)` | | [getProfileUserInfo](#method-getProfileUserInfo) − `whale.identity.getProfileUserInfo(function callback)` | | [removeCachedAuthToken](#method-removeCachedAuthToken) − `whale.identity.removeCachedAuthToken(object details, function callback)` | | [launchWebAuthFlow](#method-launchWebAuthFlow) − `whale.identity.launchWebAuthFlow(object details, function callback)` | | [getRedirectURL](#method-getRedirectURL) − `string whale.identity.getRedirectURL(string path)` | | Events | | [onSignInChanged](#event-onSignInChanged) | ## Types ### AccountInfo Since Chrome 32. | properties | |---| | string | id | A unique identifier for the account. This ID will not change for the lifetime of the account. | ## Methods ### getAccounts `whale.identity.getAccounts(function callback)` **Dev** channel only. [Learn more](api_index#dev_apis). Retrieves a list of AccountInfo objects describing the accounts present on the profile. `getAccounts` is only supported on dev channel. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [AccountInfo](/extensions/identity#type-AccountInfo) accounts) {...};` | array of [AccountInfo](/extensions/identity#type-AccountInfo) | accounts | | |---|---|---| | ### getAuthToken `whale.identity.getAuthToken(object details, function callback)` Gets an OAuth2 access token using the client ID and scopes specified in the [`oauth2` section of manifest.json](app_identity.html#update_manifest). The Identity API caches access tokens in memory, so it's ok to call `getAuthToken` non-interactively any time a token is required. The token cache automatically handles expiration. For a good user experience it is important interactive token requests are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests, or Chrome sign in screens if they are not signed in, with with no context. In particular, do not use `getAuthToken` interactively when your app is first launched. | Parameters | |---| | object | (optional) details | Token options. | boolean | (optional) interactive | |---|---| Fetching a token may require the user to sign-in to Chrome, or approve the application's requested scopes. If the interactive flag is `true`, `getAuthToken` will prompt the user as necessary. When the flag is `false` or omitted, `getAuthToken` will return failure any time a prompt would be required. | | [AccountInfo](/extensions/identity#type-AccountInfo) | (optional) account | Since Chrome 37. The account ID whose token should be returned. If not specified, the primary account for the profile will be used. `account` is only supported when the \"enable-new-profile-management\" flag is set. | | array of string | (optional) scopes | Since Chrome 37. A list of OAuth2 scopes to request. When the `scopes` field is present, it overrides the list of scopes specified in manifest.json. | | | function | (optional) callback | Called with an OAuth2 access token as specified by the manifest, or undefined if there was an error. If you specify the _callback_ parameter, it should be a function that looks like this: `function(string token) {...};` | string | (optional) token | | |---|---|---| | ### getProfileUserInfo `whale.identity.getProfileUserInfo(function callback)` Since Chrome 37. Retrieves email address and obfuscated gaia id of the user signed into a profile. This API is different from identity.getAccounts in two ways. The information returned is available offline, and it only applies to the primary account for the profile. | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(object userInfo) {...};` | object | userInfo | |---|---| | string | email | |---|---| An email address for the user account signed into the current profile. Empty if the user is not signed in or the `identity.email` manifest permission is not specified. | | string | id | A unique identifier for the account. This ID will not change for the lifetime of the account. Empty if the user is not signed in or (in M41+) the `identity.email` manifest permission is not specified. | | | ### removeCachedAuthToken `whale.identity.removeCachedAuthToken(object details, function callback)` Removes an OAuth2 access token from the Identity API's token cache. If an access token is discovered to be invalid, it should be passed to removeCachedAuthToken to remove it from the cache. The app may then retrieve a fresh token with `getAuthToken`. | Parameters | |---| | object | details | Token information. | string | token | |---|---| The specific token that should be removed from the cache. | | | function | (optional) callback | Called when the token has been removed from the cache. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### launchWebAuthFlow `whale.identity.launchWebAuthFlow(object details, function callback)` Starts an auth flow at the specified URL. This method enables auth flows with non-Google identity providers by launching a web view and navigating it to the first URL in the provider's auth flow. When the provider redirects to a URL matching the pattern `https://.chromiumapp.org/*`, the window will close, and the final redirect URL will be passed to the callback function. For a good user experience it is important interactive auth flows are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests with no context. In particular, do not launch an interactive auth flow when your app is first launched. | Parameters | |---| | object | details | WebAuth flow options. | string | url | |---|---| The URL that initiates the auth flow. | | boolean | (optional) interactive | Whether to launch auth flow in interactive mode. Since some auth flows may immediately redirect to a result URL, `launchWebAuthFlow` hides its web view until the first navigation either redirects to the final URL, or finishes loading a page meant to be displayed. If the interactive flag is `true`, the window will be displayed when a page load completes. If the flag is `false` or omitted, `launchWebAuthFlow` will return with an error if the initial navigation does not complete the flow. | | | function | callback | Called with the URL redirected back to your application. The _callback_ parameter should be a function that looks like this: `function(string responseUrl) {...};` | string | (optional) responseUrl | | |---|---|---| | ### getRedirectURL `string whale.identity.getRedirectURL(string path)` Since Chrome 33. Generates a redirect URL to be used in |launchWebAuthFlow|. The generated URLs match the pattern `https://.chromiumapp.org/*`. | Parameters | |---| | string | (optional) path | The path appended to the end of the generated URL. | ## Events ### onSignInChanged Since Chrome 33. Fired when signin state changes for an account on the user's profile. #### addListener `whale.identity.onSignInChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [AccountInfo](/extensions/identity#type-AccountInfo) account, boolean signedIn) {...};` | [AccountInfo](/extensions/identity#type-AccountInfo) | account | |---|---| Since Chrome 32. | | boolean | signedIn | Since Chrome 32. | | "},"extensions-idle.html":{"url":"extensions-idle.html","title":"idle","keywords":"","body":"whale.idle Description: Use the whale.idle API to detect when the machine's idle state changes. Availability: Since Chrome 20. Permissions: \"idle\" ## Manifest You must declare the \"idle\" permission in your extension's manifest to use the idle API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"idle\" ]**, ... } ## Summary | Types | |---| | [IdleState](#type-IdleState) | | Methods | | [queryState](#method-queryState) − `whale.idle.queryState(integer detectionIntervalInSeconds, function callback)` | | [setDetectionInterval](#method-setDetectionInterval) − `whale.idle.setDetectionInterval(integer intervalInSeconds)` | | Events | | [onStateChanged](#event-onStateChanged) | ## Types ### IdleState | Enum | |---| | `\"active\"`, `\"idle\"`, or `\"locked\"` | ## Methods ### queryState `whale.idle.queryState(integer detectionIntervalInSeconds, function callback)` Returns \"locked\" if the system is locked, \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise. | Parameters | |---| | integer | detectionIntervalInSeconds | Since Chrome 25. The system is considered idle if detectionIntervalInSeconds seconds have elapsed since the last user input detected. | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [IdleState](/extensions/idle#type-IdleState) newState) {...};` | [IdleState](/extensions/idle#type-IdleState) | newState | | |---|---|---| | ### setDetectionInterval `whale.idle.setDetectionInterval(integer intervalInSeconds)` Since Chrome 25. Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds. | Parameters | |---| | integer | intervalInSeconds | Threshold, in seconds, used to determine when the system is in an idle state. | ## Events ### onStateChanged Fired when the system changes to an active, idle or locked state. The event fires with \"locked\" if the screen is locked or the screensaver activates, \"idle\" if the system is unlocked and the user has not generated any input for a specified number of seconds, and \"active\" when the user generates input on an idle system. #### addListener `whale.idle.onStateChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [IdleState](/extensions/idle#type-IdleState) newState) {...};` | [IdleState](/extensions/idle#type-IdleState) | newState | | |---|---|---| | "},"extensions-webstore.html":{"url":"extensions-webstore.html","title":"webstore","keywords":"","body":"whale.webstore Description: Use the whale.webstore API to initiate app and extension installations \"inline\" from your site. Availability: Since Chrome 20. Learn More: Using Inline Installation ## Summary | Types | |---| | [InstallStage](#type-InstallStage) | | [ErrorCode](#type-ErrorCode) | | Methods | | [install](#method-install) − `whale.webstore.install(string url, function successCallback, function failureCallback)` | | Events | | [onInstallStageChanged](#event-onInstallStageChanged) | | [onDownloadProgress](#event-onDownloadProgress) | ## Types ### InstallStage Enum used to indicate the stage of the installation process. 'downloading' indicates that the necessary files are being downloaded, and 'installing' indicates that the files are downloaded and are being actively installed. | Enum | |---| | `\"installing\"`, or `\"downloading\"` | ### ErrorCode Enum of the possible install results, including error codes sent back in the event that an inline installation has failed. | Enum | |---| | `\"otherError\"` An uncommon, unrecognized, or unexpected error. In some cases, the readable error string can provide more information. `\"aborted\"` The operation was aborted as the requestor is no longer alive. `\"installInProgress\"` An installation of the same extension is in progress. `\"notPermitted\"` The installation is not permitted. `\"invalidId\"` Invalid Chrome Web Store item ID. `\"webstoreRequestError\"` Failed to retrieve extension metadata from the Web Store. `\"invalidWebstoreResponse\"` The extension metadata retrieved from the Web Store was invalid. `\"invalidManifest\"` An error occurred while parsing the extension manifest retrieved from the Web Store. `\"iconError\"` Failed to retrieve the extension's icon from the Web Store, or the icon was invalid. `\"userCanceled\"` The user canceled the operation. `\"blacklisted\"` The extension is blacklisted. `\"missingDependencies\"` Unsatisfied dependencies, such as shared modules. `\"requirementViolations\"` Unsatisfied requirements, such as webgl. `\"blockedByPolicy\"` The extension is blocked by management policies. `\"launchFeatureDisabled\"` The launch feature is not available. `\"launchUnsupportedExtensionType\"` The launch feature is not supported for the extension type. `\"launchInProgress\"` A launch of the same extension is in progress. | ## Methods ### install `whale.webstore.install(string url, function successCallback, function failureCallback)` | Parameters | |---| | string | (optional) url | If you have more than one `` tag on your page with the `chrome-webstore-item` relation, you can choose which item you'd like to install by passing in its URL here. If it is omitted, then the first (or only) link will be used. An exception will be thrown if the passed in URL does not exist on the page. | | function | (optional) successCallback | This function is invoked when inline installation successfully completes (after the dialog is shown and the user agrees to add the item to Chrome). You may wish to use this to hide the user interface element that prompted the user to install the app or extension. | | function | (optional) failureCallback | This function is invoked when inline installation does not successfully complete. Possible reasons for this include the user canceling the dialog, the linked item not being found in the store, or the install being initiated from a non-verified site. If you specify the _failureCallback_ parameter, it should be a function that looks like this: `function(string error, [ErrorCode](/extensions/webstore#type-ErrorCode) errorCode) {...};` | string | error | |---|---| The failure detail. You may wish to inspect or log this for debugging purposes, but you should not rely on specific strings being passed back. | | [ErrorCode](/extensions/webstore#type-ErrorCode) | (optional) errorCode | The error code from the stable set of possible errors. | | ## Events ### onInstallStageChanged Since Chrome 35. Fired when an inline installation enters a new InstallStage. In order to receive notifications about this event, listeners must be registered before the inline installation begins. #### addListener `whale.webstore.onInstallStageChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InstallStage](/extensions/webstore#type-InstallStage) stage) {...};` | [InstallStage](/extensions/webstore#type-InstallStage) | stage | |---|---| The InstallStage that just began. | | ### onDownloadProgress Since Chrome 35. Fired periodically with the download progress of an inline install. In order to receive notifications about this event, listeners must be registered before the inline installation begins. #### addListener `whale.webstore.onDownloadProgress.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(double percentDownloaded) {...};` | double | percentDownloaded | |---|---| The progress of the download, between 0 and 1\\. 0 indicates no progress; 1.0 indicates complete. | | "},"extensions-input-ime.html":{"url":"extensions-input-ime.html","title":"input-ime","keywords":"","body":"whale.input.ime Description: Use the whale.input.ime API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window. Availability: Since Chrome 21. Permissions: \"input\" ## Manifest You must declare the \"input\" permission in the [extension manifest](manifest) to use the input.ime API. For example: { \"name\": \"My extension\", ... **\"permissions\": [ \"input\" ]**, ... } ## Examples The following code creates an IME that converts typed letters to upper case. var context_id = -1; whale.input.ime.onFocus.addListener(function(context) { context_id = context.contextID; }); whale.input.ime.onKeyEvent.addListener( function(engineID, keyData) { if (keyData.type == \"keydown\" && keyData.key.match(/^[a-z]$/)) { whale.input.ime.commitText({\"contextID\": context_id, \"text\": keyData.key.toUpperCase()}); return true; } else { return false; } }); For an example of using this API, see the [basic input.ime sample](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/input.ime/basic/). For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [KeyboardEventType](#type-KeyboardEventType) | | [KeyboardEvent](#type-KeyboardEvent) | | [InputContextType](#type-InputContextType) | | [InputContext](#type-InputContext) | | [MenuItemStyle](#type-MenuItemStyle) | | [MenuItem](#type-MenuItem) | | [UnderlineStyle](#type-UnderlineStyle) | | [WindowPosition](#type-WindowPosition) | | [ScreenType](#type-ScreenType) | | [CallbackStyle](#type-CallbackStyle) | | [MouseButton](#type-MouseButton) | | [WindowType](#type-WindowType) | | [Bounds](#type-Bounds) | | [CreateWindowOptions](#type-CreateWindowOptions) | | Methods | | [setComposition](#method-setComposition) − `whale.input.ime.setComposition(object parameters, function callback)` | | [clearComposition](#method-clearComposition) − `whale.input.ime.clearComposition(object parameters, function callback)` | | [commitText](#method-commitText) − `whale.input.ime.commitText(object parameters, function callback)` | | [sendKeyEvents](#method-sendKeyEvents) − `whale.input.ime.sendKeyEvents(object parameters, function callback)` | | [hideInputView](#method-hideInputView) − `whale.input.ime.hideInputView()` | | [setCandidateWindowProperties](#method-setCandidateWindowProperties) − `whale.input.ime.setCandidateWindowProperties(object parameters, function callback)` | | [setCandidates](#method-setCandidates) − `whale.input.ime.setCandidates(object parameters, function callback)` | | [setCursorPosition](#method-setCursorPosition) − `whale.input.ime.setCursorPosition(object parameters, function callback)` | | [setMenuItems](#method-setMenuItems) − `whale.input.ime.setMenuItems(object parameters, function callback)` | | [updateMenuItems](#method-updateMenuItems) − `whale.input.ime.updateMenuItems(object parameters, function callback)` | | [deleteSurroundingText](#method-deleteSurroundingText) − `whale.input.ime.deleteSurroundingText(object parameters, function callback)` | | [keyEventHandled](#method-keyEventHandled) − `whale.input.ime.keyEventHandled(string requestId, boolean response)` | | [createWindow](#method-createWindow) − `whale.input.ime.createWindow( CreateWindowOptions options, function callback)` | | [showWindow](#method-showWindow) − `whale.input.ime.showWindow(integer windowId, function callback)` | | [hideWindow](#method-hideWindow) − `whale.input.ime.hideWindow(integer windowId, function callback)` | | [activate](#method-activate) − `whale.input.ime.activate(function callback)` | | [deactivate](#method-deactivate) − `whale.input.ime.deactivate(function callback)` | | Events | | [onActivate](#event-onActivate) | | [onDeactivated](#event-onDeactivated) | | [onFocus](#event-onFocus) | | [onBlur](#event-onBlur) | | [onInputContextUpdate](#event-onInputContextUpdate) | | [onKeyEvent](#event-onKeyEvent) | | [onCandidateClicked](#event-onCandidateClicked) | | [onMenuItemActivated](#event-onMenuItemActivated) | | [onSurroundingTextChanged](#event-onSurroundingTextChanged) | | [onReset](#event-onReset) | | [onCompositionBoundsChanged](#event-onCompositionBoundsChanged) | ## Types ### KeyboardEventType | Enum | |---| | `\"keyup\"`, or `\"keydown\"` | ### KeyboardEvent See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent | properties | |---| | [KeyboardEventType](/extensions/input.ime#type-KeyboardEventType) | type | One of keyup or keydown. | | string | requestId | The ID of the request. | | string | (optional) extensionId | Since Chrome 34. The extension ID of the sender of this keyevent. | | string | key | Value of the key being pressed | | string | code | Since Chrome 26. Value of the physical key being pressed. The value is not affected by current keyboard layout or modifier state. | | integer | (optional) keyCode | Since Chrome 37. The deprecated HTML keyCode, which is system- and implementation-dependent numerical code signifying the unmodified identifier associated with the key pressed. | | boolean | (optional) altKey | Whether or not the ALT key is pressed. | | boolean | (optional) ctrlKey | Whether or not the CTRL key is pressed. | | boolean | (optional) shiftKey | Whether or not the SHIFT key is pressed. | | boolean | (optional) capsLock | Since Chrome 29. Whether or not the CAPS_LOCK is enabled. | ### InputContextType Type of value this text field edits, (Text, Number, URL, etc) | Enum | |---| | `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"number\"`, or `\"password\"` | ### InputContext Describes an input Context | properties | |---| | integer | contextID | This is used to specify targets of text field operations. This ID becomes invalid as soon as onBlur is called. | | [InputContextType](/extensions/input.ime#type-InputContextType) | type | Type of value this text field edits, (Text, Number, URL, etc) | | boolean | autoCorrect | Since Chrome 40. Whether the text field wants auto-correct. | | boolean | autoComplete | Since Chrome 40. Whether the text field wants auto-complete. | | boolean | spellCheck | Since Chrome 40. Whether the text field wants spell-check. | ### MenuItemStyle The type of menu item. Radio buttons between separators are considered grouped. | Enum | |---| | `\"check\"`, `\"radio\"`, or `\"separator\"` | ### MenuItem Since Chrome 30. A menu item used by an input method to interact with the user from the language menu. | properties | |---| | string | id | String that will be passed to callbacks referencing this MenuItem. | | string | (optional) label | Text displayed in the menu for this item. | | [MenuItemStyle](/extensions/input.ime#type-MenuItemStyle) | (optional) style | The type of menu item. | | boolean | (optional) visible | Indicates this item is visible. | | boolean | (optional) checked | Indicates this item should be drawn with a check. | | boolean | (optional) enabled | Indicates this item is enabled. | ### UnderlineStyle The type of the underline to modify this segment. | Enum | |---| | `\"underline\"`, `\"doubleUnderline\"`, or `\"noUnderline\"` | ### WindowPosition Where to display the candidate window. If set to 'cursor', the window follows the cursor. If set to 'composition', the window is locked to the beginning of the composition. | Enum | |---| | `\"cursor\"`, or `\"composition\"` | ### ScreenType The screen type under which the IME is activated. | Enum | |---| | `\"normal\"`, `\"login\"`, `\"lock\"`, or `\"secondary-login\"` | ### CallbackStyle | Enum | |---| | `\"async\"` | ### MouseButton Which mouse buttons was clicked. | Enum | |---| | `\"left\"`, `\"middle\"`, or `\"right\"` | ### WindowType The IME window types. | Enum | |---| | `\"normal\"`, or `\"followCursor\"` | ### Bounds Since Chrome 50. Describes the screen coordinates of a rect. | properties | |---| | integer | left | The left of the bounds. | | integer | top | The top of the bounds. | | integer | width | The width of the bounds. | | integer | height | The height of the bounds . | ### CreateWindowOptions Since Chrome 50. The options to create an IME window | properties | |---| | [WindowType](/extensions/input.ime#type-WindowType) | windowType | | | string | (optional) url | | | [Bounds](/extensions/input.ime#type-Bounds) | (optional) bounds | | ## Methods ### setComposition `whale.input.ime.setComposition(object parameters, function callback)` Set the current composition. If this extension does not own the active IME, this fails. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the composition text will be set | | string | text | Text to set | | integer | (optional) selectionStart | Position in the text that the selection starts at. | | integer | (optional) selectionEnd | Position in the text that the selection ends at. | | integer | cursor | Position in the text of the cursor. | | array of object | (optional) segments | List of segments and their associated types. #### Properties of each object | integer | start | |---|---| Index of the character to start this segment at | | integer | end | Index of the character to end this segment after. | | [UnderlineStyle](/extensions/input.ime#type-UnderlineStyle) | style | The type of the underline to modify this segment. | | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### clearComposition `whale.input.ime.clearComposition(object parameters, function callback)` Clear the current composition. If this extension does not own the active IME, this fails. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the composition will be cleared | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### commitText `whale.input.ime.commitText(object parameters, function callback)` Commits the provided text to the current input. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the text will be committed | | string | text | The text to commit | | | function | (optional) callback | Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, whale.runtime.lastError is set. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### sendKeyEvents `whale.input.ime.sendKeyEvents(object parameters, function callback)` Since Chrome 33. Sends the key events. This function is expected to be used by virtual keyboards. When key(s) on a virtual keyboard is pressed by a user, this function is used to propagate that event to the system. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context where the key events will be sent, or zero to send key events to non-input field. | | array of [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) | keyData | Data on the key event. | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### hideInputView `whale.input.ime.hideInputView()` Since Chrome 34. Hides the input view window, which is popped up automatically by system. If the input view window is already hidden, this function will do nothing. ### setCandidateWindowProperties `whale.input.ime.setCandidateWindowProperties(object parameters, function callback)` Sets the properties of the candidate window. This fails if the extension doesn't own the active IME | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to set properties on. | | object | properties | | boolean | (optional) visible | |---|---| True to show the Candidate window, false to hide it. | | boolean | (optional) cursorVisible | True to show the cursor, false to hide it. | | boolean | (optional) vertical | True if the candidate window should be rendered vertical, false to make it horizontal. | | integer | (optional) pageSize | The number of candidates to display per page. | | string | (optional) auxiliaryText | Text that is shown at the bottom of the candidate window. | | boolean | (optional) auxiliaryTextVisible | True to display the auxiliary text, false to hide it. | | [WindowPosition](/extensions/input.ime#type-WindowPosition) | (optional) windowPosition | Since Chrome 28. Where to display the candidate window. | | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setCandidates `whale.input.ime.setCandidates(object parameters, function callback)` Sets the current candidate list. This fails if this extension doesn't own the active IME | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context that owns the candidate window. | | array of object | candidates | List of candidates to show in the candidate window #### Properties of each object | string | candidate | |---|---| The candidate | | integer | id | The candidate's id | | integer | (optional) parentId | The id to add these candidates under | | string | (optional) label | Short string displayed to next to the candidate, often the shortcut key or index | | string | (optional) annotation | Additional text describing the candidate | | object | (optional) usage | The usage or detail description of word. | string | title | |---|---| The title string of details description. | | string | body | The body string of detail description. | | | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setCursorPosition `whale.input.ime.setCursorPosition(object parameters, function callback)` Set the position of the cursor in the candidate window. This is a no-op if this extension does not own the active IME. | Parameters | |---| | object | parameters | | integer | contextID | |---|---| ID of the context that owns the candidate window. | | integer | candidateID | ID of the candidate to select. | | | function | (optional) callback | Called when the operation completes If you specify the _callback_ parameter, it should be a function that looks like this: `function(boolean success) {...};` | boolean | success | | |---|---|---| | ### setMenuItems `whale.input.ime.setMenuItems(object parameters, function callback)` Adds the provided menu items to the language menu when this IME is active. | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to use | | array of [MenuItem](/extensions/input.ime#type-MenuItem) | items | MenuItems to add. They will be added in the order they exist in the array. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### updateMenuItems `whale.input.ime.updateMenuItems(object parameters, function callback)` Updates the state of the MenuItems specified | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine to use | | array of [MenuItem](/extensions/input.ime#type-MenuItem) | items | Array of MenuItems to update | | | function | (optional) callback | Called when the operation completes If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deleteSurroundingText `whale.input.ime.deleteSurroundingText(object parameters, function callback)` Since Chrome 27. Deletes the text around the caret. | Parameters | |---| | object | parameters | | string | engineID | |---|---| ID of the engine receiving the event. | | integer | contextID | ID of the context where the surrounding text will be deleted. | | integer | offset | The offset from the caret position where deletion will start. This value can be negative. | | integer | length | The number of characters to be deleted | | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### keyEventHandled `whale.input.ime.keyEventHandled(string requestId, boolean response)` Since Chrome 25. Indicates that the key event received by onKeyEvent is handled. This should only be called if the onKeyEvent listener is asynchronous. | Parameters | |---| | string | requestId | Request id of the event that was handled. This should come from keyEvent.requestId | | boolean | response | True if the keystroke was handled, false if not | ### createWindow `whale.input.ime.createWindow( [CreateWindowOptions](/extensions/input.ime#type-CreateWindowOptions) options, function callback)` Since Chrome 50. Creates IME window. | Parameters | |---| | [CreateWindowOptions](/extensions/input.ime#type-CreateWindowOptions) | options | The options of the newly created IME window. | | function | callback | Called when the operation completes. The _callback_ parameter should be a function that looks like this: `function(Window windowObject) {...};` | Window | windowObject | |---|---| The JavaScript 'window' object of the newly created IME window. It contains the additional 'id' property for the parameters of the other functions like showWindow/hideWindow. | | ### showWindow `whale.input.ime.showWindow(integer windowId, function callback)` Since Chrome 51. Shows the IME window. This makes the hidden window visible. | Parameters | |---| | integer | windowId | The ID of the IME window. | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### hideWindow `whale.input.ime.hideWindow(integer windowId, function callback)` Since Chrome 51. Hides the IME window. This doesn't close the window. Instead, it makes the window invisible. The extension can cache the window and show/hide it for better performance. | Parameters | |---| | integer | windowId | The ID of the IME window. | | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### activate `whale.input.ime.activate(function callback)` Since Chrome 50. Activates the IME extension so that it can receive events. | Parameters | |---| | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ### deactivate `whale.input.ime.deactivate(function callback)` Since Chrome 50. Deactivates the IME extension so that it cannot receive events. | Parameters | |---| | function | (optional) callback | Called when the operation completes. If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onActivate This event is sent when an IME is activated. It signals that the IME will be receiving onKeyPress events. #### addListener `whale.input.ime.onActivate.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, [ScreenType](/extensions/input.ime#type-ScreenType) screen) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | [ScreenType](/extensions/input.ime#type-ScreenType) | screen | Since Chrome 38. The screen type under which the IME is activated. | | ### onDeactivated This event is sent when an IME is deactivated. It signals that the IME will no longer be receiving onKeyPress events. #### addListener `whale.input.ime.onDeactivated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | ### onFocus This event is sent when focus enters a text box. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onFocus.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InputContext](/extensions/input.ime#type-InputContext) context) {...};` | [InputContext](/extensions/input.ime#type-InputContext) | context | |---|---| Describes the text field that has acquired focus. | | ### onBlur This event is sent when focus leaves a text box. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onBlur.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer contextID) {...};` | integer | contextID | |---|---| The ID of the text field that has lost focus. The ID is invalid after this call | | ### onInputContextUpdate This event is sent when the properties of the current InputContext change, such as the the type. It is sent to all extensions that are listening to this event, and enabled by the user. #### addListener `whale.input.ime.onInputContextUpdate.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [InputContext](/extensions/input.ime#type-InputContext) context) {...};` | [InputContext](/extensions/input.ime#type-InputContext) | context | |---|---| An InputContext object describing the text field that has changed. | | ### onKeyEvent Fired when a key event is sent from the operating system. The event will be sent to the extension if this extension owns the active IME. #### addListener `whale.input.ime.onKeyEvent.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) keyData) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | [KeyboardEvent](/extensions/input.ime#type-KeyboardEvent) | keyData | Data on the key event | | ### onCandidateClicked This event is sent if this extension owns the active IME. #### addListener `whale.input.ime.onCandidateClicked.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, integer candidateID, [MouseButton](/extensions/input.ime#type-MouseButton) button) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | integer | candidateID | ID of the candidate that was clicked. | | [MouseButton](/extensions/input.ime#type-MouseButton) | button | Which mouse buttons was clicked. | | ### onMenuItemActivated Called when the user selects a menu item #### addListener `whale.input.ime.onMenuItemActivated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, string name) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | string | name | Name of the MenuItem which was activated | | ### onSurroundingTextChanged Since Chrome 27. Called when the editable string around caret is changed or when the caret position is moved. The text length is limited to 100 characters for each back and forth direction. #### addListener `whale.input.ime.onSurroundingTextChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID, object surroundingInfo) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | object | surroundingInfo | The surrounding information. | string | text | |---|---| The text around the cursor. This is only a subset of all text in the input field. | | integer | focus | The ending position of the selection. This value indicates caret position if there is no selection. | | integer | anchor | The beginning position of the selection. This value indicates caret position if there is no selection. | | integer | offset | Since Chrome 46. The offset position of `text`. Since `text` only includes a subset of text around the cursor, offset indicates the absolute position of the first character of `text`. | | | ### onReset Since Chrome 29. This event is sent when chrome terminates ongoing text input session. #### addListener `whale.input.ime.onReset.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(string engineID) {...};` | string | engineID | |---|---| ID of the engine receiving the event | | ### onCompositionBoundsChanged Since Chrome 50. Triggered when the bounds of the IME composition text or cursor are changed. The IME composition text is the instance of text produced in the input method editor. #### addListener `whale.input.ime.onCompositionBoundsChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Bounds](/extensions/input.ime#type-Bounds) boundsList) {...};` | array of [Bounds](/extensions/input.ime#type-Bounds) | boundsList | |---|---| List of bounds information for each character on IME composition text. If there's no composition text in the editor, this array contains the bound information of the cursor. | | "},"extensions-windows.html":{"url":"extensions-windows.html","title":"windows","keywords":"","body":"whale.windows Description: Use the whale.windows API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser. Availability: Since Chrome 20. Permissions: The whale.windows API can be used without declaring any permission. However, the \"tabs\" permission is required in order to populate the [url](tabs#property-Tab-url), [title](tabs#property-Tab-title), and [favIconUrl](tabs#property-Tab-favIconUrl) properties of [Tab](tabs#type-Tab) objects. ## Manifest When requested, a `[windows.Window](/extensions/windows#type-Window)` will contain an array of `[tabs.Tab](/extensions/tabs#type-Tab)` objects. You must declare the `\"tabs\"` permission in your [manifest](manifest) if you require access to the `[url](/extensions/tabs#property-Tab-url)`, `[title](/extensions/tabs#property-Tab-title)`, or `[favIconUrl](/extensions/tabs#property-Tab-favIconUrl)` properties of `[tabs.Tab](/extensions/tabs#type-Tab)`. For example: { \"name\": \"My extension\", ... **\"permissions\": [\"tabs\"]**, ... } ## The current window Many functions in the extension system take an optional windowId parameter, which defaults to the current window. The _current window_ is the window that contains the code that is currently executing. It's important to realize that this can be different from the topmost or focused window. For example, say an extension creates a few tabs or windows from a single HTML file, and that the HTML file contains a call to [tabs.query](/extensions/tabs#method-query). The current window is the window that contains the page that made the call, no matter what the topmost window is. In the case of the [event page](event_pages), the value of the current window falls back to the last active window. Under some circumstances, there may be no current window for background pages. ## Examples ![Two windows, each with one tab](/static/images/windows.png) You can find simple examples of using the windows module in the [examples/api/windows](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/windows/) directory. Another example is in the [tabs_api.html](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/tabs/inspector/tabs_api.html) file of the [inspector](https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/tabs/inspector/) example. For other examples and for help in viewing the source code, see [Samples](samples). ## Summary | Types | |---| | [WindowType](#type-WindowType) | | [WindowState](#type-WindowState) | | [Window](#type-Window) | | [CreateType](#type-CreateType) | | Properties | | [WINDOW_ID_NONE](#property-WINDOW_ID_NONE) | | [WINDOW_ID_CURRENT](#property-WINDOW_ID_CURRENT) | | Methods | | [get](#method-get) − `whale.windows.get(integer windowId, object getInfo, function callback)` | | [getCurrent](#method-getCurrent) − `whale.windows.getCurrent(object getInfo, function callback)` | | [getLastFocused](#method-getLastFocused) − `whale.windows.getLastFocused(object getInfo, function callback)` | | [getAll](#method-getAll) − `whale.windows.getAll(object getInfo, function callback)` | | [create](#method-create) − `whale.windows.create(object createData, function callback)` | | [update](#method-update) − `whale.windows.update(integer windowId, object updateInfo, function callback)` | | [remove](#method-remove) − `whale.windows.remove(integer windowId, function callback)` | | Events | | [onCreated](#event-onCreated) | | [onRemoved](#event-onRemoved) | | [onFocusChanged](#event-onFocusChanged) | ## Types ### WindowType The type of browser window this is. Under some circumstances a Window may not be assigned type property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | Enum | |---| | `\"normal\"`, `\"popup\"`, `\"panel\"`, `\"app\"`, or `\"devtools\"` | ### WindowState The state of this browser window. Under some circumstances a Window may not be assigned state property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | Enum | |---| | `\"normal\"` Normal window state (i.e. not minimized, maximized, or fullscreen). `\"minimized\"` Minimized window state. `\"maximized\"` Maximized window state. `\"fullscreen\"` Fullscreen window state. `\"docked\"` _Deprecated since Chrome M59._ Docked windows are no longer supported. This state will be converted to \"normal\". | ### Window | properties | |---| | integer | (optional) id | The ID of the window. Window IDs are unique within a browser session. Under some circumstances a Window may not be assigned an ID, for example when querying windows using the [sessions](/extensions/sessions) API, in which case a session ID may be present. | | boolean | focused | Whether the window is currently the focused window. | | integer | (optional) top | The offset of the window from the top edge of the screen in pixels. Under some circumstances a Window may not be assigned top property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) left | The offset of the window from the left edge of the screen in pixels. Under some circumstances a Window may not be assigned left property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) width | The width of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned width property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | integer | (optional) height | The height of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned height property, for example when querying closed windows from the [sessions](/extensions/sessions) API. | | array of [tabs.Tab](/extensions/tabs#type-Tab) | (optional) tabs | Array of [tabs.Tab](/extensions/tabs#type-Tab) objects representing the current tabs in the window. | | boolean | incognito | Whether the window is incognito. | | [WindowType](/extensions/windows#type-WindowType) | (optional) type | The type of browser window this is. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | The state of this browser window. | | boolean | alwaysOnTop | Whether the window is set to be always on top. | | string | (optional) sessionId | Since Chrome 31. The session ID used to uniquely identify a Window obtained from the [sessions](/extensions/sessions) API. | ### CreateType Specifies what type of browser window to create. 'panel' is deprecated and only available to existing whitelisted extensions on Chrome OS. | Enum | |---| | `\"normal\"`, `\"popup\"`, or `\"panel\"` | ## Properties | `-1` | `whale.windows.WINDOW_ID_NONE` | The windowId value that represents the absence of a chrome browser window. | |---|---|---| | `-2` | `whale.windows.WINDOW_ID_CURRENT` | The windowId value that represents the [current window](windows#current-window). | ## Methods ### get `whale.windows.get(integer windowId, object getInfo, function callback)` Gets details about a window. | Parameters | |---| | integer | windowId | | | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getCurrent `whale.windows.getCurrent(object getInfo, function callback)` Gets the [current window](#current-window). | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getLastFocused `whale.windows.getLastFocused(object getInfo, function callback)` Gets the window that was most recently focused — typically the window 'on top'. | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, the [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### getAll `whale.windows.getAll(object getInfo, function callback)` Gets all windows. | Parameters | |---| | object | (optional) getInfo | | boolean | (optional) populate | |---|---| If true, each [windows.Window](/extensions/windows#type-Window) object will have a tabs property that contains a list of the [tabs.Tab](/extensions/tabs#type-Tab) objects for that window. The `Tab` objects only contain the `url`, `title` and `favIconUrl` properties if the extension's manifest file includes the `\"tabs\"` permission. | | array of [WindowType](/extensions/windows#type-WindowType) | (optional) windowTypes | Since Chrome 46. If set, the [windows.Window](/extensions/windows#type-Window) returned will be filtered based on its type. If unset the default filter is set to `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. | | | function | callback | The _callback_ parameter should be a function that looks like this: `function(array of [Window](/extensions/windows#type-Window) windows) {...};` | array of [Window](/extensions/windows#type-Window) | windows | | |---|---|---| | ### create `whale.windows.create(object createData, function callback)` Creates (opens) a new browser with any optional sizing, position or default URL provided. | Parameters | |---| | object | (optional) createData | | string or array of string | (optional) url | |---|---| A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page. | | integer | (optional) tabId | The id of the tab for which you want to adopt to the new window. | | integer | (optional) left | The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels. | | integer | (optional) top | The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels. | | integer | (optional) width | The width in pixels of the new window, including the frame. If not specified defaults to a natural width. | | integer | (optional) height | The height in pixels of the new window, including the frame. If not specified defaults to a natural height. | | boolean | (optional) focused | If true, opens an active window. If false, opens an inactive window. | | boolean | (optional) incognito | Whether the new window should be an incognito window. | | [CreateType](/extensions/windows#type-CreateType) | (optional) type | Specifies what type of browser window to create. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | Since Chrome 44. The initial state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | (optional) window | |---|---| Contains details about the created window. | | ### update `whale.windows.update(integer windowId, object updateInfo, function callback)` Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged. | Parameters | |---| | integer | windowId | | | object | updateInfo | | integer | (optional) left | |---|---| The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels. | | integer | (optional) top | The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels. | | integer | (optional) width | The width to resize the window to in pixels. This value is ignored for panels. | | integer | (optional) height | The height to resize the window to in pixels. This value is ignored for panels. | | boolean | (optional) focused | If true, brings the window to the front. If false, brings the next window in the z-order to the front. | | boolean | (optional) drawAttention | If true, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to false to cancel a previous draw attention request. | | [WindowState](/extensions/windows#type-WindowState) | (optional) state | The new state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | | |---|---|---| | ### remove `whale.windows.remove(integer windowId, function callback)` Removes (closes) a window, and all the tabs inside it. | Parameters | |---| | integer | windowId | | | function | (optional) callback | If you specify the _callback_ parameter, it should be a function that looks like this: `function() {...};` | ## Events ### onCreated Fired when a window is created. #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being created must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onCreated.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function( [Window](/extensions/windows#type-Window) window) {...};` | [Window](/extensions/windows#type-Window) | window | |---|---| Details of the window that was created. | | ### onRemoved Fired when a window is removed (closed). #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being removed must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onRemoved.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer windowId) {...};` | integer | windowId | |---|---| ID of the removed window. | | ### onFocusChanged Fired when the currently focused window changes. Will be whale.windows.WINDOW_ID_NONE if all chrome windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one chrome window to another. #### Filters array of [WindowType](/extensions/windows#type-WindowType) windowTypes Conditions that the window's type being removed must satisfy. By default it will satisfy `['app', 'normal', 'panel', 'popup']`, with `'app'` and `'panel'` window types limited to the extension's own windows. #### addListener `whale.windows.onFocusChanged.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function(integer windowId) {...};` | integer | windowId | |---|---| ID of the newly focused window. | | "},"extensions-instance-id.html":{"url":"extensions-instance-id.html","title":"instance-id","keywords":"","body":"whale.instanceID Description: Use whale.instanceID to access the Instance ID service. Availability: Since Chrome 46. Permissions: \"gcm\" ## Summary | Methods | |---| | [getID](#method-getID) − `whale.instanceID.getID(function callback)` | | [getCreationTime](#method-getCreationTime) − `whale.instanceID.getCreationTime(function callback)` | | [getToken](#method-getToken) − `whale.instanceID.getToken(object getTokenParams, function callback)` | | [deleteToken](#method-deleteToken) − `whale.instanceID.deleteToken(object deleteTokenParams, function callback)` | | [deleteID](#method-deleteID) − `whale.instanceID.deleteID(function callback)` | | Events | | [onTokenRefresh](#event-onTokenRefresh) | ## Methods ### getID `whale.instanceID.getID(function callback)` Retrieves an identifier for the app instance. The instance ID will be returned by the `callback`. The same ID will be returned as long as the application identity has not been revoked or expired. | Parameters | |---| | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when instanceID is empty. The _callback_ parameter should be a function that looks like this: `function(string instanceID) {...};` | string | instanceID | |---|---| An Instance ID assigned to the app instance. | | ### getCreationTime `whale.instanceID.getCreationTime(function callback)` Retrieves the time when the InstanceID has been generated. The creation time will be returned by the `callback`. | Parameters | |---| | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when creationTime is zero. The _callback_ parameter should be a function that looks like this: `function(double creationTime) {...};` | double | creationTime | |---|---| The time when the Instance ID has been generated, represented in milliseconds since the epoch. | | ### getToken `whale.instanceID.getToken(object getTokenParams, function callback)` Return a token that allows the authorized entity to access the service defined by scope. | Parameters | |---| | object | getTokenParams | Parameters for getToken. | string | authorizedEntity | |---|---| Identifies the entity that is authorized to access resources associated with this Instance ID. It can be a project ID from [Google developer console](https://code.google.com/apis/console). | | string | scope | Identifies authorized actions that the authorized entity can take. E.g. for sending GCM messages, `GCM` scope should be used. | | object | (optional) options | Allows including a small number of string key/value pairs that will be associated with the token and may be used in processing the request. | | | function | callback | Function called when the retrieval completes. It should check [runtime.lastError](/extensions/runtime#property-lastError) for error when token is empty. The _callback_ parameter should be a function that looks like this: `function(string token) {...};` | string | token | |---|---| A token assigned by the requested service. | | ### deleteToken `whale.instanceID.deleteToken(object deleteTokenParams, function callback)` Revokes a granted token. | Parameters | |---| | object | deleteTokenParams | Parameters for deleteToken. | string | authorizedEntity | |---|---| The authorized entity that is used to obtain the token. | | string | scope | The scope that is used to obtain the token. | | | function | callback | Function called when the token deletion completes. The token was revoked successfully if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ### deleteID `whale.instanceID.deleteID(function callback)` Resets the app instance identifier and revokes all tokens associated with it. | Parameters | |---| | function | callback | Function called when the deletion completes. The instance identifier was revoked successfully if [runtime.lastError](/extensions/runtime#property-lastError) is not set. The _callback_ parameter should be a function that looks like this: `function() {...};` | ## Events ### onTokenRefresh Fired when all the granted tokens need to be refreshed. #### addListener `whale.instanceID.onTokenRefresh.addListener(function callback)` | Parameters | |---| | function | callback | The _callback_ parameter should be a function that looks like this: `function() {...};` | "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Availability Definition for this term Permissions With it's definition, this can contain bold text and all other kinds of inline markup ... function callback Callback Function. "}}